/**
 * ScbCapsBcoWSStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
package de.joonko.loan.partner.santander.stub;


/*
 *  ScbCapsBcoWSStub java implementation
 */
public class ScbCapsBcoWSStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public ScbCapsBcoWSStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public ScbCapsBcoWSStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public ScbCapsBcoWSStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext,
            "http://tempuri.org/bco/services/ScbCapsBcoWS");
    }

    /**
     * Default Constructor
     */
    public ScbCapsBcoWSStub() throws org.apache.axis2.AxisFault {
        this("http://tempuri.org/bco/services/ScbCapsBcoWS");
    }

    /**
     * Constructor taking the target endpoint
     */
    public ScbCapsBcoWSStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService("ScbCapsBcoWS" +
                getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[4];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://ws.bco.caps.scb.de", "getKreditvergleichsangebot"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://ws.bco.caps.scb.de", "getKreditvertragsangebot"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://ws.bco.caps.scb.de", "getKreditantragsstatus"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://ws.bco.caps.scb.de", "getKreditkonditionen"));
        _service.addOperation(__operation);

        _operations[3] = __operation;
    }

    //populates the faults
    private void populateFaults() {
        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvergleichsangebot"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvergleichsangebot"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvergleichsangebot"),
            "de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub$Fault");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvertragsangebot"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvertragsangebot"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditvertragsangebot"),
            "de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub$Fault");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditantragsstatus"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditantragsstatus"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditantragsstatus"),
            "de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub$Fault");

        faultExceptionNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditkonditionen"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultExceptionClassNameMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditkonditionen"),
            "de.joonko.loan.partner.santander.stub.FaultException");
        faultMessageMap.put(new org.apache.axis2.client.FaultMapKey(
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "Fault"), "getKreditkonditionen"),
            "de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub$Fault");
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#getKreditvergleichsangebot
     * @param getKreditvergleichsangebot0
     * @throws de.joonko.loan.partner.santander.stub.FaultException :
     */
    public de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse getKreditvergleichsangebot(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot getKreditvergleichsangebot0)
        throws java.rmi.RemoteException,
            de.joonko.loan.partner.santander.stub.FaultException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions()
                            .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditvergleichsangebotRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getKreditvergleichsangebot0,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://ws.bco.caps.scb.de",
                            "getKreditvergleichsangebot")),
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditvergleichsangebot"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "getKreditvergleichsangebot"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditvergleichsangebot"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditvergleichsangebot"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                            throw (de.joonko.loan.partner.santander.stub.FaultException) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#startgetKreditvergleichsangebot
     * @param getKreditvergleichsangebot0
     */
    public void startgetKreditvergleichsangebot(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot getKreditvergleichsangebot0,
        final de.joonko.loan.partner.santander.stub.ScbCapsBcoWSCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions()
                        .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditvergleichsangebotRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getKreditvergleichsangebot0,
                optimizeContent(
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditvergleichsangebot")),
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "getKreditvergleichsangebot"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultgetKreditvergleichsangebot((de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetKreditvergleichsangebot(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getKreditvergleichsangebot"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditvergleichsangebot"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditvergleichsangebot"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                                        callback.receiveErrorgetKreditvergleichsangebot((de.joonko.loan.partner.santander.stub.FaultException) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetKreditvergleichsangebot(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvergleichsangebot(f);
                                }
                            } else {
                                callback.receiveErrorgetKreditvergleichsangebot(f);
                            }
                        } else {
                            callback.receiveErrorgetKreditvergleichsangebot(f);
                        }
                    } else {
                        callback.receiveErrorgetKreditvergleichsangebot(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetKreditvergleichsangebot(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#getKreditvertragsangebot
     * @param getKreditvertragsangebot2
     * @throws de.joonko.loan.partner.santander.stub.FaultException :
     */
    public de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse getKreditvertragsangebot(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot getKreditvertragsangebot2)
        throws java.rmi.RemoteException,
            de.joonko.loan.partner.santander.stub.FaultException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions()
                            .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditvertragsangebotRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getKreditvertragsangebot2,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://ws.bco.caps.scb.de",
                            "getKreditvertragsangebot")),
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditvertragsangebot"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getKreditvertragsangebot"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditvertragsangebot"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditvertragsangebot"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                            throw (de.joonko.loan.partner.santander.stub.FaultException) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#startgetKreditvertragsangebot
     * @param getKreditvertragsangebot2
     */
    public void startgetKreditvertragsangebot(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot getKreditvertragsangebot2,
        final de.joonko.loan.partner.santander.stub.ScbCapsBcoWSCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions()
                        .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditvertragsangebotRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getKreditvertragsangebot2,
                optimizeContent(
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditvertragsangebot")),
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "getKreditvertragsangebot"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultgetKreditvertragsangebot((de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetKreditvertragsangebot(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getKreditvertragsangebot"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditvertragsangebot"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditvertragsangebot"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                                        callback.receiveErrorgetKreditvertragsangebot((de.joonko.loan.partner.santander.stub.FaultException) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetKreditvertragsangebot(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditvertragsangebot(f);
                                }
                            } else {
                                callback.receiveErrorgetKreditvertragsangebot(f);
                            }
                        } else {
                            callback.receiveErrorgetKreditvertragsangebot(f);
                        }
                    } else {
                        callback.receiveErrorgetKreditvertragsangebot(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetKreditvertragsangebot(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#getKreditantragsstatus
     * @param getKreditantragsstatus4
     * @throws de.joonko.loan.partner.santander.stub.FaultException :
     */
    public de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse getKreditantragsstatus(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus getKreditantragsstatus4)
        throws java.rmi.RemoteException,
            de.joonko.loan.partner.santander.stub.FaultException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions()
                            .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditantragsstatusRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getKreditantragsstatus4,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://ws.bco.caps.scb.de",
                            "getKreditantragsstatus")),
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditantragsstatus"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getKreditantragsstatus"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditantragsstatus"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "getKreditantragsstatus"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                            throw (de.joonko.loan.partner.santander.stub.FaultException) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#startgetKreditantragsstatus
     * @param getKreditantragsstatus4
     */
    public void startgetKreditantragsstatus(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus getKreditantragsstatus4,
        final de.joonko.loan.partner.santander.stub.ScbCapsBcoWSCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions()
                        .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditantragsstatusRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getKreditantragsstatus4,
                optimizeContent(
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditantragsstatus")),
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "getKreditantragsstatus"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultgetKreditantragsstatus((de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetKreditantragsstatus(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getKreditantragsstatus"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditantragsstatus"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditantragsstatus"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                                        callback.receiveErrorgetKreditantragsstatus((de.joonko.loan.partner.santander.stub.FaultException) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetKreditantragsstatus(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditantragsstatus(f);
                                }
                            } else {
                                callback.receiveErrorgetKreditantragsstatus(f);
                            }
                        } else {
                            callback.receiveErrorgetKreditantragsstatus(f);
                        }
                    } else {
                        callback.receiveErrorgetKreditantragsstatus(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetKreditantragsstatus(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[2].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#getKreditkonditionen
     * @param getKreditkonditionen6
     * @throws de.joonko.loan.partner.santander.stub.FaultException :
     */
    public de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse getKreditkonditionen(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen getKreditkonditionen6)
        throws java.rmi.RemoteException,
            de.joonko.loan.partner.santander.stub.FaultException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions()
                            .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditkonditionenRequest");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    getKreditkonditionen6,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://ws.bco.caps.scb.de", "getKreditkonditionen")),
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditkonditionen"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getKreditkonditionen"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getKreditkonditionen"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getKreditkonditionen"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                            throw (de.joonko.loan.partner.santander.stub.FaultException) ex;
                        }

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.santander.stub.ScbCapsBcoWS#startgetKreditkonditionen
     * @param getKreditkonditionen6
     */
    public void startgetKreditkonditionen(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen getKreditkonditionen6,
        final de.joonko.loan.partner.santander.stub.ScbCapsBcoWSCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions()
                        .setAction("http://ws.bco.caps.scb.de/ScbCapsBcoWsPortType/getKreditkonditionenRequest");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                getKreditkonditionen6,
                optimizeContent(
                    new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                        "getKreditkonditionen")),
                new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                    "getKreditkonditionen"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultgetKreditkonditionen((de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetKreditkonditionen(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getKreditkonditionen"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditkonditionen"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getKreditkonditionen"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    if (ex instanceof de.joonko.loan.partner.santander.stub.FaultException) {
                                        callback.receiveErrorgetKreditkonditionen((de.joonko.loan.partner.santander.stub.FaultException) ex);

                                        return;
                                    }

                                    callback.receiveErrorgetKreditkonditionen(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetKreditkonditionen(f);
                                }
                            } else {
                                callback.receiveErrorgetKreditkonditionen(f);
                            }
                        } else {
                            callback.receiveErrorgetKreditkonditionen(f);
                        }
                    } else {
                        callback.receiveErrorgetKreditkonditionen(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetKreditkonditionen(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[3].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     *  A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(
        org.apache.axiom.soap.SOAPEnvelope env) {
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();

        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
        }

        return returnMap;
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot param,
        boolean optimizeContent, javax.xml.namespace.QName methodQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot param,
        boolean optimizeContent, javax.xml.namespace.QName methodQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus param,
        boolean optimizeContent, javax.xml.namespace.QName methodQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen param,
        boolean optimizeContent, javax.xml.namespace.QName methodQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type, java.util.Map extraNamespaces)
        throws org.apache.axis2.AxisFault {
        try {
            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebot.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvergleichsangebotResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebot.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditvertragsangebotResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatus.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditantragsstatusResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionen.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.GetKreditkonditionenResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.class.equals(
                        type)) {
                return de.joonko.loan.partner.santander.stub.ScbCapsBcoWSStub.Fault.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //http://tempuri.org/bco/services/ScbCapsBcoWS
    public static class GetKreditantragsstatusParams implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditantragsstatusParams
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for ScbAntragId
         */
        protected java.lang.String localScbAntragId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScbAntragIdTracker = false;

        /**
         * field for Authentisierung
         */
        protected AuthentisierungXO localAuthentisierung;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        public boolean isScbAntragIdSpecified() {
            return localScbAntragIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getScbAntragId() {
            return localScbAntragId;
        }

        /**
         * Auto generated setter method
         * @param param ScbAntragId
         */
        public void setScbAntragId(java.lang.String param) {
            localScbAntragIdTracker = param != null;

            this.localScbAntragId = param;
        }

        /**
         * Auto generated getter method
         * @return AuthentisierungXO
         */
        public AuthentisierungXO getAuthentisierung() {
            return localAuthentisierung;
        }

        /**
         * Auto generated setter method
         * @param param Authentisierung
         */
        public void setAuthentisierung(AuthentisierungXO param) {
            this.localAuthentisierung = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditantragsstatusParams",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditantragsstatusParams", xmlWriter);
                }
            }

            if (localScbAntragIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "scbAntragId", xmlWriter);

                if (localScbAntragId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localScbAntragId);
                }

                xmlWriter.writeEndElement();
            }

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            localAuthentisierung.serialize(new javax.xml.namespace.QName("",
                    "authentisierung"), xmlWriter);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localScbAntragIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "scbAntragId"));

                if (localScbAntragId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScbAntragId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                }
            }

            elementList.add(new javax.xml.namespace.QName("", "authentisierung"));

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            elementList.add(localAuthentisierung);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditantragsstatusParams parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditantragsstatusParams object = new GetKreditantragsstatusParams();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditantragsstatusParams".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditantragsstatusParams) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "scbAntragId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "scbAntragId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScbAntragId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "authentisierung").equals(
                                reader.getName())) {
                        object.setAuthentisierung(AuthentisierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list3.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list3.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Fault implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "Fault", "ns1");

        /**
         * field for Fault
         */
        protected ExceptionXO localFault;

        /**
         * Auto generated getter method
         * @return ExceptionXO
         */
        public ExceptionXO getFault() {
            return localFault;
        }

        /**
         * Auto generated setter method
         * @param param Fault
         */
        public void setFault(ExceptionXO param) {
            this.localFault = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localFault == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "Fault cannot be null!");
            }

            localFault.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localFault.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Fault parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Fault object = new Fault();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de", "Fault").equals(
                                        reader.getName())) {
                                object.setFault(ExceptionXO.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ZahlungsartType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "zahlungsartType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _VOLLZAHLUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VOLLZAHLUNG");
        public static final java.lang.String _TEILZAHLUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TEILZAHLUNG");
        public static final java.lang.String _TEILZAHLUNG_MIT_RSV = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TEILZAHLUNG_MIT_RSV");
        public static final ZahlungsartType VOLLZAHLUNG = new ZahlungsartType(_VOLLZAHLUNG,
                true);
        public static final ZahlungsartType TEILZAHLUNG = new ZahlungsartType(_TEILZAHLUNG,
                true);
        public static final ZahlungsartType TEILZAHLUNG_MIT_RSV = new ZahlungsartType(_TEILZAHLUNG_MIT_RSV,
                true);

        /**
         * field for ZahlungsartType
         */
        protected java.lang.String localZahlungsartType;

        // Constructor
        protected ZahlungsartType(java.lang.String value,
            boolean isRegisterValue) {
            localZahlungsartType = value;

            if (isRegisterValue) {
                _table_.put(localZahlungsartType, this);
            }
        }

        public java.lang.String getValue() {
            return localZahlungsartType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localZahlungsartType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":zahlungsartType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "zahlungsartType", xmlWriter);
                }
            }

            if (localZahlungsartType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "zahlungsartType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localZahlungsartType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localZahlungsartType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static ZahlungsartType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                ZahlungsartType enumeration = (ZahlungsartType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static ZahlungsartType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static ZahlungsartType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return ZahlungsartType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return ZahlungsartType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ZahlungsartType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ZahlungsartType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "zahlungsartType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = ZahlungsartType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = ZahlungsartType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BeschaeftigungsverhaeltnisXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BeschaeftigungsverhaeltnisXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Berufsbezeichnung
         */
        protected java.lang.String localBerufsbezeichnung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBerufsbezeichnungTracker = false;

        /**
         * field for Berufsgruppe
         */
        protected BerufType localBerufsgruppe;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBerufsgruppeTracker = false;

        /**
         * field for Branche
         */
        protected BrancheType localBranche;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBrancheTracker = false;

        /**
         * field for ArbeitgeberName
         */
        protected java.lang.String localArbeitgeberName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberNameTracker = false;

        /**
         * field for ArbeitgeberStrasse
         */
        protected java.lang.String localArbeitgeberStrasse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberStrasseTracker = false;

        /**
         * field for ArbeitgeberHausnr
         */
        protected java.lang.String localArbeitgeberHausnr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberHausnrTracker = false;

        /**
         * field for ArbeitgeberPlz
         */
        protected java.lang.String localArbeitgeberPlz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberPlzTracker = false;

        /**
         * field for ArbeitgeberOrt
         */
        protected java.lang.String localArbeitgeberOrt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberOrtTracker = false;

        /**
         * field for ArbeitgeberLand
         */
        protected LandType localArbeitgeberLand;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitgeberLandTracker = false;

        /**
         * field for BeschaeftigtSeit
         */
        protected java.util.Date localBeschaeftigtSeit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeschaeftigtSeitTracker = false;

        /**
         * field for BeschaeftigtBis
         */
        protected java.util.Date localBeschaeftigtBis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeschaeftigtBisTracker = false;

        /**
         * field for BefristetBis
         */
        protected java.util.Date localBefristetBis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBefristetBisTracker = false;

        public boolean isBerufsbezeichnungSpecified() {
            return localBerufsbezeichnungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBerufsbezeichnung() {
            return localBerufsbezeichnung;
        }

        /**
         * Auto generated setter method
         * @param param Berufsbezeichnung
         */
        public void setBerufsbezeichnung(java.lang.String param) {
            localBerufsbezeichnungTracker = param != null;

            this.localBerufsbezeichnung = param;
        }

        public boolean isBerufsgruppeSpecified() {
            return localBerufsgruppeTracker;
        }

        /**
         * Auto generated getter method
         * @return BerufType
         */
        public BerufType getBerufsgruppe() {
            return localBerufsgruppe;
        }

        /**
         * Auto generated setter method
         * @param param Berufsgruppe
         */
        public void setBerufsgruppe(BerufType param) {
            localBerufsgruppeTracker = param != null;

            this.localBerufsgruppe = param;
        }

        public boolean isBrancheSpecified() {
            return localBrancheTracker;
        }

        /**
         * Auto generated getter method
         * @return BrancheType
         */
        public BrancheType getBranche() {
            return localBranche;
        }

        /**
         * Auto generated setter method
         * @param param Branche
         */
        public void setBranche(BrancheType param) {
            localBrancheTracker = param != null;

            this.localBranche = param;
        }

        public boolean isArbeitgeberNameSpecified() {
            return localArbeitgeberNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArbeitgeberName() {
            return localArbeitgeberName;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberName
         */
        public void setArbeitgeberName(java.lang.String param) {
            localArbeitgeberNameTracker = param != null;

            this.localArbeitgeberName = param;
        }

        public boolean isArbeitgeberStrasseSpecified() {
            return localArbeitgeberStrasseTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArbeitgeberStrasse() {
            return localArbeitgeberStrasse;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberStrasse
         */
        public void setArbeitgeberStrasse(java.lang.String param) {
            localArbeitgeberStrasseTracker = param != null;

            this.localArbeitgeberStrasse = param;
        }

        public boolean isArbeitgeberHausnrSpecified() {
            return localArbeitgeberHausnrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArbeitgeberHausnr() {
            return localArbeitgeberHausnr;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberHausnr
         */
        public void setArbeitgeberHausnr(java.lang.String param) {
            localArbeitgeberHausnrTracker = param != null;

            this.localArbeitgeberHausnr = param;
        }

        public boolean isArbeitgeberPlzSpecified() {
            return localArbeitgeberPlzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArbeitgeberPlz() {
            return localArbeitgeberPlz;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberPlz
         */
        public void setArbeitgeberPlz(java.lang.String param) {
            localArbeitgeberPlzTracker = param != null;

            this.localArbeitgeberPlz = param;
        }

        public boolean isArbeitgeberOrtSpecified() {
            return localArbeitgeberOrtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getArbeitgeberOrt() {
            return localArbeitgeberOrt;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberOrt
         */
        public void setArbeitgeberOrt(java.lang.String param) {
            localArbeitgeberOrtTracker = param != null;

            this.localArbeitgeberOrt = param;
        }

        public boolean isArbeitgeberLandSpecified() {
            return localArbeitgeberLandTracker;
        }

        /**
         * Auto generated getter method
         * @return LandType
         */
        public LandType getArbeitgeberLand() {
            return localArbeitgeberLand;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitgeberLand
         */
        public void setArbeitgeberLand(LandType param) {
            localArbeitgeberLandTracker = param != null;

            this.localArbeitgeberLand = param;
        }

        public boolean isBeschaeftigtSeitSpecified() {
            return localBeschaeftigtSeitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getBeschaeftigtSeit() {
            return localBeschaeftigtSeit;
        }

        /**
         * Auto generated setter method
         * @param param BeschaeftigtSeit
         */
        public void setBeschaeftigtSeit(java.util.Date param) {
            localBeschaeftigtSeitTracker = param != null;

            this.localBeschaeftigtSeit = param;
        }

        public boolean isBeschaeftigtBisSpecified() {
            return localBeschaeftigtBisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getBeschaeftigtBis() {
            return localBeschaeftigtBis;
        }

        /**
         * Auto generated setter method
         * @param param BeschaeftigtBis
         */
        public void setBeschaeftigtBis(java.util.Date param) {
            localBeschaeftigtBisTracker = param != null;

            this.localBeschaeftigtBis = param;
        }

        public boolean isBefristetBisSpecified() {
            return localBefristetBisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getBefristetBis() {
            return localBefristetBis;
        }

        /**
         * Auto generated setter method
         * @param param BefristetBis
         */
        public void setBefristetBis(java.util.Date param) {
            localBefristetBisTracker = param != null;

            this.localBefristetBis = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BeschaeftigungsverhaeltnisXO",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BeschaeftigungsverhaeltnisXO", xmlWriter);
                }
            }

            if (localBerufsbezeichnungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "berufsbezeichnung",
                    xmlWriter);

                if (localBerufsbezeichnung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "berufsbezeichnung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBerufsbezeichnung);
                }

                xmlWriter.writeEndElement();
            }

            if (localBerufsgruppeTracker) {
                if (localBerufsgruppe == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "berufsgruppe cannot be null!!");
                }

                localBerufsgruppe.serialize(new javax.xml.namespace.QName("",
                        "berufsgruppe"), xmlWriter);
            }

            if (localBrancheTracker) {
                if (localBranche == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "branche cannot be null!!");
                }

                localBranche.serialize(new javax.xml.namespace.QName("",
                        "branche"), xmlWriter);
            }

            if (localArbeitgeberNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitgeberName", xmlWriter);

                if (localArbeitgeberName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberName cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArbeitgeberName);
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitgeberStrasseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitgeberStrasse",
                    xmlWriter);

                if (localArbeitgeberStrasse == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberStrasse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArbeitgeberStrasse);
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitgeberHausnrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitgeberHausnr",
                    xmlWriter);

                if (localArbeitgeberHausnr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberHausnr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArbeitgeberHausnr);
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitgeberPlzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitgeberPlz", xmlWriter);

                if (localArbeitgeberPlz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberPlz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArbeitgeberPlz);
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitgeberOrtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitgeberOrt", xmlWriter);

                if (localArbeitgeberOrt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberOrt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localArbeitgeberOrt);
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitgeberLandTracker) {
                if (localArbeitgeberLand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberLand cannot be null!!");
                }

                localArbeitgeberLand.serialize(new javax.xml.namespace.QName(
                        "", "arbeitgeberLand"), xmlWriter);
            }

            if (localBeschaeftigtSeitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beschaeftigtSeit", xmlWriter);

                if (localBeschaeftigtSeit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschaeftigtSeit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeschaeftigtSeit));
                }

                xmlWriter.writeEndElement();
            }

            if (localBeschaeftigtBisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beschaeftigtBis", xmlWriter);

                if (localBeschaeftigtBis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschaeftigtBis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeschaeftigtBis));
                }

                xmlWriter.writeEndElement();
            }

            if (localBefristetBisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "befristetBis", xmlWriter);

                if (localBefristetBis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "befristetBis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBefristetBis));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localBerufsbezeichnungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "berufsbezeichnung"));

                if (localBerufsbezeichnung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBerufsbezeichnung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "berufsbezeichnung cannot be null!!");
                }
            }

            if (localBerufsgruppeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "berufsgruppe"));

                if (localBerufsgruppe == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "berufsgruppe cannot be null!!");
                }

                elementList.add(localBerufsgruppe);
            }

            if (localBrancheTracker) {
                elementList.add(new javax.xml.namespace.QName("", "branche"));

                if (localBranche == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "branche cannot be null!!");
                }

                elementList.add(localBranche);
            }

            if (localArbeitgeberNameTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberName"));

                if (localArbeitgeberName != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitgeberName));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberName cannot be null!!");
                }
            }

            if (localArbeitgeberStrasseTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberStrasse"));

                if (localArbeitgeberStrasse != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitgeberStrasse));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberStrasse cannot be null!!");
                }
            }

            if (localArbeitgeberHausnrTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberHausnr"));

                if (localArbeitgeberHausnr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitgeberHausnr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberHausnr cannot be null!!");
                }
            }

            if (localArbeitgeberPlzTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberPlz"));

                if (localArbeitgeberPlz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitgeberPlz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberPlz cannot be null!!");
                }
            }

            if (localArbeitgeberOrtTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberOrt"));

                if (localArbeitgeberOrt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitgeberOrt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberOrt cannot be null!!");
                }
            }

            if (localArbeitgeberLandTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitgeberLand"));

                if (localArbeitgeberLand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitgeberLand cannot be null!!");
                }

                elementList.add(localArbeitgeberLand);
            }

            if (localBeschaeftigtSeitTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "beschaeftigtSeit"));

                if (localBeschaeftigtSeit != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeschaeftigtSeit));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschaeftigtSeit cannot be null!!");
                }
            }

            if (localBeschaeftigtBisTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "beschaeftigtBis"));

                if (localBeschaeftigtBis != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeschaeftigtBis));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschaeftigtBis cannot be null!!");
                }
            }

            if (localBefristetBisTracker) {
                elementList.add(new javax.xml.namespace.QName("", "befristetBis"));

                if (localBefristetBis != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBefristetBis));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "befristetBis cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BeschaeftigungsverhaeltnisXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BeschaeftigungsverhaeltnisXO object = new BeschaeftigungsverhaeltnisXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BeschaeftigungsverhaeltnisXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BeschaeftigungsverhaeltnisXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "berufsbezeichnung").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "berufsbezeichnung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBerufsbezeichnung(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "berufsgruppe").equals(
                                reader.getName())) {
                        object.setBerufsgruppe(BerufType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "branche").equals(
                                reader.getName())) {
                        object.setBranche(BrancheType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arbeitgeberName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitgeberName" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitgeberName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "arbeitgeberStrasse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitgeberStrasse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitgeberStrasse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "arbeitgeberHausnr").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitgeberHausnr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitgeberHausnr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arbeitgeberPlz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitgeberPlz" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitgeberPlz(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arbeitgeberOrt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitgeberOrt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitgeberOrt(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "arbeitgeberLand").equals(
                                reader.getName())) {
                        object.setArbeitgeberLand(LandType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beschaeftigtSeit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beschaeftigtSeit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeschaeftigtSeit(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beschaeftigtBis").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beschaeftigtBis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeschaeftigtBis(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "befristetBis").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "befristetBis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBefristetBis(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BankverbindungXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BankverbindungXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for VorhandeneKarten
         */
        protected VorhandeneKartenType localVorhandeneKarten;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVorhandeneKartenTracker = false;

        /**
         * field for Kontoinhaber
         */
        protected KontoinhaberType localKontoinhaber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKontoinhaberTracker = false;

        /**
         * field for Kontonr
         */
        protected java.lang.String localKontonr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKontonrTracker = false;

        /**
         * field for Blz
         */
        protected java.lang.String localBlz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBlzTracker = false;

        /**
         * field for Iban
         */
        protected java.lang.String localIban;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIbanTracker = false;

        /**
         * field for Bic
         */
        protected java.lang.String localBic;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBicTracker = false;

        /**
         * field for Bank
         */
        protected java.lang.String localBank;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankTracker = false;

        public boolean isVorhandeneKartenSpecified() {
            return localVorhandeneKartenTracker;
        }

        /**
         * Auto generated getter method
         * @return VorhandeneKartenType
         */
        public VorhandeneKartenType getVorhandeneKarten() {
            return localVorhandeneKarten;
        }

        /**
         * Auto generated setter method
         * @param param VorhandeneKarten
         */
        public void setVorhandeneKarten(VorhandeneKartenType param) {
            localVorhandeneKartenTracker = param != null;

            this.localVorhandeneKarten = param;
        }

        public boolean isKontoinhaberSpecified() {
            return localKontoinhaberTracker;
        }

        /**
         * Auto generated getter method
         * @return KontoinhaberType
         */
        public KontoinhaberType getKontoinhaber() {
            return localKontoinhaber;
        }

        /**
         * Auto generated setter method
         * @param param Kontoinhaber
         */
        public void setKontoinhaber(KontoinhaberType param) {
            localKontoinhaberTracker = param != null;

            this.localKontoinhaber = param;
        }

        public boolean isKontonrSpecified() {
            return localKontonrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKontonr() {
            return localKontonr;
        }

        /**
         * Auto generated setter method
         * @param param Kontonr
         */
        public void setKontonr(java.lang.String param) {
            localKontonrTracker = param != null;

            this.localKontonr = param;
        }

        public boolean isBlzSpecified() {
            return localBlzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBlz() {
            return localBlz;
        }

        /**
         * Auto generated setter method
         * @param param Blz
         */
        public void setBlz(java.lang.String param) {
            localBlzTracker = param != null;

            this.localBlz = param;
        }

        public boolean isIbanSpecified() {
            return localIbanTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIban() {
            return localIban;
        }

        /**
         * Auto generated setter method
         * @param param Iban
         */
        public void setIban(java.lang.String param) {
            localIbanTracker = param != null;

            this.localIban = param;
        }

        public boolean isBicSpecified() {
            return localBicTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBic() {
            return localBic;
        }

        /**
         * Auto generated setter method
         * @param param Bic
         */
        public void setBic(java.lang.String param) {
            localBicTracker = param != null;

            this.localBic = param;
        }

        public boolean isBankSpecified() {
            return localBankTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBank() {
            return localBank;
        }

        /**
         * Auto generated setter method
         * @param param Bank
         */
        public void setBank(java.lang.String param) {
            localBankTracker = param != null;

            this.localBank = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BankverbindungXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BankverbindungXO", xmlWriter);
                }
            }

            if (localVorhandeneKartenTracker) {
                if (localVorhandeneKarten == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorhandeneKarten cannot be null!!");
                }

                localVorhandeneKarten.serialize(new javax.xml.namespace.QName(
                        "", "vorhandeneKarten"), xmlWriter);
            }

            if (localKontoinhaberTracker) {
                if (localKontoinhaber == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontoinhaber cannot be null!!");
                }

                localKontoinhaber.serialize(new javax.xml.namespace.QName("",
                        "kontoinhaber"), xmlWriter);
            }

            if (localKontonrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kontonr", xmlWriter);

                if (localKontonr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKontonr);
                }

                xmlWriter.writeEndElement();
            }

            if (localBlzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "blz", xmlWriter);

                if (localBlz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "blz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBlz);
                }

                xmlWriter.writeEndElement();
            }

            if (localIbanTracker) {
                namespace = "";
                writeStartElement(null, namespace, "iban", xmlWriter);

                if (localIban == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "iban cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIban);
                }

                xmlWriter.writeEndElement();
            }

            if (localBicTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bic", xmlWriter);

                if (localBic == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bic cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBic);
                }

                xmlWriter.writeEndElement();
            }

            if (localBankTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bank", xmlWriter);

                if (localBank == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBank);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localVorhandeneKartenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "vorhandeneKarten"));

                if (localVorhandeneKarten == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorhandeneKarten cannot be null!!");
                }

                elementList.add(localVorhandeneKarten);
            }

            if (localKontoinhaberTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kontoinhaber"));

                if (localKontoinhaber == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontoinhaber cannot be null!!");
                }

                elementList.add(localKontoinhaber);
            }

            if (localKontonrTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kontonr"));

                if (localKontonr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKontonr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                }
            }

            if (localBlzTracker) {
                elementList.add(new javax.xml.namespace.QName("", "blz"));

                if (localBlz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBlz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "blz cannot be null!!");
                }
            }

            if (localIbanTracker) {
                elementList.add(new javax.xml.namespace.QName("", "iban"));

                if (localIban != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIban));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "iban cannot be null!!");
                }
            }

            if (localBicTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bic"));

                if (localBic != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBic));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bic cannot be null!!");
                }
            }

            if (localBankTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bank"));

                if (localBank != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBank));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BankverbindungXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BankverbindungXO object = new BankverbindungXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BankverbindungXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BankverbindungXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vorhandeneKarten").equals(
                                reader.getName())) {
                        object.setVorhandeneKarten(VorhandeneKartenType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kontoinhaber").equals(
                                reader.getName())) {
                        object.setKontoinhaber(KontoinhaberType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kontonr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kontonr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKontonr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "blz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "blz" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBlz(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "iban").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "iban" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIban(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bic").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bic" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBic(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bank").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bank" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBank(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class FinanzierungXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = FinanzierungXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Auszahlungsbetrag
         */
        protected java.math.BigDecimal localAuszahlungsbetrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuszahlungsbetragTracker = false;

        /**
         * field for Abloesebetrag
         */
        protected java.math.BigDecimal localAbloesebetrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAbloesebetragTracker = false;

        /**
         * field for AbloesebetragIntern
         */
        protected java.math.BigDecimal localAbloesebetragIntern;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAbloesebetragInternTracker = false;

        /**
         * field for AbloesebetragExtern
         */
        protected java.math.BigDecimal localAbloesebetragExtern;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAbloesebetragExternTracker = false;

        /**
         * field for KreditbetragNetto
         */
        protected java.math.BigDecimal localKreditbetragNetto;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditbetragNettoTracker = false;

        /**
         * field for LaufzeitInMonaten
         */
        protected java.math.BigInteger localLaufzeitInMonaten;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLaufzeitInMonatenTracker = false;

        /**
         * field for ErsteRateDatum
         */
        protected java.util.Date localErsteRateDatum;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErsteRateDatumTracker = false;

        /**
         * field for AuszahlungDatum
         */
        protected java.util.Date localAuszahlungDatum;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuszahlungDatumTracker = false;

        /**
         * field for Wunschrate
         */
        protected java.math.BigDecimal localWunschrate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWunschrateTracker = false;

        /**
         * field for RatenbetragMonatl
         */
        protected java.math.BigDecimal localRatenbetragMonatl;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRatenbetragMonatlTracker = false;

        /**
         * field for RateneinzugZum
         */
        protected RateneinzugType localRateneinzugZum;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRateneinzugZumTracker = false;

        /**
         * field for Rsv
         */
        protected RsvType localRsv;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRsvTracker = false;

        /**
         * field for Rsv2Dn
         */
        protected boolean localRsv2Dn;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRsv2DnTracker = false;

        /**
         * field for RsvBetrag
         */
        protected java.math.BigDecimal localRsvBetrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRsvBetragTracker = false;

        /**
         * field for Verwendungszweck
         */
        protected VwzType localVerwendungszweck;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVerwendungszweckTracker = false;

        /**
         * field for VerwendungszweckFrei
         */
        protected java.lang.String localVerwendungszweckFrei;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVerwendungszweckFreiTracker = false;

        /**
         * field for EffektivzinsPaProz
         */
        protected java.math.BigDecimal localEffektivzinsPaProz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEffektivzinsPaProzTracker = false;

        /**
         * field for NominalzinsPaProz
         */
        protected java.math.BigDecimal localNominalzinsPaProz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNominalzinsPaProzTracker = false;

        /**
         * field for ZinsenGesamt
         */
        protected java.math.BigDecimal localZinsenGesamt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localZinsenGesamtTracker = false;

        /**
         * field for ZinsenGesamtProz
         */
        protected java.math.BigDecimal localZinsenGesamtProz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localZinsenGesamtProzTracker = false;

        /**
         * field for BearbeitGeb
         */
        protected java.math.BigDecimal localBearbeitGeb;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBearbeitGebTracker = false;

        /**
         * field for BearbeitGebProz
         */
        protected java.math.BigDecimal localBearbeitGebProz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBearbeitGebProzTracker = false;

        /**
         * field for KreditbetragGesamt
         */
        protected java.math.BigDecimal localKreditbetragGesamt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditbetragGesamtTracker = false;

        /**
         * field for Limit
         */
        protected java.math.BigDecimal localLimit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLimitTracker = false;

        /**
         * field for Zahlungsart
         */
        protected ZahlungsartType localZahlungsart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localZahlungsartTracker = false;

        /**
         * field for Kartenprodukt
         */
        protected KartenproduktType localKartenprodukt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKartenproduktTracker = false;

        /**
         * field for Accounttype
         */
        protected java.lang.String localAccounttype;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccounttypeTracker = false;

        /**
         * field for Bonuscode
         */
        protected java.lang.String localBonuscode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBonuscodeTracker = false;

        /**
         * field for Kampagnencode
         */
        protected java.lang.String localKampagnencode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKampagnencodeTracker = false;

        /**
         * field for EigeneRechnung
         */
        protected boolean localEigeneRechnung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEigeneRechnungTracker = false;

        /**
         * field for Praegename
         */
        protected PraegenameType localPraegename;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPraegenameTracker = false;

        public boolean isAuszahlungsbetragSpecified() {
            return localAuszahlungsbetragTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAuszahlungsbetrag() {
            return localAuszahlungsbetrag;
        }

        /**
         * Auto generated setter method
         * @param param Auszahlungsbetrag
         */
        public void setAuszahlungsbetrag(java.math.BigDecimal param) {
            localAuszahlungsbetragTracker = param != null;

            this.localAuszahlungsbetrag = param;
        }

        public boolean isAbloesebetragSpecified() {
            return localAbloesebetragTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAbloesebetrag() {
            return localAbloesebetrag;
        }

        /**
         * Auto generated setter method
         * @param param Abloesebetrag
         */
        public void setAbloesebetrag(java.math.BigDecimal param) {
            localAbloesebetragTracker = param != null;

            this.localAbloesebetrag = param;
        }

        public boolean isAbloesebetragInternSpecified() {
            return localAbloesebetragInternTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAbloesebetragIntern() {
            return localAbloesebetragIntern;
        }

        /**
         * Auto generated setter method
         * @param param AbloesebetragIntern
         */
        public void setAbloesebetragIntern(java.math.BigDecimal param) {
            localAbloesebetragInternTracker = param != null;

            this.localAbloesebetragIntern = param;
        }

        public boolean isAbloesebetragExternSpecified() {
            return localAbloesebetragExternTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getAbloesebetragExtern() {
            return localAbloesebetragExtern;
        }

        /**
         * Auto generated setter method
         * @param param AbloesebetragExtern
         */
        public void setAbloesebetragExtern(java.math.BigDecimal param) {
            localAbloesebetragExternTracker = param != null;

            this.localAbloesebetragExtern = param;
        }

        public boolean isKreditbetragNettoSpecified() {
            return localKreditbetragNettoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getKreditbetragNetto() {
            return localKreditbetragNetto;
        }

        /**
         * Auto generated setter method
         * @param param KreditbetragNetto
         */
        public void setKreditbetragNetto(java.math.BigDecimal param) {
            localKreditbetragNettoTracker = param != null;

            this.localKreditbetragNetto = param;
        }

        public boolean isLaufzeitInMonatenSpecified() {
            return localLaufzeitInMonatenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getLaufzeitInMonaten() {
            return localLaufzeitInMonaten;
        }

        /**
         * Auto generated setter method
         * @param param LaufzeitInMonaten
         */
        public void setLaufzeitInMonaten(java.math.BigInteger param) {
            localLaufzeitInMonatenTracker = param != null;

            this.localLaufzeitInMonaten = param;
        }

        public boolean isErsteRateDatumSpecified() {
            return localErsteRateDatumTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getErsteRateDatum() {
            return localErsteRateDatum;
        }

        /**
         * Auto generated setter method
         * @param param ErsteRateDatum
         */
        public void setErsteRateDatum(java.util.Date param) {
            localErsteRateDatumTracker = param != null;

            this.localErsteRateDatum = param;
        }

        public boolean isAuszahlungDatumSpecified() {
            return localAuszahlungDatumTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getAuszahlungDatum() {
            return localAuszahlungDatum;
        }

        /**
         * Auto generated setter method
         * @param param AuszahlungDatum
         */
        public void setAuszahlungDatum(java.util.Date param) {
            localAuszahlungDatumTracker = param != null;

            this.localAuszahlungDatum = param;
        }

        public boolean isWunschrateSpecified() {
            return localWunschrateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getWunschrate() {
            return localWunschrate;
        }

        /**
         * Auto generated setter method
         * @param param Wunschrate
         */
        public void setWunschrate(java.math.BigDecimal param) {
            localWunschrateTracker = param != null;

            this.localWunschrate = param;
        }

        public boolean isRatenbetragMonatlSpecified() {
            return localRatenbetragMonatlTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRatenbetragMonatl() {
            return localRatenbetragMonatl;
        }

        /**
         * Auto generated setter method
         * @param param RatenbetragMonatl
         */
        public void setRatenbetragMonatl(java.math.BigDecimal param) {
            localRatenbetragMonatlTracker = param != null;

            this.localRatenbetragMonatl = param;
        }

        public boolean isRateneinzugZumSpecified() {
            return localRateneinzugZumTracker;
        }

        /**
         * Auto generated getter method
         * @return RateneinzugType
         */
        public RateneinzugType getRateneinzugZum() {
            return localRateneinzugZum;
        }

        /**
         * Auto generated setter method
         * @param param RateneinzugZum
         */
        public void setRateneinzugZum(RateneinzugType param) {
            localRateneinzugZumTracker = param != null;

            this.localRateneinzugZum = param;
        }

        public boolean isRsvSpecified() {
            return localRsvTracker;
        }

        /**
         * Auto generated getter method
         * @return RsvType
         */
        public RsvType getRsv() {
            return localRsv;
        }

        /**
         * Auto generated setter method
         * @param param Rsv
         */
        public void setRsv(RsvType param) {
            localRsvTracker = param != null;

            this.localRsv = param;
        }

        public boolean isRsv2DnSpecified() {
            return localRsv2DnTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getRsv2Dn() {
            return localRsv2Dn;
        }

        /**
         * Auto generated setter method
         * @param param Rsv2Dn
         */
        public void setRsv2Dn(boolean param) {
            // setting primitive attribute tracker to true
            localRsv2DnTracker = true;

            this.localRsv2Dn = param;
        }

        public boolean isRsvBetragSpecified() {
            return localRsvBetragTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRsvBetrag() {
            return localRsvBetrag;
        }

        /**
         * Auto generated setter method
         * @param param RsvBetrag
         */
        public void setRsvBetrag(java.math.BigDecimal param) {
            localRsvBetragTracker = param != null;

            this.localRsvBetrag = param;
        }

        public boolean isVerwendungszweckSpecified() {
            return localVerwendungszweckTracker;
        }

        /**
         * Auto generated getter method
         * @return VwzType
         */
        public VwzType getVerwendungszweck() {
            return localVerwendungszweck;
        }

        /**
         * Auto generated setter method
         * @param param Verwendungszweck
         */
        public void setVerwendungszweck(VwzType param) {
            localVerwendungszweckTracker = param != null;

            this.localVerwendungszweck = param;
        }

        public boolean isVerwendungszweckFreiSpecified() {
            return localVerwendungszweckFreiTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVerwendungszweckFrei() {
            return localVerwendungszweckFrei;
        }

        /**
         * Auto generated setter method
         * @param param VerwendungszweckFrei
         */
        public void setVerwendungszweckFrei(java.lang.String param) {
            localVerwendungszweckFreiTracker = param != null;

            this.localVerwendungszweckFrei = param;
        }

        public boolean isEffektivzinsPaProzSpecified() {
            return localEffektivzinsPaProzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getEffektivzinsPaProz() {
            return localEffektivzinsPaProz;
        }

        /**
         * Auto generated setter method
         * @param param EffektivzinsPaProz
         */
        public void setEffektivzinsPaProz(java.math.BigDecimal param) {
            localEffektivzinsPaProzTracker = param != null;

            this.localEffektivzinsPaProz = param;
        }

        public boolean isNominalzinsPaProzSpecified() {
            return localNominalzinsPaProzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getNominalzinsPaProz() {
            return localNominalzinsPaProz;
        }

        /**
         * Auto generated setter method
         * @param param NominalzinsPaProz
         */
        public void setNominalzinsPaProz(java.math.BigDecimal param) {
            localNominalzinsPaProzTracker = param != null;

            this.localNominalzinsPaProz = param;
        }

        public boolean isZinsenGesamtSpecified() {
            return localZinsenGesamtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getZinsenGesamt() {
            return localZinsenGesamt;
        }

        /**
         * Auto generated setter method
         * @param param ZinsenGesamt
         */
        public void setZinsenGesamt(java.math.BigDecimal param) {
            localZinsenGesamtTracker = param != null;

            this.localZinsenGesamt = param;
        }

        public boolean isZinsenGesamtProzSpecified() {
            return localZinsenGesamtProzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getZinsenGesamtProz() {
            return localZinsenGesamtProz;
        }

        /**
         * Auto generated setter method
         * @param param ZinsenGesamtProz
         */
        public void setZinsenGesamtProz(java.math.BigDecimal param) {
            localZinsenGesamtProzTracker = param != null;

            this.localZinsenGesamtProz = param;
        }

        public boolean isBearbeitGebSpecified() {
            return localBearbeitGebTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getBearbeitGeb() {
            return localBearbeitGeb;
        }

        /**
         * Auto generated setter method
         * @param param BearbeitGeb
         */
        public void setBearbeitGeb(java.math.BigDecimal param) {
            localBearbeitGebTracker = param != null;

            this.localBearbeitGeb = param;
        }

        public boolean isBearbeitGebProzSpecified() {
            return localBearbeitGebProzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getBearbeitGebProz() {
            return localBearbeitGebProz;
        }

        /**
         * Auto generated setter method
         * @param param BearbeitGebProz
         */
        public void setBearbeitGebProz(java.math.BigDecimal param) {
            localBearbeitGebProzTracker = param != null;

            this.localBearbeitGebProz = param;
        }

        public boolean isKreditbetragGesamtSpecified() {
            return localKreditbetragGesamtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getKreditbetragGesamt() {
            return localKreditbetragGesamt;
        }

        /**
         * Auto generated setter method
         * @param param KreditbetragGesamt
         */
        public void setKreditbetragGesamt(java.math.BigDecimal param) {
            localKreditbetragGesamtTracker = param != null;

            this.localKreditbetragGesamt = param;
        }

        public boolean isLimitSpecified() {
            return localLimitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getLimit() {
            return localLimit;
        }

        /**
         * Auto generated setter method
         * @param param Limit
         */
        public void setLimit(java.math.BigDecimal param) {
            localLimitTracker = param != null;

            this.localLimit = param;
        }

        public boolean isZahlungsartSpecified() {
            return localZahlungsartTracker;
        }

        /**
         * Auto generated getter method
         * @return ZahlungsartType
         */
        public ZahlungsartType getZahlungsart() {
            return localZahlungsart;
        }

        /**
         * Auto generated setter method
         * @param param Zahlungsart
         */
        public void setZahlungsart(ZahlungsartType param) {
            localZahlungsartTracker = param != null;

            this.localZahlungsart = param;
        }

        public boolean isKartenproduktSpecified() {
            return localKartenproduktTracker;
        }

        /**
         * Auto generated getter method
         * @return KartenproduktType
         */
        public KartenproduktType getKartenprodukt() {
            return localKartenprodukt;
        }

        /**
         * Auto generated setter method
         * @param param Kartenprodukt
         */
        public void setKartenprodukt(KartenproduktType param) {
            localKartenproduktTracker = param != null;

            this.localKartenprodukt = param;
        }

        public boolean isAccounttypeSpecified() {
            return localAccounttypeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAccounttype() {
            return localAccounttype;
        }

        /**
         * Auto generated setter method
         * @param param Accounttype
         */
        public void setAccounttype(java.lang.String param) {
            localAccounttypeTracker = param != null;

            this.localAccounttype = param;
        }

        public boolean isBonuscodeSpecified() {
            return localBonuscodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBonuscode() {
            return localBonuscode;
        }

        /**
         * Auto generated setter method
         * @param param Bonuscode
         */
        public void setBonuscode(java.lang.String param) {
            localBonuscodeTracker = param != null;

            this.localBonuscode = param;
        }

        public boolean isKampagnencodeSpecified() {
            return localKampagnencodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKampagnencode() {
            return localKampagnencode;
        }

        /**
         * Auto generated setter method
         * @param param Kampagnencode
         */
        public void setKampagnencode(java.lang.String param) {
            localKampagnencodeTracker = param != null;

            this.localKampagnencode = param;
        }

        public boolean isEigeneRechnungSpecified() {
            return localEigeneRechnungTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getEigeneRechnung() {
            return localEigeneRechnung;
        }

        /**
         * Auto generated setter method
         * @param param EigeneRechnung
         */
        public void setEigeneRechnung(boolean param) {
            // setting primitive attribute tracker to true
            localEigeneRechnungTracker = true;

            this.localEigeneRechnung = param;
        }

        public boolean isPraegenameSpecified() {
            return localPraegenameTracker;
        }

        /**
         * Auto generated getter method
         * @return PraegenameType
         */
        public PraegenameType getPraegename() {
            return localPraegename;
        }

        /**
         * Auto generated setter method
         * @param param Praegename
         */
        public void setPraegename(PraegenameType param) {
            localPraegenameTracker = param != null;

            this.localPraegename = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":FinanzierungXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "FinanzierungXO", xmlWriter);
                }
            }

            if (localAuszahlungsbetragTracker) {
                namespace = "";
                writeStartElement(null, namespace, "auszahlungsbetrag",
                    xmlWriter);

                if (localAuszahlungsbetrag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "auszahlungsbetrag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuszahlungsbetrag));
                }

                xmlWriter.writeEndElement();
            }

            if (localAbloesebetragTracker) {
                namespace = "";
                writeStartElement(null, namespace, "abloesebetrag", xmlWriter);

                if (localAbloesebetrag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetrag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetrag));
                }

                xmlWriter.writeEndElement();
            }

            if (localAbloesebetragInternTracker) {
                namespace = "";
                writeStartElement(null, namespace, "abloesebetragIntern",
                    xmlWriter);

                if (localAbloesebetragIntern == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetragIntern cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetragIntern));
                }

                xmlWriter.writeEndElement();
            }

            if (localAbloesebetragExternTracker) {
                namespace = "";
                writeStartElement(null, namespace, "abloesebetragExtern",
                    xmlWriter);

                if (localAbloesebetragExtern == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetragExtern cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetragExtern));
                }

                xmlWriter.writeEndElement();
            }

            if (localKreditbetragNettoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kreditbetragNetto",
                    xmlWriter);

                if (localKreditbetragNetto == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetragNetto cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetragNetto));
                }

                xmlWriter.writeEndElement();
            }

            if (localLaufzeitInMonatenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "laufzeitInMonaten",
                    xmlWriter);

                if (localLaufzeitInMonaten == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "laufzeitInMonaten cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLaufzeitInMonaten));
                }

                xmlWriter.writeEndElement();
            }

            if (localErsteRateDatumTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ersteRateDatum", xmlWriter);

                if (localErsteRateDatum == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ersteRateDatum cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localErsteRateDatum));
                }

                xmlWriter.writeEndElement();
            }

            if (localAuszahlungDatumTracker) {
                namespace = "";
                writeStartElement(null, namespace, "auszahlungDatum", xmlWriter);

                if (localAuszahlungDatum == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "auszahlungDatum cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuszahlungDatum));
                }

                xmlWriter.writeEndElement();
            }

            if (localWunschrateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "wunschrate", xmlWriter);

                if (localWunschrate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "wunschrate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWunschrate));
                }

                xmlWriter.writeEndElement();
            }

            if (localRatenbetragMonatlTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ratenbetragMonatl",
                    xmlWriter);

                if (localRatenbetragMonatl == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ratenbetragMonatl cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRatenbetragMonatl));
                }

                xmlWriter.writeEndElement();
            }

            if (localRateneinzugZumTracker) {
                if (localRateneinzugZum == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rateneinzugZum cannot be null!!");
                }

                localRateneinzugZum.serialize(new javax.xml.namespace.QName(
                        "", "rateneinzugZum"), xmlWriter);
            }

            if (localRsvTracker) {
                if (localRsv == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rsv cannot be null!!");
                }

                localRsv.serialize(new javax.xml.namespace.QName("", "rsv"),
                    xmlWriter);
            }

            if (localRsv2DnTracker) {
                namespace = "";
                writeStartElement(null, namespace, "rsv2Dn", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rsv2Dn cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRsv2Dn));
                }

                xmlWriter.writeEndElement();
            }

            if (localRsvBetragTracker) {
                namespace = "";
                writeStartElement(null, namespace, "rsvBetrag", xmlWriter);

                if (localRsvBetrag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "rsvBetrag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRsvBetrag));
                }

                xmlWriter.writeEndElement();
            }

            if (localVerwendungszweckTracker) {
                if (localVerwendungszweck == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "verwendungszweck cannot be null!!");
                }

                localVerwendungszweck.serialize(new javax.xml.namespace.QName(
                        "", "verwendungszweck"), xmlWriter);
            }

            if (localVerwendungszweckFreiTracker) {
                namespace = "";
                writeStartElement(null, namespace, "verwendungszweckFrei",
                    xmlWriter);

                if (localVerwendungszweckFrei == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "verwendungszweckFrei cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVerwendungszweckFrei);
                }

                xmlWriter.writeEndElement();
            }

            if (localEffektivzinsPaProzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "effektivzinsPaProz",
                    xmlWriter);

                if (localEffektivzinsPaProz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "effektivzinsPaProz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEffektivzinsPaProz));
                }

                xmlWriter.writeEndElement();
            }

            if (localNominalzinsPaProzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "nominalzinsPaProz",
                    xmlWriter);

                if (localNominalzinsPaProz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "nominalzinsPaProz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNominalzinsPaProz));
                }

                xmlWriter.writeEndElement();
            }

            if (localZinsenGesamtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "zinsenGesamt", xmlWriter);

                if (localZinsenGesamt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsenGesamt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsenGesamt));
                }

                xmlWriter.writeEndElement();
            }

            if (localZinsenGesamtProzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "zinsenGesamtProz", xmlWriter);

                if (localZinsenGesamtProz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsenGesamtProz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsenGesamtProz));
                }

                xmlWriter.writeEndElement();
            }

            if (localBearbeitGebTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bearbeitGeb", xmlWriter);

                if (localBearbeitGeb == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bearbeitGeb cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBearbeitGeb));
                }

                xmlWriter.writeEndElement();
            }

            if (localBearbeitGebProzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bearbeitGebProz", xmlWriter);

                if (localBearbeitGebProz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bearbeitGebProz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBearbeitGebProz));
                }

                xmlWriter.writeEndElement();
            }

            if (localKreditbetragGesamtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kreditbetragGesamt",
                    xmlWriter);

                if (localKreditbetragGesamt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetragGesamt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetragGesamt));
                }

                xmlWriter.writeEndElement();
            }

            if (localLimitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "limit", xmlWriter);

                if (localLimit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "limit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLimit));
                }

                xmlWriter.writeEndElement();
            }

            if (localZahlungsartTracker) {
                if (localZahlungsart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "zahlungsart cannot be null!!");
                }

                localZahlungsart.serialize(new javax.xml.namespace.QName("",
                        "zahlungsart"), xmlWriter);
            }

            if (localKartenproduktTracker) {
                if (localKartenprodukt == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartenprodukt cannot be null!!");
                }

                localKartenprodukt.serialize(new javax.xml.namespace.QName("",
                        "kartenprodukt"), xmlWriter);
            }

            if (localAccounttypeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "accounttype", xmlWriter);

                if (localAccounttype == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "accounttype cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAccounttype);
                }

                xmlWriter.writeEndElement();
            }

            if (localBonuscodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bonuscode", xmlWriter);

                if (localBonuscode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bonuscode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBonuscode);
                }

                xmlWriter.writeEndElement();
            }

            if (localKampagnencodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kampagnencode", xmlWriter);

                if (localKampagnencode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kampagnencode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKampagnencode);
                }

                xmlWriter.writeEndElement();
            }

            if (localEigeneRechnungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "eigeneRechnung", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "eigeneRechnung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEigeneRechnung));
                }

                xmlWriter.writeEndElement();
            }

            if (localPraegenameTracker) {
                if (localPraegename == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "praegename cannot be null!!");
                }

                localPraegename.serialize(new javax.xml.namespace.QName("",
                        "praegename"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAuszahlungsbetragTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "auszahlungsbetrag"));

                if (localAuszahlungsbetrag != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuszahlungsbetrag));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "auszahlungsbetrag cannot be null!!");
                }
            }

            if (localAbloesebetragTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "abloesebetrag"));

                if (localAbloesebetrag != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetrag));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetrag cannot be null!!");
                }
            }

            if (localAbloesebetragInternTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "abloesebetragIntern"));

                if (localAbloesebetragIntern != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetragIntern));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetragIntern cannot be null!!");
                }
            }

            if (localAbloesebetragExternTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "abloesebetragExtern"));

                if (localAbloesebetragExtern != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesebetragExtern));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesebetragExtern cannot be null!!");
                }
            }

            if (localKreditbetragNettoTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kreditbetragNetto"));

                if (localKreditbetragNetto != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetragNetto));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetragNetto cannot be null!!");
                }
            }

            if (localLaufzeitInMonatenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "laufzeitInMonaten"));

                if (localLaufzeitInMonaten != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLaufzeitInMonaten));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "laufzeitInMonaten cannot be null!!");
                }
            }

            if (localErsteRateDatumTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "ersteRateDatum"));

                if (localErsteRateDatum != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localErsteRateDatum));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ersteRateDatum cannot be null!!");
                }
            }

            if (localAuszahlungDatumTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "auszahlungDatum"));

                if (localAuszahlungDatum != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAuszahlungDatum));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "auszahlungDatum cannot be null!!");
                }
            }

            if (localWunschrateTracker) {
                elementList.add(new javax.xml.namespace.QName("", "wunschrate"));

                if (localWunschrate != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWunschrate));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wunschrate cannot be null!!");
                }
            }

            if (localRatenbetragMonatlTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "ratenbetragMonatl"));

                if (localRatenbetragMonatl != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRatenbetragMonatl));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ratenbetragMonatl cannot be null!!");
                }
            }

            if (localRateneinzugZumTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "rateneinzugZum"));

                if (localRateneinzugZum == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rateneinzugZum cannot be null!!");
                }

                elementList.add(localRateneinzugZum);
            }

            if (localRsvTracker) {
                elementList.add(new javax.xml.namespace.QName("", "rsv"));

                if (localRsv == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rsv cannot be null!!");
                }

                elementList.add(localRsv);
            }

            if (localRsv2DnTracker) {
                elementList.add(new javax.xml.namespace.QName("", "rsv2Dn"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRsv2Dn));
            }

            if (localRsvBetragTracker) {
                elementList.add(new javax.xml.namespace.QName("", "rsvBetrag"));

                if (localRsvBetrag != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRsvBetrag));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rsvBetrag cannot be null!!");
                }
            }

            if (localVerwendungszweckTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "verwendungszweck"));

                if (localVerwendungszweck == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "verwendungszweck cannot be null!!");
                }

                elementList.add(localVerwendungszweck);
            }

            if (localVerwendungszweckFreiTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "verwendungszweckFrei"));

                if (localVerwendungszweckFrei != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVerwendungszweckFrei));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "verwendungszweckFrei cannot be null!!");
                }
            }

            if (localEffektivzinsPaProzTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "effektivzinsPaProz"));

                if (localEffektivzinsPaProz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEffektivzinsPaProz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "effektivzinsPaProz cannot be null!!");
                }
            }

            if (localNominalzinsPaProzTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "nominalzinsPaProz"));

                if (localNominalzinsPaProz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNominalzinsPaProz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "nominalzinsPaProz cannot be null!!");
                }
            }

            if (localZinsenGesamtTracker) {
                elementList.add(new javax.xml.namespace.QName("", "zinsenGesamt"));

                if (localZinsenGesamt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsenGesamt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsenGesamt cannot be null!!");
                }
            }

            if (localZinsenGesamtProzTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "zinsenGesamtProz"));

                if (localZinsenGesamtProz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsenGesamtProz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsenGesamtProz cannot be null!!");
                }
            }

            if (localBearbeitGebTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bearbeitGeb"));

                if (localBearbeitGeb != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBearbeitGeb));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bearbeitGeb cannot be null!!");
                }
            }

            if (localBearbeitGebProzTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "bearbeitGebProz"));

                if (localBearbeitGebProz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBearbeitGebProz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bearbeitGebProz cannot be null!!");
                }
            }

            if (localKreditbetragGesamtTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kreditbetragGesamt"));

                if (localKreditbetragGesamt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetragGesamt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetragGesamt cannot be null!!");
                }
            }

            if (localLimitTracker) {
                elementList.add(new javax.xml.namespace.QName("", "limit"));

                if (localLimit != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLimit));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "limit cannot be null!!");
                }
            }

            if (localZahlungsartTracker) {
                elementList.add(new javax.xml.namespace.QName("", "zahlungsart"));

                if (localZahlungsart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "zahlungsart cannot be null!!");
                }

                elementList.add(localZahlungsart);
            }

            if (localKartenproduktTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kartenprodukt"));

                if (localKartenprodukt == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartenprodukt cannot be null!!");
                }

                elementList.add(localKartenprodukt);
            }

            if (localAccounttypeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "accounttype"));

                if (localAccounttype != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAccounttype));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "accounttype cannot be null!!");
                }
            }

            if (localBonuscodeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bonuscode"));

                if (localBonuscode != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBonuscode));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bonuscode cannot be null!!");
                }
            }

            if (localKampagnencodeTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kampagnencode"));

                if (localKampagnencode != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKampagnencode));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kampagnencode cannot be null!!");
                }
            }

            if (localEigeneRechnungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "eigeneRechnung"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEigeneRechnung));
            }

            if (localPraegenameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "praegename"));

                if (localPraegename == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "praegename cannot be null!!");
                }

                elementList.add(localPraegename);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FinanzierungXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FinanzierungXO object = new FinanzierungXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"FinanzierungXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (FinanzierungXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "auszahlungsbetrag").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "auszahlungsbetrag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAuszahlungsbetrag(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "abloesebetrag").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "abloesebetrag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAbloesebetrag(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "abloesebetragIntern").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "abloesebetragIntern" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAbloesebetragIntern(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "abloesebetragExtern").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "abloesebetragExtern" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAbloesebetragExtern(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "kreditbetragNetto").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kreditbetragNetto" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKreditbetragNetto(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "laufzeitInMonaten").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "laufzeitInMonaten" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLaufzeitInMonaten(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ersteRateDatum").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ersteRateDatum" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setErsteRateDatum(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "auszahlungDatum").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "auszahlungDatum" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAuszahlungDatum(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wunschrate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "wunschrate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWunschrate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "ratenbetragMonatl").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ratenbetragMonatl" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRatenbetragMonatl(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rateneinzugZum").equals(
                                reader.getName())) {
                        object.setRateneinzugZum(RateneinzugType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rsv").equals(
                                reader.getName())) {
                        object.setRsv(RsvType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rsv2Dn").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rsv2Dn" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRsv2Dn(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rsvBetrag").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rsvBetrag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRsvBetrag(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "verwendungszweck").equals(
                                reader.getName())) {
                        object.setVerwendungszweck(VwzType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "verwendungszweckFrei").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "verwendungszweckFrei" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVerwendungszweckFrei(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "effektivzinsPaProz").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "effektivzinsPaProz" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEffektivzinsPaProz(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "nominalzinsPaProz").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nominalzinsPaProz" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNominalzinsPaProz(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "zinsenGesamt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "zinsenGesamt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setZinsenGesamt(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "zinsenGesamtProz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "zinsenGesamtProz" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setZinsenGesamtProz(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bearbeitGeb").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bearbeitGeb" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBearbeitGeb(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bearbeitGebProz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bearbeitGebProz" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBearbeitGebProz(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "kreditbetragGesamt").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kreditbetragGesamt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKreditbetragGesamt(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "limit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "limit" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLimit(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "zahlungsart").equals(
                                reader.getName())) {
                        object.setZahlungsart(ZahlungsartType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kartenprodukt").equals(
                                reader.getName())) {
                        object.setKartenprodukt(KartenproduktType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "accounttype").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "accounttype" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAccounttype(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bonuscode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bonuscode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBonuscode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kampagnencode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kampagnencode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKampagnencode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "eigeneRechnung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "eigeneRechnung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEigeneRechnung(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "praegename").equals(
                                reader.getName())) {
                        object.setPraegename(PraegenameType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AnredeType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "anredeType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _HERR = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HERR");
        public static final java.lang.String _FRAU = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FRAU");
        public static final java.lang.String _FIRMA = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FIRMA");
        public static final AnredeType HERR = new AnredeType(_HERR, true);
        public static final AnredeType FRAU = new AnredeType(_FRAU, true);
        public static final AnredeType FIRMA = new AnredeType(_FIRMA, true);

        /**
         * field for AnredeType
         */
        protected java.lang.String localAnredeType;

        // Constructor
        protected AnredeType(java.lang.String value, boolean isRegisterValue) {
            localAnredeType = value;

            if (isRegisterValue) {
                _table_.put(localAnredeType, this);
            }
        }

        public java.lang.String getValue() {
            return localAnredeType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localAnredeType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":anredeType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "anredeType", xmlWriter);
                }
            }

            if (localAnredeType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "anredeType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localAnredeType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAnredeType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static AnredeType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                AnredeType enumeration = (AnredeType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static AnredeType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static AnredeType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return AnredeType.Factory.fromString(content, namespaceUri);
                } else {
                    return AnredeType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AnredeType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AnredeType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "anredeType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = AnredeType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = AnredeType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KreditantragXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = KreditantragXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for AntragId
         */
        protected java.lang.String localAntragId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAntragIdTracker = false;

        /**
         * field for ScbAntragId
         */
        protected java.lang.String localScbAntragId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScbAntragIdTracker = false;

        /**
         * field for VermittlerId
         */
        protected java.lang.String localVermittlerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVermittlerIdTracker = false;

        /**
         * field for ScbVermittlerId
         */
        protected java.lang.String localScbVermittlerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScbVermittlerIdTracker = false;

        /**
         * field for Bemerkung
         */
        protected java.lang.String localBemerkung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBemerkungTracker = false;

        /**
         * field for Finanzierung
         */
        protected FinanzierungXO localFinanzierung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFinanzierungTracker = false;

        /**
         * field for Darlehnsnehmer
         */
        protected DarlehnsnehmerXO localDarlehnsnehmer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDarlehnsnehmerTracker = false;

        /**
         * field for Mitverpflichteter
         */
        protected DarlehnsnehmerXO localMitverpflichteter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMitverpflichteterTracker = false;

        /**
         * field for Vermittler
         */
        protected SachbearbeiterXO localVermittler;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVermittlerTracker = false;

        public boolean isAntragIdSpecified() {
            return localAntragIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAntragId() {
            return localAntragId;
        }

        /**
         * Auto generated setter method
         * @param param AntragId
         */
        public void setAntragId(java.lang.String param) {
            localAntragIdTracker = param != null;

            this.localAntragId = param;
        }

        public boolean isScbAntragIdSpecified() {
            return localScbAntragIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getScbAntragId() {
            return localScbAntragId;
        }

        /**
         * Auto generated setter method
         * @param param ScbAntragId
         */
        public void setScbAntragId(java.lang.String param) {
            localScbAntragIdTracker = param != null;

            this.localScbAntragId = param;
        }

        public boolean isVermittlerIdSpecified() {
            return localVermittlerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVermittlerId() {
            return localVermittlerId;
        }

        /**
         * Auto generated setter method
         * @param param VermittlerId
         */
        public void setVermittlerId(java.lang.String param) {
            localVermittlerIdTracker = param != null;

            this.localVermittlerId = param;
        }

        public boolean isScbVermittlerIdSpecified() {
            return localScbVermittlerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getScbVermittlerId() {
            return localScbVermittlerId;
        }

        /**
         * Auto generated setter method
         * @param param ScbVermittlerId
         */
        public void setScbVermittlerId(java.lang.String param) {
            localScbVermittlerIdTracker = param != null;

            this.localScbVermittlerId = param;
        }

        public boolean isBemerkungSpecified() {
            return localBemerkungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBemerkung() {
            return localBemerkung;
        }

        /**
         * Auto generated setter method
         * @param param Bemerkung
         */
        public void setBemerkung(java.lang.String param) {
            localBemerkungTracker = param != null;

            this.localBemerkung = param;
        }

        public boolean isFinanzierungSpecified() {
            return localFinanzierungTracker;
        }

        /**
         * Auto generated getter method
         * @return FinanzierungXO
         */
        public FinanzierungXO getFinanzierung() {
            return localFinanzierung;
        }

        /**
         * Auto generated setter method
         * @param param Finanzierung
         */
        public void setFinanzierung(FinanzierungXO param) {
            localFinanzierungTracker = param != null;

            this.localFinanzierung = param;
        }

        public boolean isDarlehnsnehmerSpecified() {
            return localDarlehnsnehmerTracker;
        }

        /**
         * Auto generated getter method
         * @return DarlehnsnehmerXO
         */
        public DarlehnsnehmerXO getDarlehnsnehmer() {
            return localDarlehnsnehmer;
        }

        /**
         * Auto generated setter method
         * @param param Darlehnsnehmer
         */
        public void setDarlehnsnehmer(DarlehnsnehmerXO param) {
            localDarlehnsnehmerTracker = param != null;

            this.localDarlehnsnehmer = param;
        }

        public boolean isMitverpflichteterSpecified() {
            return localMitverpflichteterTracker;
        }

        /**
         * Auto generated getter method
         * @return DarlehnsnehmerXO
         */
        public DarlehnsnehmerXO getMitverpflichteter() {
            return localMitverpflichteter;
        }

        /**
         * Auto generated setter method
         * @param param Mitverpflichteter
         */
        public void setMitverpflichteter(DarlehnsnehmerXO param) {
            localMitverpflichteterTracker = param != null;

            this.localMitverpflichteter = param;
        }

        public boolean isVermittlerSpecified() {
            return localVermittlerTracker;
        }

        /**
         * Auto generated getter method
         * @return SachbearbeiterXO
         */
        public SachbearbeiterXO getVermittler() {
            return localVermittler;
        }

        /**
         * Auto generated setter method
         * @param param Vermittler
         */
        public void setVermittler(SachbearbeiterXO param) {
            localVermittlerTracker = param != null;

            this.localVermittler = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":KreditantragXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "KreditantragXO", xmlWriter);
                }
            }

            if (localAntragIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "antragId", xmlWriter);

                if (localAntragId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAntragId);
                }

                xmlWriter.writeEndElement();
            }

            if (localScbAntragIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "scbAntragId", xmlWriter);

                if (localScbAntragId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localScbAntragId);
                }

                xmlWriter.writeEndElement();
            }

            if (localVermittlerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "vermittlerId", xmlWriter);

                if (localVermittlerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "vermittlerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVermittlerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localScbVermittlerIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "scbVermittlerId", xmlWriter);

                if (localScbVermittlerId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbVermittlerId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localScbVermittlerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localBemerkungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bemerkung", xmlWriter);

                if (localBemerkung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bemerkung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBemerkung);
                }

                xmlWriter.writeEndElement();
            }

            if (localFinanzierungTracker) {
                if (localFinanzierung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "finanzierung cannot be null!!");
                }

                localFinanzierung.serialize(new javax.xml.namespace.QName("",
                        "finanzierung"), xmlWriter);
            }

            if (localDarlehnsnehmerTracker) {
                if (localDarlehnsnehmer == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "darlehnsnehmer cannot be null!!");
                }

                localDarlehnsnehmer.serialize(new javax.xml.namespace.QName(
                        "", "darlehnsnehmer"), xmlWriter);
            }

            if (localMitverpflichteterTracker) {
                if (localMitverpflichteter == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "mitverpflichteter cannot be null!!");
                }

                localMitverpflichteter.serialize(new javax.xml.namespace.QName(
                        "", "mitverpflichteter"), xmlWriter);
            }

            if (localVermittlerTracker) {
                if (localVermittler == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vermittler cannot be null!!");
                }

                localVermittler.serialize(new javax.xml.namespace.QName("",
                        "vermittler"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAntragIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "antragId"));

                if (localAntragId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAntragId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragId cannot be null!!");
                }
            }

            if (localScbAntragIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "scbAntragId"));

                if (localScbAntragId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScbAntragId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                }
            }

            if (localVermittlerIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "vermittlerId"));

                if (localVermittlerId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVermittlerId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vermittlerId cannot be null!!");
                }
            }

            if (localScbVermittlerIdTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "scbVermittlerId"));

                if (localScbVermittlerId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScbVermittlerId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbVermittlerId cannot be null!!");
                }
            }

            if (localBemerkungTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bemerkung"));

                if (localBemerkung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBemerkung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bemerkung cannot be null!!");
                }
            }

            if (localFinanzierungTracker) {
                elementList.add(new javax.xml.namespace.QName("", "finanzierung"));

                if (localFinanzierung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "finanzierung cannot be null!!");
                }

                elementList.add(localFinanzierung);
            }

            if (localDarlehnsnehmerTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "darlehnsnehmer"));

                if (localDarlehnsnehmer == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "darlehnsnehmer cannot be null!!");
                }

                elementList.add(localDarlehnsnehmer);
            }

            if (localMitverpflichteterTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "mitverpflichteter"));

                if (localMitverpflichteter == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "mitverpflichteter cannot be null!!");
                }

                elementList.add(localMitverpflichteter);
            }

            if (localVermittlerTracker) {
                elementList.add(new javax.xml.namespace.QName("", "vermittler"));

                if (localVermittler == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vermittler cannot be null!!");
                }

                elementList.add(localVermittler);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KreditantragXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KreditantragXO object = new KreditantragXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"KreditantragXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (KreditantragXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "antragId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "antragId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAntragId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "scbAntragId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "scbAntragId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScbAntragId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vermittlerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "vermittlerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVermittlerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "scbVermittlerId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "scbVermittlerId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScbVermittlerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bemerkung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bemerkung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBemerkung(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "finanzierung").equals(
                                reader.getName())) {
                        object.setFinanzierung(FinanzierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "darlehnsnehmer").equals(
                                reader.getName())) {
                        object.setDarlehnsnehmer(DarlehnsnehmerXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "mitverpflichteter").equals(reader.getName())) {
                        object.setMitverpflichteter(DarlehnsnehmerXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vermittler").equals(
                                reader.getName())) {
                        object.setVermittler(SachbearbeiterXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KarteXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = KarteXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Kartenart
         */
        protected KartenartType localKartenart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKartenartTracker = false;

        /**
         * field for Bank
         */
        protected java.lang.String localBank;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankTracker = false;

        /**
         * field for Kartennr
         */
        protected java.lang.String localKartennr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKartennrTracker = false;

        /**
         * field for Kontonr
         */
        protected java.lang.String localKontonr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKontonrTracker = false;

        /**
         * field for Gueltigbis
         */
        protected java.util.Date localGueltigbis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGueltigbisTracker = false;

        public boolean isKartenartSpecified() {
            return localKartenartTracker;
        }

        /**
         * Auto generated getter method
         * @return KartenartType
         */
        public KartenartType getKartenart() {
            return localKartenart;
        }

        /**
         * Auto generated setter method
         * @param param Kartenart
         */
        public void setKartenart(KartenartType param) {
            localKartenartTracker = param != null;

            this.localKartenart = param;
        }

        public boolean isBankSpecified() {
            return localBankTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBank() {
            return localBank;
        }

        /**
         * Auto generated setter method
         * @param param Bank
         */
        public void setBank(java.lang.String param) {
            localBankTracker = param != null;

            this.localBank = param;
        }

        public boolean isKartennrSpecified() {
            return localKartennrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKartennr() {
            return localKartennr;
        }

        /**
         * Auto generated setter method
         * @param param Kartennr
         */
        public void setKartennr(java.lang.String param) {
            localKartennrTracker = param != null;

            this.localKartennr = param;
        }

        public boolean isKontonrSpecified() {
            return localKontonrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKontonr() {
            return localKontonr;
        }

        /**
         * Auto generated setter method
         * @param param Kontonr
         */
        public void setKontonr(java.lang.String param) {
            localKontonrTracker = param != null;

            this.localKontonr = param;
        }

        public boolean isGueltigbisSpecified() {
            return localGueltigbisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getGueltigbis() {
            return localGueltigbis;
        }

        /**
         * Auto generated setter method
         * @param param Gueltigbis
         */
        public void setGueltigbis(java.util.Date param) {
            localGueltigbisTracker = param != null;

            this.localGueltigbis = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":KarteXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "KarteXO", xmlWriter);
                }
            }

            if (localKartenartTracker) {
                if (localKartenart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartenart cannot be null!!");
                }

                localKartenart.serialize(new javax.xml.namespace.QName("",
                        "kartenart"), xmlWriter);
            }

            if (localBankTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bank", xmlWriter);

                if (localBank == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBank);
                }

                xmlWriter.writeEndElement();
            }

            if (localKartennrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kartennr", xmlWriter);

                if (localKartennr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartennr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKartennr);
                }

                xmlWriter.writeEndElement();
            }

            if (localKontonrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kontonr", xmlWriter);

                if (localKontonr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKontonr);
                }

                xmlWriter.writeEndElement();
            }

            if (localGueltigbisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "gueltigbis", xmlWriter);

                if (localGueltigbis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "gueltigbis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGueltigbis));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localKartenartTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kartenart"));

                if (localKartenart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartenart cannot be null!!");
                }

                elementList.add(localKartenart);
            }

            if (localBankTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bank"));

                if (localBank != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBank));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                }
            }

            if (localKartennrTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kartennr"));

                if (localKartennr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKartennr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kartennr cannot be null!!");
                }
            }

            if (localKontonrTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kontonr"));

                if (localKontonr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKontonr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                }
            }

            if (localGueltigbisTracker) {
                elementList.add(new javax.xml.namespace.QName("", "gueltigbis"));

                if (localGueltigbis != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGueltigbis));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "gueltigbis cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KarteXO parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KarteXO object = new KarteXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"KarteXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (KarteXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kartenart").equals(
                                reader.getName())) {
                        object.setKartenart(KartenartType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bank").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bank" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBank(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kartennr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kartennr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKartennr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kontonr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kontonr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKontonr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "gueltigbis").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gueltigbis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGueltigbis(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LandType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "landType", "ns1");

        /**
         * field for LandType
         */
        protected java.lang.String localLandType;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLandType() {
            return localLandType;
        }

        /**
         * Auto generated setter method
         * @param param LandType
         */
        public void setLandType(java.lang.String param) {
            if (org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        param).matches("[A-Z][A-Z]")) {
                this.localLandType = param;
            } else {
                throw new java.lang.RuntimeException();
            }
        }

        public java.lang.String toString() {
            return localLandType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":landType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "landType", xmlWriter);
                }
            }

            if (localLandType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "landType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localLandType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLandType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static LandType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                LandType returnValue = new LandType();

                returnValue.setLandType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static LandType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return LandType.Factory.fromString(content, namespaceUri);
                } else {
                    return LandType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LandType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LandType object = new LandType();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "landType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setLandType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class WohnartType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "wohnartType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _MIETWOHNUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MIETWOHNUNG");
        public static final java.lang.String _WOHNHAFT_BEI_ELTERN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "WOHNHAFT_BEI_ELTERN");
        public static final java.lang.String _EIGENTUMSWOHNUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EIGENTUMSWOHNUNG");
        public static final java.lang.String _EIGENES_HAUS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EIGENES_HAUS");
        public static final WohnartType MIETWOHNUNG = new WohnartType(_MIETWOHNUNG,
                true);
        public static final WohnartType WOHNHAFT_BEI_ELTERN = new WohnartType(_WOHNHAFT_BEI_ELTERN,
                true);
        public static final WohnartType EIGENTUMSWOHNUNG = new WohnartType(_EIGENTUMSWOHNUNG,
                true);
        public static final WohnartType EIGENES_HAUS = new WohnartType(_EIGENES_HAUS,
                true);

        /**
         * field for WohnartType
         */
        protected java.lang.String localWohnartType;

        // Constructor
        protected WohnartType(java.lang.String value, boolean isRegisterValue) {
            localWohnartType = value;

            if (isRegisterValue) {
                _table_.put(localWohnartType, this);
            }
        }

        public java.lang.String getValue() {
            return localWohnartType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localWohnartType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":wohnartType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "wohnartType", xmlWriter);
                }
            }

            if (localWohnartType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "wohnartType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localWohnartType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWohnartType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static WohnartType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                WohnartType enumeration = (WohnartType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static WohnartType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static WohnartType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return WohnartType.Factory.fromString(content, namespaceUri);
                } else {
                    return WohnartType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static WohnartType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                WohnartType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "wohnartType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = WohnartType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = WohnartType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RentenartType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "rentenartType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _ALTERSRENTE_GESETZLICH = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ALTERSRENTE_GESETZLICH");
        public static final java.lang.String _ALTERSRENTE_PRIVAT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ALTERSRENTE_PRIVAT");
        public static final java.lang.String _BEHINDERTENRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BEHINDERTENRENTE");
        public static final java.lang.String _BETRIEBSRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BETRIEBSRENTE");
        public static final java.lang.String _BERUFSUNFAEHIGKEITSRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BERUFSUNFAEHIGKEITSRENTE");
        public static final java.lang.String _ERWERBSUNFAEHIGKEITSRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ERWERBSUNFAEHIGKEITSRENTE");
        public static final java.lang.String _UNFALLVERSICHERUNGSRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UNFALLVERSICHERUNGSRENTE");
        public static final java.lang.String _WAISENRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "WAISENRENTE");
        public static final java.lang.String _WITWENRENTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "WITWENRENTE");
        public static final java.lang.String _PENSION = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "PENSION");
        public static final RentenartType ALTERSRENTE_GESETZLICH = new RentenartType(_ALTERSRENTE_GESETZLICH,
                true);
        public static final RentenartType ALTERSRENTE_PRIVAT = new RentenartType(_ALTERSRENTE_PRIVAT,
                true);
        public static final RentenartType BEHINDERTENRENTE = new RentenartType(_BEHINDERTENRENTE,
                true);
        public static final RentenartType BETRIEBSRENTE = new RentenartType(_BETRIEBSRENTE,
                true);
        public static final RentenartType BERUFSUNFAEHIGKEITSRENTE = new RentenartType(_BERUFSUNFAEHIGKEITSRENTE,
                true);
        public static final RentenartType ERWERBSUNFAEHIGKEITSRENTE = new RentenartType(_ERWERBSUNFAEHIGKEITSRENTE,
                true);
        public static final RentenartType UNFALLVERSICHERUNGSRENTE = new RentenartType(_UNFALLVERSICHERUNGSRENTE,
                true);
        public static final RentenartType WAISENRENTE = new RentenartType(_WAISENRENTE,
                true);
        public static final RentenartType WITWENRENTE = new RentenartType(_WITWENRENTE,
                true);
        public static final RentenartType PENSION = new RentenartType(_PENSION,
                true);

        /**
         * field for RentenartType
         */
        protected java.lang.String localRentenartType;

        // Constructor
        protected RentenartType(java.lang.String value, boolean isRegisterValue) {
            localRentenartType = value;

            if (isRegisterValue) {
                _table_.put(localRentenartType, this);
            }
        }

        public java.lang.String getValue() {
            return localRentenartType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localRentenartType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":rentenartType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "rentenartType", xmlWriter);
                }
            }

            if (localRentenartType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "rentenartType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localRentenartType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRentenartType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static RentenartType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                RentenartType enumeration = (RentenartType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static RentenartType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static RentenartType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return RentenartType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return RentenartType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RentenartType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RentenartType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "rentenartType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = RentenartType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = RentenartType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditantragsstatusResult implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditantragsstatusResult
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Antragsstatus
         */
        protected KreditantragsstatusXO localAntragsstatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAntragsstatusTracker = false;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        public boolean isAntragsstatusSpecified() {
            return localAntragsstatusTracker;
        }

        /**
         * Auto generated getter method
         * @return KreditantragsstatusXO
         */
        public KreditantragsstatusXO getAntragsstatus() {
            return localAntragsstatus;
        }

        /**
         * Auto generated setter method
         * @param param Antragsstatus
         */
        public void setAntragsstatus(KreditantragsstatusXO param) {
            localAntragsstatusTracker = param != null;

            this.localAntragsstatus = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditantragsstatusResult",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditantragsstatusResult", xmlWriter);
                }
            }

            if (localAntragsstatusTracker) {
                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                localAntragsstatus.serialize(new javax.xml.namespace.QName("",
                        "antragsstatus"), xmlWriter);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAntragsstatusTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "antragsstatus"));

                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                elementList.add(localAntragsstatus);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditantragsstatusResult parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditantragsstatusResult object = new GetKreditantragsstatusResult();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditantragsstatusResult".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditantragsstatusResult) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "antragsstatus").equals(
                                reader.getName())) {
                        object.setAntragsstatus(KreditantragsstatusXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list2.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list2));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KreditantragsstatusXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = KreditantragsstatusXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for AntragId
         */
        protected java.lang.String localAntragId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAntragIdTracker = false;

        /**
         * field for ScbAntragId
         */
        protected java.lang.String localScbAntragId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScbAntragIdTracker = false;

        /**
         * field for Status
         */
        protected AntragstatusType localStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTracker = false;

        /**
         * field for Kreditvertrag
         */
        protected DokumentXO localKreditvertrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditvertragTracker = false;

        /**
         * field for Finanzierung
         */
        protected FinanzierungXO localFinanzierung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFinanzierungTracker = false;

        /**
         * field for Sachbearbeiter
         */
        protected SachbearbeiterXO localSachbearbeiter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSachbearbeiterTracker = false;

        /**
         * field for FehlendeDokumente
         * This was an Array!
         */
        protected DokumentXO[] localFehlendeDokumente;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFehlendeDokumenteTracker = false;

        /**
         * field for Hinweise
         * This was an Array!
         */
        protected HinweisXO[] localHinweise;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHinweiseTracker = false;

        public boolean isAntragIdSpecified() {
            return localAntragIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAntragId() {
            return localAntragId;
        }

        /**
         * Auto generated setter method
         * @param param AntragId
         */
        public void setAntragId(java.lang.String param) {
            localAntragIdTracker = param != null;

            this.localAntragId = param;
        }

        public boolean isScbAntragIdSpecified() {
            return localScbAntragIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getScbAntragId() {
            return localScbAntragId;
        }

        /**
         * Auto generated setter method
         * @param param ScbAntragId
         */
        public void setScbAntragId(java.lang.String param) {
            localScbAntragIdTracker = param != null;

            this.localScbAntragId = param;
        }

        public boolean isStatusSpecified() {
            return localStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return AntragstatusType
         */
        public AntragstatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(AntragstatusType param) {
            localStatusTracker = param != null;

            this.localStatus = param;
        }

        public boolean isKreditvertragSpecified() {
            return localKreditvertragTracker;
        }

        /**
         * Auto generated getter method
         * @return DokumentXO
         */
        public DokumentXO getKreditvertrag() {
            return localKreditvertrag;
        }

        /**
         * Auto generated setter method
         * @param param Kreditvertrag
         */
        public void setKreditvertrag(DokumentXO param) {
            localKreditvertragTracker = param != null;

            this.localKreditvertrag = param;
        }

        public boolean isFinanzierungSpecified() {
            return localFinanzierungTracker;
        }

        /**
         * Auto generated getter method
         * @return FinanzierungXO
         */
        public FinanzierungXO getFinanzierung() {
            return localFinanzierung;
        }

        /**
         * Auto generated setter method
         * @param param Finanzierung
         */
        public void setFinanzierung(FinanzierungXO param) {
            localFinanzierungTracker = param != null;

            this.localFinanzierung = param;
        }

        public boolean isSachbearbeiterSpecified() {
            return localSachbearbeiterTracker;
        }

        /**
         * Auto generated getter method
         * @return SachbearbeiterXO
         */
        public SachbearbeiterXO getSachbearbeiter() {
            return localSachbearbeiter;
        }

        /**
         * Auto generated setter method
         * @param param Sachbearbeiter
         */
        public void setSachbearbeiter(SachbearbeiterXO param) {
            localSachbearbeiterTracker = param != null;

            this.localSachbearbeiter = param;
        }

        public boolean isFehlendeDokumenteSpecified() {
            return localFehlendeDokumenteTracker;
        }

        /**
         * Auto generated getter method
         * @return DokumentXO[]
         */
        public DokumentXO[] getFehlendeDokumente() {
            return localFehlendeDokumente;
        }

        /**
         * validate the array for FehlendeDokumente
         */
        protected void validateFehlendeDokumente(DokumentXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param FehlendeDokumente
         */
        public void setFehlendeDokumente(DokumentXO[] param) {
            validateFehlendeDokumente(param);

            localFehlendeDokumenteTracker = param != null;

            this.localFehlendeDokumente = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param DokumentXO
         */
        public void addFehlendeDokumente(DokumentXO param) {
            if (localFehlendeDokumente == null) {
                localFehlendeDokumente = new DokumentXO[] {  };
            }

            //update the setting tracker
            localFehlendeDokumenteTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localFehlendeDokumente);
            list.add(param);
            this.localFehlendeDokumente = (DokumentXO[]) list.toArray(new DokumentXO[list.size()]);
        }

        public boolean isHinweiseSpecified() {
            return localHinweiseTracker;
        }

        /**
         * Auto generated getter method
         * @return HinweisXO[]
         */
        public HinweisXO[] getHinweise() {
            return localHinweise;
        }

        /**
         * validate the array for Hinweise
         */
        protected void validateHinweise(HinweisXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Hinweise
         */
        public void setHinweise(HinweisXO[] param) {
            validateHinweise(param);

            localHinweiseTracker = param != null;

            this.localHinweise = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param HinweisXO
         */
        public void addHinweise(HinweisXO param) {
            if (localHinweise == null) {
                localHinweise = new HinweisXO[] {  };
            }

            //update the setting tracker
            localHinweiseTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localHinweise);
            list.add(param);
            this.localHinweise = (HinweisXO[]) list.toArray(new HinweisXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":KreditantragsstatusXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "KreditantragsstatusXO", xmlWriter);
                }
            }

            if (localAntragIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "antragId", xmlWriter);

                if (localAntragId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAntragId);
                }

                xmlWriter.writeEndElement();
            }

            if (localScbAntragIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "scbAntragId", xmlWriter);

                if (localScbAntragId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localScbAntragId);
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTracker) {
                if (localStatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "status cannot be null!!");
                }

                localStatus.serialize(new javax.xml.namespace.QName("", "status"),
                    xmlWriter);
            }

            if (localKreditvertragTracker) {
                if (localKreditvertrag == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditvertrag cannot be null!!");
                }

                localKreditvertrag.serialize(new javax.xml.namespace.QName("",
                        "kreditvertrag"), xmlWriter);
            }

            if (localFinanzierungTracker) {
                if (localFinanzierung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "finanzierung cannot be null!!");
                }

                localFinanzierung.serialize(new javax.xml.namespace.QName("",
                        "finanzierung"), xmlWriter);
            }

            if (localSachbearbeiterTracker) {
                if (localSachbearbeiter == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "sachbearbeiter cannot be null!!");
                }

                localSachbearbeiter.serialize(new javax.xml.namespace.QName(
                        "", "sachbearbeiter"), xmlWriter);
            }

            if (localFehlendeDokumenteTracker) {
                if (localFehlendeDokumente != null) {
                    for (int i = 0; i < localFehlendeDokumente.length; i++) {
                        if (localFehlendeDokumente[i] != null) {
                            localFehlendeDokumente[i].serialize(new javax.xml.namespace.QName(
                                    "", "fehlendeDokumente"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "fehlendeDokumente cannot be null!!");
                }
            }

            if (localHinweiseTracker) {
                if (localHinweise != null) {
                    for (int i = 0; i < localHinweise.length; i++) {
                        if (localHinweise[i] != null) {
                            localHinweise[i].serialize(new javax.xml.namespace.QName(
                                    "", "hinweise"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "hinweise cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAntragIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "antragId"));

                if (localAntragId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAntragId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragId cannot be null!!");
                }
            }

            if (localScbAntragIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "scbAntragId"));

                if (localScbAntragId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScbAntragId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbAntragId cannot be null!!");
                }
            }

            if (localStatusTracker) {
                elementList.add(new javax.xml.namespace.QName("", "status"));

                if (localStatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "status cannot be null!!");
                }

                elementList.add(localStatus);
            }

            if (localKreditvertragTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kreditvertrag"));

                if (localKreditvertrag == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditvertrag cannot be null!!");
                }

                elementList.add(localKreditvertrag);
            }

            if (localFinanzierungTracker) {
                elementList.add(new javax.xml.namespace.QName("", "finanzierung"));

                if (localFinanzierung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "finanzierung cannot be null!!");
                }

                elementList.add(localFinanzierung);
            }

            if (localSachbearbeiterTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "sachbearbeiter"));

                if (localSachbearbeiter == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "sachbearbeiter cannot be null!!");
                }

                elementList.add(localSachbearbeiter);
            }

            if (localFehlendeDokumenteTracker) {
                if (localFehlendeDokumente != null) {
                    for (int i = 0; i < localFehlendeDokumente.length; i++) {
                        if (localFehlendeDokumente[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "fehlendeDokumente"));
                            elementList.add(localFehlendeDokumente[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "fehlendeDokumente cannot be null!!");
                }
            }

            if (localHinweiseTracker) {
                if (localHinweise != null) {
                    for (int i = 0; i < localHinweise.length; i++) {
                        if (localHinweise[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "hinweise"));
                            elementList.add(localHinweise[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "hinweise cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KreditantragsstatusXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KreditantragsstatusXO object = new KreditantragsstatusXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"KreditantragsstatusXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (KreditantragsstatusXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list7 = new java.util.ArrayList();

                    java.util.ArrayList list8 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "antragId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "antragId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAntragId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "scbAntragId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "scbAntragId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScbAntragId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "status").equals(
                                reader.getName())) {
                        object.setStatus(AntragstatusType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kreditvertrag").equals(
                                reader.getName())) {
                        object.setKreditvertrag(DokumentXO.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "finanzierung").equals(
                                reader.getName())) {
                        object.setFinanzierung(FinanzierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sachbearbeiter").equals(
                                reader.getName())) {
                        object.setSachbearbeiter(SachbearbeiterXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "fehlendeDokumente").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list7.add(DokumentXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone7 = false;

                        while (!loopDone7) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone7 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "fehlendeDokumente").equals(
                                            reader.getName())) {
                                    list7.add(DokumentXO.Factory.parse(reader));
                                } else {
                                    loopDone7 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setFehlendeDokumente((DokumentXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                DokumentXO.class, list7));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "hinweise").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list8.add(HinweisXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone8 = false;

                        while (!loopDone8) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone8 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "hinweise").equals(
                                            reader.getName())) {
                                    list8.add(HinweisXO.Factory.parse(reader));
                                } else {
                                    loopDone8 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setHinweise((HinweisXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                HinweisXO.class, list8));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EinnahmenAusgabenXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = EinnahmenAusgabenXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for NettoEinkommen
         */
        protected java.math.BigDecimal localNettoEinkommen;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNettoEinkommenTracker = false;

        /**
         * field for SonstigeEinnahmen
         */
        protected java.math.BigDecimal localSonstigeEinnahmen;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSonstigeEinnahmenTracker = false;

        /**
         * field for NebeneinkAngestellt
         */
        protected java.math.BigDecimal localNebeneinkAngestellt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNebeneinkAngestelltTracker = false;

        /**
         * field for NebeneinkSelbstaendig
         */
        protected java.math.BigDecimal localNebeneinkSelbstaendig;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNebeneinkSelbstaendigTracker = false;

        /**
         * field for MietEinnahmen
         */
        protected java.math.BigDecimal localMietEinnahmen;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMietEinnahmenTracker = false;

        /**
         * field for Zinsertraege
         */
        protected java.math.BigDecimal localZinsertraege;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localZinsertraegeTracker = false;

        /**
         * field for UnterhaltEingang
         */
        protected java.math.BigDecimal localUnterhaltEingang;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnterhaltEingangTracker = false;

        /**
         * field for Kindergeld
         */
        protected java.math.BigDecimal localKindergeld;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKindergeldTracker = false;

        /**
         * field for Rentenbezuege
         */
        protected java.math.BigDecimal localRentenbezuege;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRentenbezuegeTracker = false;

        /**
         * field for Rentenart
         */
        protected RentenartType localRentenart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRentenartTracker = false;

        /**
         * field for SonstigeAusgaben
         */
        protected java.math.BigDecimal localSonstigeAusgaben;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSonstigeAusgabenTracker = false;

        /**
         * field for Warmmiete
         */
        protected java.math.BigDecimal localWarmmiete;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWarmmieteTracker = false;

        /**
         * field for Wohnnebenkosten
         */
        protected java.math.BigDecimal localWohnnebenkosten;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWohnnebenkostenTracker = false;

        /**
         * field for Hypothek
         */
        protected java.math.BigDecimal localHypothek;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHypothekTracker = false;

        /**
         * field for Bausparen
         */
        protected java.math.BigDecimal localBausparen;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBausparenTracker = false;

        /**
         * field for Wohnflaeche
         */
        protected java.math.BigInteger localWohnflaeche;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWohnflaecheTracker = false;

        /**
         * field for Lebensversicherung
         */
        protected java.math.BigDecimal localLebensversicherung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLebensversicherungTracker = false;

        /**
         * field for Pkv
         */
        protected java.math.BigDecimal localPkv;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPkvTracker = false;

        /**
         * field for UnterhaltZahlung
         */
        protected java.math.BigDecimal localUnterhaltZahlung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUnterhaltZahlungTracker = false;

        /**
         * field for Wohnart
         */
        protected WohnartType localWohnart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWohnartTracker = false;

        /**
         * field for AnzHaus
         */
        protected java.math.BigInteger localAnzHaus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnzHausTracker = false;

        /**
         * field for AnzEtw
         */
        protected java.math.BigInteger localAnzEtw;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnzEtwTracker = false;

        /**
         * field for AnzPkw
         */
        protected java.math.BigInteger localAnzPkw;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnzPkwTracker = false;

        /**
         * field for AnzMotorrad
         */
        protected java.math.BigInteger localAnzMotorrad;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnzMotorradTracker = false;

        /**
         * field for Lohnsteuerklasse
         */
        protected LStKlasseType localLohnsteuerklasse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLohnsteuerklasseTracker = false;

        /**
         * field for Kinderfreibetraege
         */
        protected java.math.BigDecimal localKinderfreibetraege;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKinderfreibetraegeTracker = false;

        /**
         * field for DacBewertung
         */
        protected DacBewertungType localDacBewertung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDacBewertungTracker = false;

        public boolean isNettoEinkommenSpecified() {
            return localNettoEinkommenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getNettoEinkommen() {
            return localNettoEinkommen;
        }

        /**
         * Auto generated setter method
         * @param param NettoEinkommen
         */
        public void setNettoEinkommen(java.math.BigDecimal param) {
            localNettoEinkommenTracker = param != null;

            this.localNettoEinkommen = param;
        }

        public boolean isSonstigeEinnahmenSpecified() {
            return localSonstigeEinnahmenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSonstigeEinnahmen() {
            return localSonstigeEinnahmen;
        }

        /**
         * Auto generated setter method
         * @param param SonstigeEinnahmen
         */
        public void setSonstigeEinnahmen(java.math.BigDecimal param) {
            localSonstigeEinnahmenTracker = param != null;

            this.localSonstigeEinnahmen = param;
        }

        public boolean isNebeneinkAngestelltSpecified() {
            return localNebeneinkAngestelltTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getNebeneinkAngestellt() {
            return localNebeneinkAngestellt;
        }

        /**
         * Auto generated setter method
         * @param param NebeneinkAngestellt
         */
        public void setNebeneinkAngestellt(java.math.BigDecimal param) {
            localNebeneinkAngestelltTracker = param != null;

            this.localNebeneinkAngestellt = param;
        }

        public boolean isNebeneinkSelbstaendigSpecified() {
            return localNebeneinkSelbstaendigTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getNebeneinkSelbstaendig() {
            return localNebeneinkSelbstaendig;
        }

        /**
         * Auto generated setter method
         * @param param NebeneinkSelbstaendig
         */
        public void setNebeneinkSelbstaendig(java.math.BigDecimal param) {
            localNebeneinkSelbstaendigTracker = param != null;

            this.localNebeneinkSelbstaendig = param;
        }

        public boolean isMietEinnahmenSpecified() {
            return localMietEinnahmenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getMietEinnahmen() {
            return localMietEinnahmen;
        }

        /**
         * Auto generated setter method
         * @param param MietEinnahmen
         */
        public void setMietEinnahmen(java.math.BigDecimal param) {
            localMietEinnahmenTracker = param != null;

            this.localMietEinnahmen = param;
        }

        public boolean isZinsertraegeSpecified() {
            return localZinsertraegeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getZinsertraege() {
            return localZinsertraege;
        }

        /**
         * Auto generated setter method
         * @param param Zinsertraege
         */
        public void setZinsertraege(java.math.BigDecimal param) {
            localZinsertraegeTracker = param != null;

            this.localZinsertraege = param;
        }

        public boolean isUnterhaltEingangSpecified() {
            return localUnterhaltEingangTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getUnterhaltEingang() {
            return localUnterhaltEingang;
        }

        /**
         * Auto generated setter method
         * @param param UnterhaltEingang
         */
        public void setUnterhaltEingang(java.math.BigDecimal param) {
            localUnterhaltEingangTracker = param != null;

            this.localUnterhaltEingang = param;
        }

        public boolean isKindergeldSpecified() {
            return localKindergeldTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getKindergeld() {
            return localKindergeld;
        }

        /**
         * Auto generated setter method
         * @param param Kindergeld
         */
        public void setKindergeld(java.math.BigDecimal param) {
            localKindergeldTracker = param != null;

            this.localKindergeld = param;
        }

        public boolean isRentenbezuegeSpecified() {
            return localRentenbezuegeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRentenbezuege() {
            return localRentenbezuege;
        }

        /**
         * Auto generated setter method
         * @param param Rentenbezuege
         */
        public void setRentenbezuege(java.math.BigDecimal param) {
            localRentenbezuegeTracker = param != null;

            this.localRentenbezuege = param;
        }

        public boolean isRentenartSpecified() {
            return localRentenartTracker;
        }

        /**
         * Auto generated getter method
         * @return RentenartType
         */
        public RentenartType getRentenart() {
            return localRentenart;
        }

        /**
         * Auto generated setter method
         * @param param Rentenart
         */
        public void setRentenart(RentenartType param) {
            localRentenartTracker = param != null;

            this.localRentenart = param;
        }

        public boolean isSonstigeAusgabenSpecified() {
            return localSonstigeAusgabenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getSonstigeAusgaben() {
            return localSonstigeAusgaben;
        }

        /**
         * Auto generated setter method
         * @param param SonstigeAusgaben
         */
        public void setSonstigeAusgaben(java.math.BigDecimal param) {
            localSonstigeAusgabenTracker = param != null;

            this.localSonstigeAusgaben = param;
        }

        public boolean isWarmmieteSpecified() {
            return localWarmmieteTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getWarmmiete() {
            return localWarmmiete;
        }

        /**
         * Auto generated setter method
         * @param param Warmmiete
         */
        public void setWarmmiete(java.math.BigDecimal param) {
            localWarmmieteTracker = param != null;

            this.localWarmmiete = param;
        }

        public boolean isWohnnebenkostenSpecified() {
            return localWohnnebenkostenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getWohnnebenkosten() {
            return localWohnnebenkosten;
        }

        /**
         * Auto generated setter method
         * @param param Wohnnebenkosten
         */
        public void setWohnnebenkosten(java.math.BigDecimal param) {
            localWohnnebenkostenTracker = param != null;

            this.localWohnnebenkosten = param;
        }

        public boolean isHypothekSpecified() {
            return localHypothekTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getHypothek() {
            return localHypothek;
        }

        /**
         * Auto generated setter method
         * @param param Hypothek
         */
        public void setHypothek(java.math.BigDecimal param) {
            localHypothekTracker = param != null;

            this.localHypothek = param;
        }

        public boolean isBausparenSpecified() {
            return localBausparenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getBausparen() {
            return localBausparen;
        }

        /**
         * Auto generated setter method
         * @param param Bausparen
         */
        public void setBausparen(java.math.BigDecimal param) {
            localBausparenTracker = param != null;

            this.localBausparen = param;
        }

        public boolean isWohnflaecheSpecified() {
            return localWohnflaecheTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getWohnflaeche() {
            return localWohnflaeche;
        }

        /**
         * Auto generated setter method
         * @param param Wohnflaeche
         */
        public void setWohnflaeche(java.math.BigInteger param) {
            localWohnflaecheTracker = param != null;

            this.localWohnflaeche = param;
        }

        public boolean isLebensversicherungSpecified() {
            return localLebensversicherungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getLebensversicherung() {
            return localLebensversicherung;
        }

        /**
         * Auto generated setter method
         * @param param Lebensversicherung
         */
        public void setLebensversicherung(java.math.BigDecimal param) {
            localLebensversicherungTracker = param != null;

            this.localLebensversicherung = param;
        }

        public boolean isPkvSpecified() {
            return localPkvTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getPkv() {
            return localPkv;
        }

        /**
         * Auto generated setter method
         * @param param Pkv
         */
        public void setPkv(java.math.BigDecimal param) {
            localPkvTracker = param != null;

            this.localPkv = param;
        }

        public boolean isUnterhaltZahlungSpecified() {
            return localUnterhaltZahlungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getUnterhaltZahlung() {
            return localUnterhaltZahlung;
        }

        /**
         * Auto generated setter method
         * @param param UnterhaltZahlung
         */
        public void setUnterhaltZahlung(java.math.BigDecimal param) {
            localUnterhaltZahlungTracker = param != null;

            this.localUnterhaltZahlung = param;
        }

        public boolean isWohnartSpecified() {
            return localWohnartTracker;
        }

        /**
         * Auto generated getter method
         * @return WohnartType
         */
        public WohnartType getWohnart() {
            return localWohnart;
        }

        /**
         * Auto generated setter method
         * @param param Wohnart
         */
        public void setWohnart(WohnartType param) {
            localWohnartTracker = param != null;

            this.localWohnart = param;
        }

        public boolean isAnzHausSpecified() {
            return localAnzHausTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAnzHaus() {
            return localAnzHaus;
        }

        /**
         * Auto generated setter method
         * @param param AnzHaus
         */
        public void setAnzHaus(java.math.BigInteger param) {
            localAnzHausTracker = param != null;

            this.localAnzHaus = param;
        }

        public boolean isAnzEtwSpecified() {
            return localAnzEtwTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAnzEtw() {
            return localAnzEtw;
        }

        /**
         * Auto generated setter method
         * @param param AnzEtw
         */
        public void setAnzEtw(java.math.BigInteger param) {
            localAnzEtwTracker = param != null;

            this.localAnzEtw = param;
        }

        public boolean isAnzPkwSpecified() {
            return localAnzPkwTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAnzPkw() {
            return localAnzPkw;
        }

        /**
         * Auto generated setter method
         * @param param AnzPkw
         */
        public void setAnzPkw(java.math.BigInteger param) {
            localAnzPkwTracker = param != null;

            this.localAnzPkw = param;
        }

        public boolean isAnzMotorradSpecified() {
            return localAnzMotorradTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAnzMotorrad() {
            return localAnzMotorrad;
        }

        /**
         * Auto generated setter method
         * @param param AnzMotorrad
         */
        public void setAnzMotorrad(java.math.BigInteger param) {
            localAnzMotorradTracker = param != null;

            this.localAnzMotorrad = param;
        }

        public boolean isLohnsteuerklasseSpecified() {
            return localLohnsteuerklasseTracker;
        }

        /**
         * Auto generated getter method
         * @return LStKlasseType
         */
        public LStKlasseType getLohnsteuerklasse() {
            return localLohnsteuerklasse;
        }

        /**
         * Auto generated setter method
         * @param param Lohnsteuerklasse
         */
        public void setLohnsteuerklasse(LStKlasseType param) {
            localLohnsteuerklasseTracker = param != null;

            this.localLohnsteuerklasse = param;
        }

        public boolean isKinderfreibetraegeSpecified() {
            return localKinderfreibetraegeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getKinderfreibetraege() {
            return localKinderfreibetraege;
        }

        /**
         * Auto generated setter method
         * @param param Kinderfreibetraege
         */
        public void setKinderfreibetraege(java.math.BigDecimal param) {
            localKinderfreibetraegeTracker = param != null;

            this.localKinderfreibetraege = param;
        }

        public boolean isDacBewertungSpecified() {
            return localDacBewertungTracker;
        }

        /**
         * Auto generated getter method
         * @return DacBewertungType
         */
        public DacBewertungType getDacBewertung() {
            return localDacBewertung;
        }

        /**
         * Auto generated setter method
         * @param param DacBewertung
         */
        public void setDacBewertung(DacBewertungType param) {
            localDacBewertungTracker = param != null;

            this.localDacBewertung = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":EinnahmenAusgabenXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "EinnahmenAusgabenXO", xmlWriter);
                }
            }

            if (localNettoEinkommenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "nettoEinkommen", xmlWriter);

                if (localNettoEinkommen == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "nettoEinkommen cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNettoEinkommen));
                }

                xmlWriter.writeEndElement();
            }

            if (localSonstigeEinnahmenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sonstigeEinnahmen",
                    xmlWriter);

                if (localSonstigeEinnahmen == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sonstigeEinnahmen cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSonstigeEinnahmen));
                }

                xmlWriter.writeEndElement();
            }

            if (localNebeneinkAngestelltTracker) {
                namespace = "";
                writeStartElement(null, namespace, "nebeneinkAngestellt",
                    xmlWriter);

                if (localNebeneinkAngestellt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "nebeneinkAngestellt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNebeneinkAngestellt));
                }

                xmlWriter.writeEndElement();
            }

            if (localNebeneinkSelbstaendigTracker) {
                namespace = "";
                writeStartElement(null, namespace, "nebeneinkSelbstaendig",
                    xmlWriter);

                if (localNebeneinkSelbstaendig == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "nebeneinkSelbstaendig cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNebeneinkSelbstaendig));
                }

                xmlWriter.writeEndElement();
            }

            if (localMietEinnahmenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "mietEinnahmen", xmlWriter);

                if (localMietEinnahmen == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "mietEinnahmen cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMietEinnahmen));
                }

                xmlWriter.writeEndElement();
            }

            if (localZinsertraegeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "zinsertraege", xmlWriter);

                if (localZinsertraege == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsertraege cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsertraege));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnterhaltEingangTracker) {
                namespace = "";
                writeStartElement(null, namespace, "unterhaltEingang", xmlWriter);

                if (localUnterhaltEingang == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "unterhaltEingang cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnterhaltEingang));
                }

                xmlWriter.writeEndElement();
            }

            if (localKindergeldTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kindergeld", xmlWriter);

                if (localKindergeld == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kindergeld cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKindergeld));
                }

                xmlWriter.writeEndElement();
            }

            if (localRentenbezuegeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "rentenbezuege", xmlWriter);

                if (localRentenbezuege == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentenbezuege cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRentenbezuege));
                }

                xmlWriter.writeEndElement();
            }

            if (localRentenartTracker) {
                if (localRentenart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentenart cannot be null!!");
                }

                localRentenart.serialize(new javax.xml.namespace.QName("",
                        "rentenart"), xmlWriter);
            }

            if (localSonstigeAusgabenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "sonstigeAusgaben", xmlWriter);

                if (localSonstigeAusgaben == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "sonstigeAusgaben cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSonstigeAusgaben));
                }

                xmlWriter.writeEndElement();
            }

            if (localWarmmieteTracker) {
                namespace = "";
                writeStartElement(null, namespace, "warmmiete", xmlWriter);

                if (localWarmmiete == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "warmmiete cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWarmmiete));
                }

                xmlWriter.writeEndElement();
            }

            if (localWohnnebenkostenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "wohnnebenkosten", xmlWriter);

                if (localWohnnebenkosten == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnnebenkosten cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnnebenkosten));
                }

                xmlWriter.writeEndElement();
            }

            if (localHypothekTracker) {
                namespace = "";
                writeStartElement(null, namespace, "hypothek", xmlWriter);

                if (localHypothek == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "hypothek cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHypothek));
                }

                xmlWriter.writeEndElement();
            }

            if (localBausparenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bausparen", xmlWriter);

                if (localBausparen == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bausparen cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBausparen));
                }

                xmlWriter.writeEndElement();
            }

            if (localWohnflaecheTracker) {
                namespace = "";
                writeStartElement(null, namespace, "wohnflaeche", xmlWriter);

                if (localWohnflaeche == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnflaeche cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnflaeche));
                }

                xmlWriter.writeEndElement();
            }

            if (localLebensversicherungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "lebensversicherung",
                    xmlWriter);

                if (localLebensversicherung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "lebensversicherung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLebensversicherung));
                }

                xmlWriter.writeEndElement();
            }

            if (localPkvTracker) {
                namespace = "";
                writeStartElement(null, namespace, "pkv", xmlWriter);

                if (localPkv == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "pkv cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPkv));
                }

                xmlWriter.writeEndElement();
            }

            if (localUnterhaltZahlungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "unterhaltZahlung", xmlWriter);

                if (localUnterhaltZahlung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "unterhaltZahlung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnterhaltZahlung));
                }

                xmlWriter.writeEndElement();
            }

            if (localWohnartTracker) {
                if (localWohnart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnart cannot be null!!");
                }

                localWohnart.serialize(new javax.xml.namespace.QName("",
                        "wohnart"), xmlWriter);
            }

            if (localAnzHausTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anzHaus", xmlWriter);

                if (localAnzHaus == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzHaus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzHaus));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnzEtwTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anzEtw", xmlWriter);

                if (localAnzEtw == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzEtw cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzEtw));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnzPkwTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anzPkw", xmlWriter);

                if (localAnzPkw == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzPkw cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzPkw));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnzMotorradTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anzMotorrad", xmlWriter);

                if (localAnzMotorrad == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzMotorrad cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzMotorrad));
                }

                xmlWriter.writeEndElement();
            }

            if (localLohnsteuerklasseTracker) {
                if (localLohnsteuerklasse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "lohnsteuerklasse cannot be null!!");
                }

                localLohnsteuerklasse.serialize(new javax.xml.namespace.QName(
                        "", "lohnsteuerklasse"), xmlWriter);
            }

            if (localKinderfreibetraegeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kinderfreibetraege",
                    xmlWriter);

                if (localKinderfreibetraege == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kinderfreibetraege cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKinderfreibetraege));
                }

                xmlWriter.writeEndElement();
            }

            if (localDacBewertungTracker) {
                if (localDacBewertung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "dacBewertung cannot be null!!");
                }

                localDacBewertung.serialize(new javax.xml.namespace.QName("",
                        "dacBewertung"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localNettoEinkommenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "nettoEinkommen"));

                if (localNettoEinkommen != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNettoEinkommen));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "nettoEinkommen cannot be null!!");
                }
            }

            if (localSonstigeEinnahmenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "sonstigeEinnahmen"));

                if (localSonstigeEinnahmen != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSonstigeEinnahmen));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "sonstigeEinnahmen cannot be null!!");
                }
            }

            if (localNebeneinkAngestelltTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "nebeneinkAngestellt"));

                if (localNebeneinkAngestellt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNebeneinkAngestellt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "nebeneinkAngestellt cannot be null!!");
                }
            }

            if (localNebeneinkSelbstaendigTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "nebeneinkSelbstaendig"));

                if (localNebeneinkSelbstaendig != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNebeneinkSelbstaendig));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "nebeneinkSelbstaendig cannot be null!!");
                }
            }

            if (localMietEinnahmenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "mietEinnahmen"));

                if (localMietEinnahmen != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMietEinnahmen));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "mietEinnahmen cannot be null!!");
                }
            }

            if (localZinsertraegeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "zinsertraege"));

                if (localZinsertraege != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localZinsertraege));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "zinsertraege cannot be null!!");
                }
            }

            if (localUnterhaltEingangTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "unterhaltEingang"));

                if (localUnterhaltEingang != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnterhaltEingang));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "unterhaltEingang cannot be null!!");
                }
            }

            if (localKindergeldTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kindergeld"));

                if (localKindergeld != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKindergeld));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kindergeld cannot be null!!");
                }
            }

            if (localRentenbezuegeTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "rentenbezuege"));

                if (localRentenbezuege != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRentenbezuege));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentenbezuege cannot be null!!");
                }
            }

            if (localRentenartTracker) {
                elementList.add(new javax.xml.namespace.QName("", "rentenart"));

                if (localRentenart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentenart cannot be null!!");
                }

                elementList.add(localRentenart);
            }

            if (localSonstigeAusgabenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "sonstigeAusgaben"));

                if (localSonstigeAusgaben != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSonstigeAusgaben));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "sonstigeAusgaben cannot be null!!");
                }
            }

            if (localWarmmieteTracker) {
                elementList.add(new javax.xml.namespace.QName("", "warmmiete"));

                if (localWarmmiete != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWarmmiete));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "warmmiete cannot be null!!");
                }
            }

            if (localWohnnebenkostenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "wohnnebenkosten"));

                if (localWohnnebenkosten != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnnebenkosten));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnnebenkosten cannot be null!!");
                }
            }

            if (localHypothekTracker) {
                elementList.add(new javax.xml.namespace.QName("", "hypothek"));

                if (localHypothek != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHypothek));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "hypothek cannot be null!!");
                }
            }

            if (localBausparenTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bausparen"));

                if (localBausparen != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBausparen));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bausparen cannot be null!!");
                }
            }

            if (localWohnflaecheTracker) {
                elementList.add(new javax.xml.namespace.QName("", "wohnflaeche"));

                if (localWohnflaeche != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnflaeche));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnflaeche cannot be null!!");
                }
            }

            if (localLebensversicherungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "lebensversicherung"));

                if (localLebensversicherung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLebensversicherung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "lebensversicherung cannot be null!!");
                }
            }

            if (localPkvTracker) {
                elementList.add(new javax.xml.namespace.QName("", "pkv"));

                if (localPkv != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPkv));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "pkv cannot be null!!");
                }
            }

            if (localUnterhaltZahlungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "unterhaltZahlung"));

                if (localUnterhaltZahlung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localUnterhaltZahlung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "unterhaltZahlung cannot be null!!");
                }
            }

            if (localWohnartTracker) {
                elementList.add(new javax.xml.namespace.QName("", "wohnart"));

                if (localWohnart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnart cannot be null!!");
                }

                elementList.add(localWohnart);
            }

            if (localAnzHausTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anzHaus"));

                if (localAnzHaus != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzHaus));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzHaus cannot be null!!");
                }
            }

            if (localAnzEtwTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anzEtw"));

                if (localAnzEtw != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzEtw));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzEtw cannot be null!!");
                }
            }

            if (localAnzPkwTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anzPkw"));

                if (localAnzPkw != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzPkw));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzPkw cannot be null!!");
                }
            }

            if (localAnzMotorradTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anzMotorrad"));

                if (localAnzMotorrad != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzMotorrad));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzMotorrad cannot be null!!");
                }
            }

            if (localLohnsteuerklasseTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "lohnsteuerklasse"));

                if (localLohnsteuerklasse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "lohnsteuerklasse cannot be null!!");
                }

                elementList.add(localLohnsteuerklasse);
            }

            if (localKinderfreibetraegeTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kinderfreibetraege"));

                if (localKinderfreibetraege != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKinderfreibetraege));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kinderfreibetraege cannot be null!!");
                }
            }

            if (localDacBewertungTracker) {
                elementList.add(new javax.xml.namespace.QName("", "dacBewertung"));

                if (localDacBewertung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "dacBewertung cannot be null!!");
                }

                elementList.add(localDacBewertung);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EinnahmenAusgabenXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EinnahmenAusgabenXO object = new EinnahmenAusgabenXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"EinnahmenAusgabenXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EinnahmenAusgabenXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "nettoEinkommen").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nettoEinkommen" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNettoEinkommen(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "sonstigeEinnahmen").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sonstigeEinnahmen" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSonstigeEinnahmen(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "nebeneinkAngestellt").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nebeneinkAngestellt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNebeneinkAngestellt(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "nebeneinkSelbstaendig").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nebeneinkSelbstaendig" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNebeneinkSelbstaendig(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "mietEinnahmen").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "mietEinnahmen" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMietEinnahmen(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "zinsertraege").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "zinsertraege" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setZinsertraege(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "unterhaltEingang").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "unterhaltEingang" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnterhaltEingang(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kindergeld").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kindergeld" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKindergeld(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rentenbezuege").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rentenbezuege" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRentenbezuege(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rentenart").equals(
                                reader.getName())) {
                        object.setRentenart(RentenartType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "sonstigeAusgaben").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sonstigeAusgaben" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSonstigeAusgaben(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "warmmiete").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "warmmiete" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWarmmiete(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wohnnebenkosten").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "wohnnebenkosten" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWohnnebenkosten(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "hypothek").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "hypothek" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHypothek(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bausparen").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bausparen" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBausparen(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wohnflaeche").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "wohnflaeche" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWohnflaeche(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "lebensversicherung").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lebensversicherung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLebensversicherung(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "pkv").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "pkv" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPkv(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "unterhaltZahlung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "unterhaltZahlung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setUnterhaltZahlung(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wohnart").equals(
                                reader.getName())) {
                        object.setWohnart(WohnartType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anzHaus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anzHaus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnzHaus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anzEtw").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anzEtw" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnzEtw(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anzPkw").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anzPkw" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnzPkw(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anzMotorrad").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anzMotorrad" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnzMotorrad(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "lohnsteuerklasse").equals(
                                reader.getName())) {
                        object.setLohnsteuerklasse(LStKlasseType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "kinderfreibetraege").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kinderfreibetraege" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKinderfreibetraege(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "dacBewertung").equals(
                                reader.getName())) {
                        object.setDacBewertung(DacBewertungType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BrancheType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "brancheType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _DIENSTLEISTER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DIENSTLEISTER");
        public static final java.lang.String _HANDEL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HANDEL");
        public static final java.lang.String _HANDWERK = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HANDWERK");
        public static final java.lang.String _KRAFTFAHRZEUGE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KRAFTFAHRZEUGE");
        public static final java.lang.String _GASTRONOMIE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GASTRONOMIE");
        public static final java.lang.String _BAUTENSCHUTZ = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BAUTENSCHUTZ");
        public static final java.lang.String _TRANSPORTGEWERBE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TRANSPORTGEWERBE");
        public static final java.lang.String _VERSICHERUNGSGEWERBE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VERSICHERUNGSGEWERBE");
        public static final java.lang.String _SONSTIGE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SONSTIGE");
        public static final BrancheType DIENSTLEISTER = new BrancheType(_DIENSTLEISTER,
                true);
        public static final BrancheType HANDEL = new BrancheType(_HANDEL, true);
        public static final BrancheType HANDWERK = new BrancheType(_HANDWERK,
                true);
        public static final BrancheType KRAFTFAHRZEUGE = new BrancheType(_KRAFTFAHRZEUGE,
                true);
        public static final BrancheType GASTRONOMIE = new BrancheType(_GASTRONOMIE,
                true);
        public static final BrancheType BAUTENSCHUTZ = new BrancheType(_BAUTENSCHUTZ,
                true);
        public static final BrancheType TRANSPORTGEWERBE = new BrancheType(_TRANSPORTGEWERBE,
                true);
        public static final BrancheType VERSICHERUNGSGEWERBE = new BrancheType(_VERSICHERUNGSGEWERBE,
                true);
        public static final BrancheType SONSTIGE = new BrancheType(_SONSTIGE,
                true);

        /**
         * field for BrancheType
         */
        protected java.lang.String localBrancheType;

        // Constructor
        protected BrancheType(java.lang.String value, boolean isRegisterValue) {
            localBrancheType = value;

            if (isRegisterValue) {
                _table_.put(localBrancheType, this);
            }
        }

        public java.lang.String getValue() {
            return localBrancheType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localBrancheType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":brancheType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "brancheType", xmlWriter);
                }
            }

            if (localBrancheType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "brancheType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localBrancheType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBrancheType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static BrancheType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                BrancheType enumeration = (BrancheType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static BrancheType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static BrancheType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return BrancheType.Factory.fromString(content, namespaceUri);
                } else {
                    return BrancheType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BrancheType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BrancheType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "brancheType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = BrancheType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = BrancheType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditantragsstatusParams".equals(typeName)) {
                return GetKreditantragsstatusParams.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "ParameterXO".equals(typeName)) {
                return ParameterXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "anredeType".equals(typeName)) {
                return AnredeType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "berufType".equals(typeName)) {
                return BerufType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "verhaeltnisType".equals(typeName)) {
                return VerhaeltnisType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "rsvType".equals(typeName)) {
                return RsvType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "praegenameType".equals(typeName)) {
                return PraegenameType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "BeschaeftigungsverhaeltnisXO".equals(typeName)) {
                return BeschaeftigungsverhaeltnisXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "BankverbindungXO".equals(typeName)) {
                return BankverbindungXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "HinweisXO".equals(typeName)) {
                return HinweisXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "wohnartType".equals(typeName)) {
                return WohnartType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "lStKlasseType".equals(typeName)) {
                return LStKlasseType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditvertragsangebotResult".equals(typeName)) {
                return GetKreditvertragsangebotResult.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "FinanzierungXO".equals(typeName)) {
                return FinanzierungXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "kreditartType".equals(typeName)) {
                return KreditartType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "KreditantragXO".equals(typeName)) {
                return KreditantragXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "kartenproduktType".equals(typeName)) {
                return KartenproduktType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "kartenartType".equals(typeName)) {
                return KartenartType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "rateneinzugType".equals(typeName)) {
                return RateneinzugType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "landType".equals(typeName)) {
                return LandType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "antragstatusType".equals(typeName)) {
                return AntragstatusType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "KarteXO".equals(typeName)) {
                return KarteXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "rentenartType".equals(typeName)) {
                return RentenartType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditantragsstatusResult".equals(typeName)) {
                return GetKreditantragsstatusResult.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "zahlungsartType".equals(typeName)) {
                return ZahlungsartType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditvertragsangebotParams".equals(typeName)) {
                return GetKreditvertragsangebotParams.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "kontoinhaberType".equals(typeName)) {
                return KontoinhaberType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "KreditantragsstatusXO".equals(typeName)) {
                return KreditantragsstatusXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "EinnahmenAusgabenXO".equals(typeName)) {
                return EinnahmenAusgabenXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "DarlehnsnehmerXO".equals(typeName)) {
                return DarlehnsnehmerXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "AuthentisierungXO".equals(typeName)) {
                return AuthentisierungXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "dacBewertungType".equals(typeName)) {
                return DacBewertungType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "DokumentXO".equals(typeName)) {
                return DokumentXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "ExceptionXO".equals(typeName)) {
                return ExceptionXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "SachbearbeiterXO".equals(typeName)) {
                return SachbearbeiterXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "AdresseXO".equals(typeName)) {
                return AdresseXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditkonditionenParams".equals(typeName)) {
                return GetKreditkonditionenParams.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "KontoXO".equals(typeName)) {
                return KontoXO.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditvergleichsangebotResult".equals(typeName)) {
                return GetKreditvergleichsangebotResult.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "vwzType".equals(typeName)) {
                return VwzType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditvergleichsangebotParams".equals(typeName)) {
                return GetKreditvergleichsangebotParams.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "vorhandeneKartenType".equals(typeName)) {
                return VorhandeneKartenType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "GetKreditkonditionenResult".equals(typeName)) {
                return GetKreditkonditionenResult.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "familienstandType".equals(typeName)) {
                return FamilienstandType.Factory.parse(reader);
            }

            if ("http://ws.bco.caps.scb.de".equals(namespaceURI) &&
                    "brancheType".equals(typeName)) {
                return BrancheType.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class VorhandeneKartenType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "vorhandeneKartenType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _value1 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KEINE");
        public static final java.lang.String _value2 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EC_KARTE");
        public static final java.lang.String _value3 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KREDITKARTE");
        public static final java.lang.String _value4 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EC_UND KREDITKARTE");
        public static final VorhandeneKartenType value1 = new VorhandeneKartenType(_value1,
                true);
        public static final VorhandeneKartenType value2 = new VorhandeneKartenType(_value2,
                true);
        public static final VorhandeneKartenType value3 = new VorhandeneKartenType(_value3,
                true);
        public static final VorhandeneKartenType value4 = new VorhandeneKartenType(_value4,
                true);

        /**
         * field for VorhandeneKartenType
         */
        protected java.lang.String localVorhandeneKartenType;

        // Constructor
        protected VorhandeneKartenType(java.lang.String value,
            boolean isRegisterValue) {
            localVorhandeneKartenType = value;

            if (isRegisterValue) {
                _table_.put(localVorhandeneKartenType, this);
            }
        }

        public java.lang.String getValue() {
            return localVorhandeneKartenType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localVorhandeneKartenType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":vorhandeneKartenType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "vorhandeneKartenType", xmlWriter);
                }
            }

            if (localVorhandeneKartenType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "vorhandeneKartenType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localVorhandeneKartenType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localVorhandeneKartenType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static VorhandeneKartenType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                VorhandeneKartenType enumeration = (VorhandeneKartenType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static VorhandeneKartenType fromString(
                java.lang.String value, java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static VorhandeneKartenType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return VorhandeneKartenType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return VorhandeneKartenType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VorhandeneKartenType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                VorhandeneKartenType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "vorhandeneKartenType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = VorhandeneKartenType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = VorhandeneKartenType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RsvType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "rsvType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _OHNE_RSV = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "OHNE_RSV");
        public static final java.lang.String _TOD = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TOD");
        public static final java.lang.String _TOD_AU = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TOD_AU");
        public static final java.lang.String _TOD_AU_AL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TOD_AU_AL");
        public static final RsvType OHNE_RSV = new RsvType(_OHNE_RSV, true);
        public static final RsvType TOD = new RsvType(_TOD, true);
        public static final RsvType TOD_AU = new RsvType(_TOD_AU, true);
        public static final RsvType TOD_AU_AL = new RsvType(_TOD_AU_AL, true);

        /**
         * field for RsvType
         */
        protected java.lang.String localRsvType;

        // Constructor
        protected RsvType(java.lang.String value, boolean isRegisterValue) {
            localRsvType = value;

            if (isRegisterValue) {
                _table_.put(localRsvType, this);
            }
        }

        public java.lang.String getValue() {
            return localRsvType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localRsvType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":rsvType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "rsvType", xmlWriter);
                }
            }

            if (localRsvType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "rsvType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localRsvType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRsvType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static RsvType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                RsvType enumeration = (RsvType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static RsvType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static RsvType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return RsvType.Factory.fromString(content, namespaceUri);
                } else {
                    return RsvType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RsvType parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RsvType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "rsvType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = RsvType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = RsvType.Factory.fromString(content, "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DokumentXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DokumentXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Name
         */
        protected java.lang.String localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Beschreibung
         */
        protected java.lang.String localBeschreibung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBeschreibungTracker = false;

        /**
         * field for Dokument
         */
        protected javax.activation.DataHandler localDokument;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDokumentTracker = false;

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            localNameTracker = param != null;

            this.localName = param;
        }

        public boolean isBeschreibungSpecified() {
            return localBeschreibungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBeschreibung() {
            return localBeschreibung;
        }

        /**
         * Auto generated setter method
         * @param param Beschreibung
         */
        public void setBeschreibung(java.lang.String param) {
            localBeschreibungTracker = param != null;

            this.localBeschreibung = param;
        }

        public boolean isDokumentSpecified() {
            return localDokumentTracker;
        }

        /**
         * Auto generated getter method
         * @return javax.activation.DataHandler
         */
        public javax.activation.DataHandler getDokument() {
            return localDokument;
        }

        /**
         * Auto generated setter method
         * @param param Dokument
         */
        public void setDokument(javax.activation.DataHandler param) {
            localDokumentTracker = param != null;

            this.localDokument = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DokumentXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DokumentXO", xmlWriter);
                }
            }

            if (localNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localName);
                }

                xmlWriter.writeEndElement();
            }

            if (localBeschreibungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "beschreibung", xmlWriter);

                if (localBeschreibung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschreibung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBeschreibung);
                }

                xmlWriter.writeEndElement();
            }

            if (localDokumentTracker) {
                namespace = "";
                writeStartElement(null, namespace, "dokument", xmlWriter);

                if (localDokument != null) {
                    try {
                        org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter,
                            localDokument, null, true);
                    } catch (java.io.IOException ex) {
                        throw new javax.xml.stream.XMLStreamException("Unable to read data handler for dokument",
                            ex);
                    }
                } else {
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localNameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "name"));

                if (localName != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localName));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                }
            }

            if (localBeschreibungTracker) {
                elementList.add(new javax.xml.namespace.QName("", "beschreibung"));

                if (localBeschreibung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBeschreibung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "beschreibung cannot be null!!");
                }
            }

            if (localDokumentTracker) {
                elementList.add(new javax.xml.namespace.QName("", "dokument"));

                elementList.add(localDokument);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DokumentXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DokumentXO object = new DokumentXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DokumentXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DokumentXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "name").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "beschreibung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "beschreibung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBeschreibung(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "dokument").equals(
                                reader.getName())) {
                        object.setDokument(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SachbearbeiterXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = SachbearbeiterXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Anrede
         */
        protected java.lang.String localAnrede;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnredeTracker = false;

        /**
         * field for Name
         */
        protected java.lang.String localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Vorname
         */
        protected java.lang.String localVorname;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVornameTracker = false;

        /**
         * field for Telefon
         */
        protected java.lang.String localTelefon;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTelefonTracker = false;

        /**
         * field for Fax
         */
        protected java.lang.String localFax;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFaxTracker = false;

        /**
         * field for Email
         */
        protected java.lang.String localEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTracker = false;

        /**
         * field for Id
         */
        protected java.lang.String localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        public boolean isAnredeSpecified() {
            return localAnredeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAnrede() {
            return localAnrede;
        }

        /**
         * Auto generated setter method
         * @param param Anrede
         */
        public void setAnrede(java.lang.String param) {
            localAnredeTracker = param != null;

            this.localAnrede = param;
        }

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            localNameTracker = param != null;

            this.localName = param;
        }

        public boolean isVornameSpecified() {
            return localVornameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVorname() {
            return localVorname;
        }

        /**
         * Auto generated setter method
         * @param param Vorname
         */
        public void setVorname(java.lang.String param) {
            localVornameTracker = param != null;

            this.localVorname = param;
        }

        public boolean isTelefonSpecified() {
            return localTelefonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTelefon() {
            return localTelefon;
        }

        /**
         * Auto generated setter method
         * @param param Telefon
         */
        public void setTelefon(java.lang.String param) {
            localTelefonTracker = param != null;

            this.localTelefon = param;
        }

        public boolean isFaxSpecified() {
            return localFaxTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFax() {
            return localFax;
        }

        /**
         * Auto generated setter method
         * @param param Fax
         */
        public void setFax(java.lang.String param) {
            localFaxTracker = param != null;

            this.localFax = param;
        }

        public boolean isEmailSpecified() {
            return localEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmail() {
            return localEmail;
        }

        /**
         * Auto generated setter method
         * @param param Email
         */
        public void setEmail(java.lang.String param) {
            localEmailTracker = param != null;

            this.localEmail = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(java.lang.String param) {
            localIdTracker = param != null;

            this.localId = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":SachbearbeiterXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "SachbearbeiterXO", xmlWriter);
                }
            }

            if (localAnredeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anrede", xmlWriter);

                if (localAnrede == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anrede cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localAnrede);
                }

                xmlWriter.writeEndElement();
            }

            if (localNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localName);
                }

                xmlWriter.writeEndElement();
            }

            if (localVornameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "vorname", xmlWriter);

                if (localVorname == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorname cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVorname);
                }

                xmlWriter.writeEndElement();
            }

            if (localTelefonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "telefon", xmlWriter);

                if (localTelefon == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "telefon cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTelefon);
                }

                xmlWriter.writeEndElement();
            }

            if (localFaxTracker) {
                namespace = "";
                writeStartElement(null, namespace, "fax", xmlWriter);

                if (localFax == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "fax cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localFax);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "email", xmlWriter);

                if (localEmail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "email cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEmail);
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localId);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAnredeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anrede"));

                if (localAnrede != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnrede));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anrede cannot be null!!");
                }
            }

            if (localNameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "name"));

                if (localName != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localName));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                }
            }

            if (localVornameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "vorname"));

                if (localVorname != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVorname));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorname cannot be null!!");
                }
            }

            if (localTelefonTracker) {
                elementList.add(new javax.xml.namespace.QName("", "telefon"));

                if (localTelefon != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTelefon));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "telefon cannot be null!!");
                }
            }

            if (localFaxTracker) {
                elementList.add(new javax.xml.namespace.QName("", "fax"));

                if (localFax != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFax));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "fax cannot be null!!");
                }
            }

            if (localEmailTracker) {
                elementList.add(new javax.xml.namespace.QName("", "email"));

                if (localEmail != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmail));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "email cannot be null!!");
                }
            }

            if (localIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "id"));

                if (localId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SachbearbeiterXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SachbearbeiterXO object = new SachbearbeiterXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"SachbearbeiterXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SachbearbeiterXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anrede").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anrede" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnrede(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "name").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vorname").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "vorname" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVorname(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "telefon").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "telefon" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTelefon(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "fax").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "fax" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFax(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "email").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "email" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "id").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditkonditionenParams implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditkonditionenParams
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Authentisierung
         */
        protected AuthentisierungXO localAuthentisierung;

        /**
         * field for KreditkonditionenParams
         */
        protected FinanzierungXO localKreditkonditionenParams;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditkonditionenParamsTracker = false;

        /**
         * Auto generated getter method
         * @return AuthentisierungXO
         */
        public AuthentisierungXO getAuthentisierung() {
            return localAuthentisierung;
        }

        /**
         * Auto generated setter method
         * @param param Authentisierung
         */
        public void setAuthentisierung(AuthentisierungXO param) {
            this.localAuthentisierung = param;
        }

        public boolean isKreditkonditionenParamsSpecified() {
            return localKreditkonditionenParamsTracker;
        }

        /**
         * Auto generated getter method
         * @return FinanzierungXO
         */
        public FinanzierungXO getKreditkonditionenParams() {
            return localKreditkonditionenParams;
        }

        /**
         * Auto generated setter method
         * @param param KreditkonditionenParams
         */
        public void setKreditkonditionenParams(FinanzierungXO param) {
            localKreditkonditionenParamsTracker = param != null;

            this.localKreditkonditionenParams = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditkonditionenParams",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditkonditionenParams", xmlWriter);
                }
            }

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            localAuthentisierung.serialize(new javax.xml.namespace.QName("",
                    "authentisierung"), xmlWriter);

            if (localKreditkonditionenParamsTracker) {
                if (localKreditkonditionenParams == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditkonditionenParams cannot be null!!");
                }

                localKreditkonditionenParams.serialize(new javax.xml.namespace.QName(
                        "", "kreditkonditionenParams"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            elementList.add(new javax.xml.namespace.QName("", "authentisierung"));

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            elementList.add(localAuthentisierung);

            if (localKreditkonditionenParamsTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kreditkonditionenParams"));

                if (localKreditkonditionenParams == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditkonditionenParams cannot be null!!");
                }

                elementList.add(localKreditkonditionenParams);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditkonditionenParams parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditkonditionenParams object = new GetKreditkonditionenParams();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditkonditionenParams".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditkonditionenParams) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "authentisierung").equals(
                                reader.getName())) {
                        object.setAuthentisierung(AuthentisierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "kreditkonditionenParams").equals(
                                reader.getName())) {
                        object.setKreditkonditionenParams(FinanzierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class VerhaeltnisType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "verhaeltnisType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _EHEPARTNER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EHEPARTNER");
        public static final java.lang.String _LEBENSGEFAEHRTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "LEBENSGEFAEHRTE");
        public static final java.lang.String _SONSTIGES = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SONSTIGES");
        public static final VerhaeltnisType EHEPARTNER = new VerhaeltnisType(_EHEPARTNER,
                true);
        public static final VerhaeltnisType LEBENSGEFAEHRTE = new VerhaeltnisType(_LEBENSGEFAEHRTE,
                true);
        public static final VerhaeltnisType SONSTIGES = new VerhaeltnisType(_SONSTIGES,
                true);

        /**
         * field for VerhaeltnisType
         */
        protected java.lang.String localVerhaeltnisType;

        // Constructor
        protected VerhaeltnisType(java.lang.String value,
            boolean isRegisterValue) {
            localVerhaeltnisType = value;

            if (isRegisterValue) {
                _table_.put(localVerhaeltnisType, this);
            }
        }

        public java.lang.String getValue() {
            return localVerhaeltnisType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localVerhaeltnisType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":verhaeltnisType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "verhaeltnisType", xmlWriter);
                }
            }

            if (localVerhaeltnisType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "verhaeltnisType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localVerhaeltnisType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localVerhaeltnisType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static VerhaeltnisType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                VerhaeltnisType enumeration = (VerhaeltnisType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static VerhaeltnisType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static VerhaeltnisType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return VerhaeltnisType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return VerhaeltnisType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VerhaeltnisType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                VerhaeltnisType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "verhaeltnisType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = VerhaeltnisType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = VerhaeltnisType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AntragstatusType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "antragstatusType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _IN_BEARBEITUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "IN_BEARBEITUNG");
        public static final java.lang.String _GENEHMIGT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GENEHMIGT");
        public static final java.lang.String _ABGELEHNT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ABGELEHNT");
        public static final java.lang.String _ABGESCHLOSSEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ABGESCHLOSSEN");
        public static final java.lang.String _ZURUECKGESTELLT_DOKUMENTE_FEHLEND = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ZURUECKGESTELLT_DOKUMENTE_FEHLEND");
        public static final java.lang.String _ZURUECKGESTELLT_DOKUMENTE_ERHALTEN =
            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ZURUECKGESTELLT_DOKUMENTE_ERHALTEN");
        public static final java.lang.String _ZURUECKGESTELLT_SONSTIGES = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ZURUECKGESTELLT_SONSTIGES");
        public static final java.lang.String _STORNIERT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "STORNIERT");
        public static final AntragstatusType IN_BEARBEITUNG = new AntragstatusType(_IN_BEARBEITUNG,
                true);
        public static final AntragstatusType GENEHMIGT = new AntragstatusType(_GENEHMIGT,
                true);
        public static final AntragstatusType ABGELEHNT = new AntragstatusType(_ABGELEHNT,
                true);
        public static final AntragstatusType ABGESCHLOSSEN = new AntragstatusType(_ABGESCHLOSSEN,
                true);
        public static final AntragstatusType ZURUECKGESTELLT_DOKUMENTE_FEHLEND = new AntragstatusType(_ZURUECKGESTELLT_DOKUMENTE_FEHLEND,
                true);
        public static final AntragstatusType ZURUECKGESTELLT_DOKUMENTE_ERHALTEN = new AntragstatusType(_ZURUECKGESTELLT_DOKUMENTE_ERHALTEN,
                true);
        public static final AntragstatusType ZURUECKGESTELLT_SONSTIGES = new AntragstatusType(_ZURUECKGESTELLT_SONSTIGES,
                true);
        public static final AntragstatusType STORNIERT = new AntragstatusType(_STORNIERT,
                true);

        /**
         * field for AntragstatusType
         */
        protected java.lang.String localAntragstatusType;

        // Constructor
        protected AntragstatusType(java.lang.String value,
            boolean isRegisterValue) {
            localAntragstatusType = value;

            if (isRegisterValue) {
                _table_.put(localAntragstatusType, this);
            }
        }

        public java.lang.String getValue() {
            return localAntragstatusType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localAntragstatusType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":antragstatusType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "antragstatusType", xmlWriter);
                }
            }

            if (localAntragstatusType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "antragstatusType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localAntragstatusType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAntragstatusType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static AntragstatusType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                AntragstatusType enumeration = (AntragstatusType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static AntragstatusType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static AntragstatusType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return AntragstatusType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return AntragstatusType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AntragstatusType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AntragstatusType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "antragstatusType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = AntragstatusType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = AntragstatusType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KontoXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = KontoXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Kreditart
         */
        protected KreditartType localKreditart;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditartTracker = false;

        /**
         * field for Kreditbetrag
         */
        protected java.math.BigDecimal localKreditbetrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditbetragTracker = false;

        /**
         * field for Dispolimit
         */
        protected java.math.BigDecimal localDispolimit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDispolimitTracker = false;

        /**
         * field for Rahmen
         */
        protected java.math.BigDecimal localRahmen;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRahmenTracker = false;

        /**
         * field for Ratenbetrag
         */
        protected java.math.BigDecimal localRatenbetrag;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRatenbetragTracker = false;

        /**
         * field for DatumLetzteRate
         */
        protected java.util.Date localDatumLetzteRate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDatumLetzteRateTracker = false;

        /**
         * field for DatumEroeffnung
         */
        protected java.util.Date localDatumEroeffnung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDatumEroeffnungTracker = false;

        /**
         * field for AbloesungErwuenscht
         */
        protected boolean localAbloesungErwuenscht;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAbloesungErwuenschtTracker = false;

        /**
         * field for RestsaldoBrutto
         */
        protected java.math.BigDecimal localRestsaldoBrutto;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRestsaldoBruttoTracker = false;

        /**
         * field for Kontonr
         */
        protected java.lang.String localKontonr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKontonrTracker = false;

        /**
         * field for Blz
         */
        protected java.lang.String localBlz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBlzTracker = false;

        /**
         * field for Iban
         */
        protected java.lang.String localIban;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIbanTracker = false;

        /**
         * field for Bic
         */
        protected java.lang.String localBic;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBicTracker = false;

        /**
         * field for Bank
         */
        protected java.lang.String localBank;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankTracker = false;

        public boolean isKreditartSpecified() {
            return localKreditartTracker;
        }

        /**
         * Auto generated getter method
         * @return KreditartType
         */
        public KreditartType getKreditart() {
            return localKreditart;
        }

        /**
         * Auto generated setter method
         * @param param Kreditart
         */
        public void setKreditart(KreditartType param) {
            localKreditartTracker = param != null;

            this.localKreditart = param;
        }

        public boolean isKreditbetragSpecified() {
            return localKreditbetragTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getKreditbetrag() {
            return localKreditbetrag;
        }

        /**
         * Auto generated setter method
         * @param param Kreditbetrag
         */
        public void setKreditbetrag(java.math.BigDecimal param) {
            localKreditbetragTracker = param != null;

            this.localKreditbetrag = param;
        }

        public boolean isDispolimitSpecified() {
            return localDispolimitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDispolimit() {
            return localDispolimit;
        }

        /**
         * Auto generated setter method
         * @param param Dispolimit
         */
        public void setDispolimit(java.math.BigDecimal param) {
            localDispolimitTracker = param != null;

            this.localDispolimit = param;
        }

        public boolean isRahmenSpecified() {
            return localRahmenTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRahmen() {
            return localRahmen;
        }

        /**
         * Auto generated setter method
         * @param param Rahmen
         */
        public void setRahmen(java.math.BigDecimal param) {
            localRahmenTracker = param != null;

            this.localRahmen = param;
        }

        public boolean isRatenbetragSpecified() {
            return localRatenbetragTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRatenbetrag() {
            return localRatenbetrag;
        }

        /**
         * Auto generated setter method
         * @param param Ratenbetrag
         */
        public void setRatenbetrag(java.math.BigDecimal param) {
            localRatenbetragTracker = param != null;

            this.localRatenbetrag = param;
        }

        public boolean isDatumLetzteRateSpecified() {
            return localDatumLetzteRateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDatumLetzteRate() {
            return localDatumLetzteRate;
        }

        /**
         * Auto generated setter method
         * @param param DatumLetzteRate
         */
        public void setDatumLetzteRate(java.util.Date param) {
            localDatumLetzteRateTracker = param != null;

            this.localDatumLetzteRate = param;
        }

        public boolean isDatumEroeffnungSpecified() {
            return localDatumEroeffnungTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDatumEroeffnung() {
            return localDatumEroeffnung;
        }

        /**
         * Auto generated setter method
         * @param param DatumEroeffnung
         */
        public void setDatumEroeffnung(java.util.Date param) {
            localDatumEroeffnungTracker = param != null;

            this.localDatumEroeffnung = param;
        }

        public boolean isAbloesungErwuenschtSpecified() {
            return localAbloesungErwuenschtTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAbloesungErwuenscht() {
            return localAbloesungErwuenscht;
        }

        /**
         * Auto generated setter method
         * @param param AbloesungErwuenscht
         */
        public void setAbloesungErwuenscht(boolean param) {
            // setting primitive attribute tracker to true
            localAbloesungErwuenschtTracker = true;

            this.localAbloesungErwuenscht = param;
        }

        public boolean isRestsaldoBruttoSpecified() {
            return localRestsaldoBruttoTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getRestsaldoBrutto() {
            return localRestsaldoBrutto;
        }

        /**
         * Auto generated setter method
         * @param param RestsaldoBrutto
         */
        public void setRestsaldoBrutto(java.math.BigDecimal param) {
            localRestsaldoBruttoTracker = param != null;

            this.localRestsaldoBrutto = param;
        }

        public boolean isKontonrSpecified() {
            return localKontonrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKontonr() {
            return localKontonr;
        }

        /**
         * Auto generated setter method
         * @param param Kontonr
         */
        public void setKontonr(java.lang.String param) {
            localKontonrTracker = param != null;

            this.localKontonr = param;
        }

        public boolean isBlzSpecified() {
            return localBlzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBlz() {
            return localBlz;
        }

        /**
         * Auto generated setter method
         * @param param Blz
         */
        public void setBlz(java.lang.String param) {
            localBlzTracker = param != null;

            this.localBlz = param;
        }

        public boolean isIbanSpecified() {
            return localIbanTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIban() {
            return localIban;
        }

        /**
         * Auto generated setter method
         * @param param Iban
         */
        public void setIban(java.lang.String param) {
            localIbanTracker = param != null;

            this.localIban = param;
        }

        public boolean isBicSpecified() {
            return localBicTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBic() {
            return localBic;
        }

        /**
         * Auto generated setter method
         * @param param Bic
         */
        public void setBic(java.lang.String param) {
            localBicTracker = param != null;

            this.localBic = param;
        }

        public boolean isBankSpecified() {
            return localBankTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBank() {
            return localBank;
        }

        /**
         * Auto generated setter method
         * @param param Bank
         */
        public void setBank(java.lang.String param) {
            localBankTracker = param != null;

            this.localBank = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":KontoXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "KontoXO", xmlWriter);
                }
            }

            if (localKreditartTracker) {
                if (localKreditart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditart cannot be null!!");
                }

                localKreditart.serialize(new javax.xml.namespace.QName("",
                        "kreditart"), xmlWriter);
            }

            if (localKreditbetragTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kreditbetrag", xmlWriter);

                if (localKreditbetrag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetrag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetrag));
                }

                xmlWriter.writeEndElement();
            }

            if (localDispolimitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "dispolimit", xmlWriter);

                if (localDispolimit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "dispolimit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDispolimit));
                }

                xmlWriter.writeEndElement();
            }

            if (localRahmenTracker) {
                namespace = "";
                writeStartElement(null, namespace, "rahmen", xmlWriter);

                if (localRahmen == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "rahmen cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRahmen));
                }

                xmlWriter.writeEndElement();
            }

            if (localRatenbetragTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ratenbetrag", xmlWriter);

                if (localRatenbetrag == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ratenbetrag cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRatenbetrag));
                }

                xmlWriter.writeEndElement();
            }

            if (localDatumLetzteRateTracker) {
                namespace = "";
                writeStartElement(null, namespace, "datumLetzteRate", xmlWriter);

                if (localDatumLetzteRate == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "datumLetzteRate cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDatumLetzteRate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDatumEroeffnungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "datumEroeffnung", xmlWriter);

                if (localDatumEroeffnung == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "datumEroeffnung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDatumEroeffnung));
                }

                xmlWriter.writeEndElement();
            }

            if (localAbloesungErwuenschtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "abloesungErwuenscht",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "abloesungErwuenscht cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAbloesungErwuenscht));
                }

                xmlWriter.writeEndElement();
            }

            if (localRestsaldoBruttoTracker) {
                namespace = "";
                writeStartElement(null, namespace, "restsaldoBrutto", xmlWriter);

                if (localRestsaldoBrutto == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "restsaldoBrutto cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRestsaldoBrutto));
                }

                xmlWriter.writeEndElement();
            }

            if (localKontonrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kontonr", xmlWriter);

                if (localKontonr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKontonr);
                }

                xmlWriter.writeEndElement();
            }

            if (localBlzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "blz", xmlWriter);

                if (localBlz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "blz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBlz);
                }

                xmlWriter.writeEndElement();
            }

            if (localIbanTracker) {
                namespace = "";
                writeStartElement(null, namespace, "iban", xmlWriter);

                if (localIban == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "iban cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localIban);
                }

                xmlWriter.writeEndElement();
            }

            if (localBicTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bic", xmlWriter);

                if (localBic == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bic cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBic);
                }

                xmlWriter.writeEndElement();
            }

            if (localBankTracker) {
                namespace = "";
                writeStartElement(null, namespace, "bank", xmlWriter);

                if (localBank == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBank);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localKreditartTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kreditart"));

                if (localKreditart == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditart cannot be null!!");
                }

                elementList.add(localKreditart);
            }

            if (localKreditbetragTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kreditbetrag"));

                if (localKreditbetrag != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKreditbetrag));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditbetrag cannot be null!!");
                }
            }

            if (localDispolimitTracker) {
                elementList.add(new javax.xml.namespace.QName("", "dispolimit"));

                if (localDispolimit != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDispolimit));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "dispolimit cannot be null!!");
                }
            }

            if (localRahmenTracker) {
                elementList.add(new javax.xml.namespace.QName("", "rahmen"));

                if (localRahmen != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRahmen));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rahmen cannot be null!!");
                }
            }

            if (localRatenbetragTracker) {
                elementList.add(new javax.xml.namespace.QName("", "ratenbetrag"));

                if (localRatenbetrag != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRatenbetrag));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ratenbetrag cannot be null!!");
                }
            }

            if (localDatumLetzteRateTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "datumLetzteRate"));

                if (localDatumLetzteRate != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDatumLetzteRate));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "datumLetzteRate cannot be null!!");
                }
            }

            if (localDatumEroeffnungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "datumEroeffnung"));

                if (localDatumEroeffnung != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDatumEroeffnung));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "datumEroeffnung cannot be null!!");
                }
            }

            if (localAbloesungErwuenschtTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "abloesungErwuenscht"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAbloesungErwuenscht));
            }

            if (localRestsaldoBruttoTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "restsaldoBrutto"));

                if (localRestsaldoBrutto != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRestsaldoBrutto));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "restsaldoBrutto cannot be null!!");
                }
            }

            if (localKontonrTracker) {
                elementList.add(new javax.xml.namespace.QName("", "kontonr"));

                if (localKontonr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKontonr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kontonr cannot be null!!");
                }
            }

            if (localBlzTracker) {
                elementList.add(new javax.xml.namespace.QName("", "blz"));

                if (localBlz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBlz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "blz cannot be null!!");
                }
            }

            if (localIbanTracker) {
                elementList.add(new javax.xml.namespace.QName("", "iban"));

                if (localIban != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIban));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "iban cannot be null!!");
                }
            }

            if (localBicTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bic"));

                if (localBic != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBic));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bic cannot be null!!");
                }
            }

            if (localBankTracker) {
                elementList.add(new javax.xml.namespace.QName("", "bank"));

                if (localBank != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBank));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bank cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KontoXO parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KontoXO object = new KontoXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"KontoXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (KontoXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kreditart").equals(
                                reader.getName())) {
                        object.setKreditart(KreditartType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kreditbetrag").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kreditbetrag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKreditbetrag(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "dispolimit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "dispolimit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDispolimit(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "rahmen").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rahmen" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRahmen(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ratenbetrag").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ratenbetrag" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRatenbetrag(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "datumLetzteRate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "datumLetzteRate" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDatumLetzteRate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "datumEroeffnung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "datumEroeffnung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDatumEroeffnung(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "abloesungErwuenscht").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "abloesungErwuenscht" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAbloesungErwuenscht(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "restsaldoBrutto").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "restsaldoBrutto" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRestsaldoBrutto(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kontonr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kontonr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKontonr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "blz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "blz" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBlz(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "iban").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "iban" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIban(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bic").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bic" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBic(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bank").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "bank" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBank(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvergleichsangebotParams implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditvergleichsangebotParams
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Authentisierung
         */
        protected AuthentisierungXO localAuthentisierung;

        /**
         * field for Kreditantrag
         */
        protected KreditantragXO localKreditantrag;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        /**
         * Auto generated getter method
         * @return AuthentisierungXO
         */
        public AuthentisierungXO getAuthentisierung() {
            return localAuthentisierung;
        }

        /**
         * Auto generated setter method
         * @param param Authentisierung
         */
        public void setAuthentisierung(AuthentisierungXO param) {
            this.localAuthentisierung = param;
        }

        /**
         * Auto generated getter method
         * @return KreditantragXO
         */
        public KreditantragXO getKreditantrag() {
            return localKreditantrag;
        }

        /**
         * Auto generated setter method
         * @param param Kreditantrag
         */
        public void setKreditantrag(KreditantragXO param) {
            this.localKreditantrag = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditvergleichsangebotParams",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditvergleichsangebotParams", xmlWriter);
                }
            }

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            localAuthentisierung.serialize(new javax.xml.namespace.QName("",
                    "authentisierung"), xmlWriter);

            if (localKreditantrag == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kreditantrag cannot be null!!");
            }

            localKreditantrag.serialize(new javax.xml.namespace.QName("",
                    "kreditantrag"), xmlWriter);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            elementList.add(new javax.xml.namespace.QName("", "authentisierung"));

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            elementList.add(localAuthentisierung);

            elementList.add(new javax.xml.namespace.QName("", "kreditantrag"));

            if (localKreditantrag == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kreditantrag cannot be null!!");
            }

            elementList.add(localKreditantrag);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvergleichsangebotParams parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvergleichsangebotParams object = new GetKreditvergleichsangebotParams();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditvergleichsangebotParams".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditvergleichsangebotParams) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "authentisierung").equals(
                                reader.getName())) {
                        object.setAuthentisierung(AuthentisierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kreditantrag").equals(
                                reader.getName())) {
                        object.setKreditantrag(KreditantragXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list3.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list3.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KontoinhaberType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "kontoinhaberType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _DN1 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DN1");
        public static final java.lang.String _DN2 = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DN2");
        public static final KontoinhaberType DN1 = new KontoinhaberType(_DN1,
                true);
        public static final KontoinhaberType DN2 = new KontoinhaberType(_DN2,
                true);

        /**
         * field for KontoinhaberType
         */
        protected java.lang.String localKontoinhaberType;

        // Constructor
        protected KontoinhaberType(java.lang.String value,
            boolean isRegisterValue) {
            localKontoinhaberType = value;

            if (isRegisterValue) {
                _table_.put(localKontoinhaberType, this);
            }
        }

        public java.lang.String getValue() {
            return localKontoinhaberType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localKontoinhaberType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":kontoinhaberType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "kontoinhaberType", xmlWriter);
                }
            }

            if (localKontoinhaberType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kontoinhaberType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localKontoinhaberType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localKontoinhaberType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static KontoinhaberType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                KontoinhaberType enumeration = (KontoinhaberType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static KontoinhaberType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static KontoinhaberType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return KontoinhaberType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return KontoinhaberType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KontoinhaberType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KontoinhaberType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "kontoinhaberType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = KontoinhaberType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = KontoinhaberType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ParameterXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ParameterXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Key
         */
        protected java.lang.String localKey;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKeyTracker = false;

        /**
         * field for Value
         */
        protected java.lang.String localValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValueTracker = false;

        public boolean isKeySpecified() {
            return localKeyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getKey() {
            return localKey;
        }

        /**
         * Auto generated setter method
         * @param param Key
         */
        public void setKey(java.lang.String param) {
            localKeyTracker = param != null;

            this.localKey = param;
        }

        public boolean isValueSpecified() {
            return localValueTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getValue() {
            return localValue;
        }

        /**
         * Auto generated setter method
         * @param param Value
         */
        public void setValue(java.lang.String param) {
            localValueTracker = param != null;

            this.localValue = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ParameterXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ParameterXO", xmlWriter);
                }
            }

            if (localKeyTracker) {
                namespace = "";
                writeStartElement(null, namespace, "key", xmlWriter);

                if (localKey == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "key cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localKey);
                }

                xmlWriter.writeEndElement();
            }

            if (localValueTracker) {
                namespace = "";
                writeStartElement(null, namespace, "value", xmlWriter);

                if (localValue == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "value cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localValue);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localKeyTracker) {
                elementList.add(new javax.xml.namespace.QName("", "key"));

                if (localKey != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKey));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "key cannot be null!!");
                }
            }

            if (localValueTracker) {
                elementList.add(new javax.xml.namespace.QName("", "value"));

                if (localValue != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localValue));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "value cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ParameterXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ParameterXO object = new ParameterXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ParameterXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ParameterXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "key").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "key" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "value").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "value" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KartenproduktType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "kartenproduktType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _EINSPLUS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EINSPLUS");
        public static final java.lang.String _SANTANDER_FERRARI = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SANTANDER_FERRARI");
        public static final java.lang.String _SUNNY = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SUNNY");
        public static final java.lang.String _TRAVEL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "TRAVEL");
        public static final java.lang.String _XITE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "XITE");
        public static final KartenproduktType EINSPLUS = new KartenproduktType(_EINSPLUS,
                true);
        public static final KartenproduktType SANTANDER_FERRARI = new KartenproduktType(_SANTANDER_FERRARI,
                true);
        public static final KartenproduktType SUNNY = new KartenproduktType(_SUNNY,
                true);
        public static final KartenproduktType TRAVEL = new KartenproduktType(_TRAVEL,
                true);
        public static final KartenproduktType XITE = new KartenproduktType(_XITE,
                true);

        /**
         * field for KartenproduktType
         */
        protected java.lang.String localKartenproduktType;

        // Constructor
        protected KartenproduktType(java.lang.String value,
            boolean isRegisterValue) {
            localKartenproduktType = value;

            if (isRegisterValue) {
                _table_.put(localKartenproduktType, this);
            }
        }

        public java.lang.String getValue() {
            return localKartenproduktType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localKartenproduktType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":kartenproduktType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "kartenproduktType", xmlWriter);
                }
            }

            if (localKartenproduktType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kartenproduktType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localKartenproduktType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localKartenproduktType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static KartenproduktType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                KartenproduktType enumeration = (KartenproduktType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static KartenproduktType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static KartenproduktType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return KartenproduktType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return KartenproduktType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KartenproduktType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KartenproduktType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "kartenproduktType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = KartenproduktType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = KartenproduktType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RateneinzugType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "rateneinzugType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _ERSTER_EINES_MONATS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ERSTER_EINES_MONATS");
        public static final java.lang.String _FUENFZEHNTER_EINES_MONATS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FUENFZEHNTER_EINES_MONATS");
        public static final RateneinzugType ERSTER_EINES_MONATS = new RateneinzugType(_ERSTER_EINES_MONATS,
                true);
        public static final RateneinzugType FUENFZEHNTER_EINES_MONATS = new RateneinzugType(_FUENFZEHNTER_EINES_MONATS,
                true);

        /**
         * field for RateneinzugType
         */
        protected java.lang.String localRateneinzugType;

        // Constructor
        protected RateneinzugType(java.lang.String value,
            boolean isRegisterValue) {
            localRateneinzugType = value;

            if (isRegisterValue) {
                _table_.put(localRateneinzugType, this);
            }
        }

        public java.lang.String getValue() {
            return localRateneinzugType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localRateneinzugType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":rateneinzugType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "rateneinzugType", xmlWriter);
                }
            }

            if (localRateneinzugType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "rateneinzugType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localRateneinzugType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRateneinzugType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static RateneinzugType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                RateneinzugType enumeration = (RateneinzugType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static RateneinzugType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static RateneinzugType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return RateneinzugType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return RateneinzugType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RateneinzugType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RateneinzugType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "rateneinzugType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = RateneinzugType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = RateneinzugType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class HinweisXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = HinweisXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Typ
         */
        protected java.math.BigInteger localTyp;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypTracker = false;

        /**
         * field for Text
         */
        protected java.lang.String localText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;

        public boolean isTypSpecified() {
            return localTypTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getTyp() {
            return localTyp;
        }

        /**
         * Auto generated setter method
         * @param param Typ
         */
        public void setTyp(java.math.BigInteger param) {
            localTypTracker = param != null;

            this.localTyp = param;
        }

        public boolean isTextSpecified() {
            return localTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText() {
            return localText;
        }

        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param) {
            localTextTracker = param != null;

            this.localText = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":HinweisXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "HinweisXO", xmlWriter);
                }
            }

            if (localTypTracker) {
                namespace = "";
                writeStartElement(null, namespace, "typ", xmlWriter);

                if (localTyp == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "typ cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTyp));
                }

                xmlWriter.writeEndElement();
            }

            if (localTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "text", xmlWriter);

                if (localText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "text cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localText);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localTypTracker) {
                elementList.add(new javax.xml.namespace.QName("", "typ"));

                if (localTyp != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTyp));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "typ cannot be null!!");
                }
            }

            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("", "text"));

                if (localText != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localText));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "text cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static HinweisXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                HinweisXO object = new HinweisXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"HinweisXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (HinweisXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "typ").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "typ" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTyp(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "text").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "text" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class FamilienstandType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "familienstandType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _LEDIG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "LEDIG");
        public static final java.lang.String _VERHEIRATET = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VERHEIRATET");
        public static final java.lang.String _GESCHIEDEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GESCHIEDEN");
        public static final java.lang.String _VERWITWET = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VERWITWET");
        public static final java.lang.String _VERPARTNERT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VERPARTNERT");
        public static final java.lang.String _GETRENNT_LEBEND = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GETRENNT_LEBEND");
        public static final java.lang.String _UNBEKANNT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UNBEKANNT");
        public static final FamilienstandType LEDIG = new FamilienstandType(_LEDIG,
                true);
        public static final FamilienstandType VERHEIRATET = new FamilienstandType(_VERHEIRATET,
                true);
        public static final FamilienstandType GESCHIEDEN = new FamilienstandType(_GESCHIEDEN,
                true);
        public static final FamilienstandType VERWITWET = new FamilienstandType(_VERWITWET,
                true);
        public static final FamilienstandType VERPARTNERT = new FamilienstandType(_VERPARTNERT,
                true);
        public static final FamilienstandType GETRENNT_LEBEND = new FamilienstandType(_GETRENNT_LEBEND,
                true);
        public static final FamilienstandType UNBEKANNT = new FamilienstandType(_UNBEKANNT,
                true);

        /**
         * field for FamilienstandType
         */
        protected java.lang.String localFamilienstandType;

        // Constructor
        protected FamilienstandType(java.lang.String value,
            boolean isRegisterValue) {
            localFamilienstandType = value;

            if (isRegisterValue) {
                _table_.put(localFamilienstandType, this);
            }
        }

        public java.lang.String getValue() {
            return localFamilienstandType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localFamilienstandType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":familienstandType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "familienstandType", xmlWriter);
                }
            }

            if (localFamilienstandType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "familienstandType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localFamilienstandType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFamilienstandType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static FamilienstandType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                FamilienstandType enumeration = (FamilienstandType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static FamilienstandType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static FamilienstandType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return FamilienstandType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return FamilienstandType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FamilienstandType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FamilienstandType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "familienstandType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = FamilienstandType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = FamilienstandType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvertragsangebotResult implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditvertragsangebotResult
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Antragsstatus
         */
        protected KreditantragsstatusXO localAntragsstatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAntragsstatusTracker = false;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        public boolean isAntragsstatusSpecified() {
            return localAntragsstatusTracker;
        }

        /**
         * Auto generated getter method
         * @return KreditantragsstatusXO
         */
        public KreditantragsstatusXO getAntragsstatus() {
            return localAntragsstatus;
        }

        /**
         * Auto generated setter method
         * @param param Antragsstatus
         */
        public void setAntragsstatus(KreditantragsstatusXO param) {
            localAntragsstatusTracker = param != null;

            this.localAntragsstatus = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditvertragsangebotResult",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditvertragsangebotResult", xmlWriter);
                }
            }

            if (localAntragsstatusTracker) {
                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                localAntragsstatus.serialize(new javax.xml.namespace.QName("",
                        "antragsstatus"), xmlWriter);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAntragsstatusTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "antragsstatus"));

                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                elementList.add(localAntragsstatus);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvertragsangebotResult parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvertragsangebotResult object = new GetKreditvertragsangebotResult();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditvertragsangebotResult".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditvertragsangebotResult) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "antragsstatus").equals(
                                reader.getName())) {
                        object.setAntragsstatus(KreditantragsstatusXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list2.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list2));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LStKlasseType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "lStKlasseType", "ns1");

        /**
         * field for LStKlasseType
         */
        protected java.math.BigInteger localLStKlasseType;

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getLStKlasseType() {
            return localLStKlasseType;
        }

        /**
         * Auto generated setter method
         * @param param LStKlasseType
         */
        public void setLStKlasseType(java.math.BigInteger param) {
            if (org.apache.axis2.databinding.utils.ConverterUtil.compare(
                        param, "6") <= 0) {
                this.localLStKlasseType = param;
            } else {
                throw new java.lang.RuntimeException();
            }

            if (org.apache.axis2.databinding.utils.ConverterUtil.compare(
                        param, "1") >= 0) {
                this.localLStKlasseType = param;
            } else {
                throw new java.lang.RuntimeException();
            }
        }

        public java.lang.String toString() {
            return localLStKlasseType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":lStKlasseType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "lStKlasseType", xmlWriter);
                }
            }

            if (localLStKlasseType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "lStKlasseType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLStKlasseType));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLStKlasseType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static LStKlasseType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                LStKlasseType returnValue = new LStKlasseType();

                returnValue.setLStKlasseType(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                        value));

                return returnValue;
            }

            public static LStKlasseType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return LStKlasseType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return LStKlasseType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LStKlasseType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LStKlasseType object = new LStKlasseType();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "lStKlasseType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setLStKlasseType(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DacBewertungType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "dacBewertungType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _UNBEKANNT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UNBEKANNT");
        public static final java.lang.String _GRUEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GRUEN");
        public static final java.lang.String _GELB = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GELB");
        public static final java.lang.String _ROT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ROT");
        public static final DacBewertungType UNBEKANNT = new DacBewertungType(_UNBEKANNT,
                true);
        public static final DacBewertungType GRUEN = new DacBewertungType(_GRUEN,
                true);
        public static final DacBewertungType GELB = new DacBewertungType(_GELB,
                true);
        public static final DacBewertungType ROT = new DacBewertungType(_ROT,
                true);

        /**
         * field for DacBewertungType
         */
        protected java.lang.String localDacBewertungType;

        // Constructor
        protected DacBewertungType(java.lang.String value,
            boolean isRegisterValue) {
            localDacBewertungType = value;

            if (isRegisterValue) {
                _table_.put(localDacBewertungType, this);
            }
        }

        public java.lang.String getValue() {
            return localDacBewertungType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localDacBewertungType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":dacBewertungType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "dacBewertungType", xmlWriter);
                }
            }

            if (localDacBewertungType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "dacBewertungType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localDacBewertungType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDacBewertungType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static DacBewertungType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                DacBewertungType enumeration = (DacBewertungType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static DacBewertungType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static DacBewertungType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DacBewertungType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return DacBewertungType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DacBewertungType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DacBewertungType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "dacBewertungType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = DacBewertungType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = DacBewertungType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KreditartType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "kreditartType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _KONSUMENTENKREDIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KONSUMENTENKREDIT");
        public static final java.lang.String _RAHMENKREDIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "RAHMENKREDIT");
        public static final java.lang.String _ABRUFKREDIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ABRUFKREDIT");
        public static final java.lang.String _DISPO = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DISPO");
        public static final java.lang.String _KREDITKARTE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KREDITKARTE");
        public static final java.lang.String _AUTOKREDIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTOKREDIT");
        public static final java.lang.String _LEASING = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "LEASING");
        public static final java.lang.String _AG_DARLEHEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AG_DARLEHEN");
        public static final java.lang.String _NULL_PROZ_FINANZIERUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "NULL_PROZ_FINANZIERUNG");
        public static final java.lang.String _BALLONFINANZIERUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BALLONFINANZIERUNG");
        public static final KreditartType KONSUMENTENKREDIT = new KreditartType(_KONSUMENTENKREDIT,
                true);
        public static final KreditartType RAHMENKREDIT = new KreditartType(_RAHMENKREDIT,
                true);
        public static final KreditartType ABRUFKREDIT = new KreditartType(_ABRUFKREDIT,
                true);
        public static final KreditartType DISPO = new KreditartType(_DISPO, true);
        public static final KreditartType KREDITKARTE = new KreditartType(_KREDITKARTE,
                true);
        public static final KreditartType AUTOKREDIT = new KreditartType(_AUTOKREDIT,
                true);
        public static final KreditartType LEASING = new KreditartType(_LEASING,
                true);
        public static final KreditartType AG_DARLEHEN = new KreditartType(_AG_DARLEHEN,
                true);
        public static final KreditartType NULL_PROZ_FINANZIERUNG = new KreditartType(_NULL_PROZ_FINANZIERUNG,
                true);
        public static final KreditartType BALLONFINANZIERUNG = new KreditartType(_BALLONFINANZIERUNG,
                true);

        /**
         * field for KreditartType
         */
        protected java.lang.String localKreditartType;

        // Constructor
        protected KreditartType(java.lang.String value, boolean isRegisterValue) {
            localKreditartType = value;

            if (isRegisterValue) {
                _table_.put(localKreditartType, this);
            }
        }

        public java.lang.String getValue() {
            return localKreditartType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localKreditartType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":kreditartType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "kreditartType", xmlWriter);
                }
            }

            if (localKreditartType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kreditartType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localKreditartType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localKreditartType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static KreditartType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                KreditartType enumeration = (KreditartType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static KreditartType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static KreditartType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return KreditartType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return KreditartType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KreditartType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KreditartType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "kreditartType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = KreditartType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = KreditartType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class KartenartType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "kartenartType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _EC_MAESTRO = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EC_MAESTRO");
        public static final java.lang.String _AMEX = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AMEX");
        public static final java.lang.String _DINERS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DINERS");
        public static final java.lang.String _MASTERCARD = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MASTERCARD");
        public static final java.lang.String _VISA = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "VISA");
        public static final java.lang.String _V_PAY = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "V_PAY");
        public static final KartenartType EC_MAESTRO = new KartenartType(_EC_MAESTRO,
                true);
        public static final KartenartType AMEX = new KartenartType(_AMEX, true);
        public static final KartenartType DINERS = new KartenartType(_DINERS,
                true);
        public static final KartenartType MASTERCARD = new KartenartType(_MASTERCARD,
                true);
        public static final KartenartType VISA = new KartenartType(_VISA, true);
        public static final KartenartType V_PAY = new KartenartType(_V_PAY, true);

        /**
         * field for KartenartType
         */
        protected java.lang.String localKartenartType;

        // Constructor
        protected KartenartType(java.lang.String value, boolean isRegisterValue) {
            localKartenartType = value;

            if (isRegisterValue) {
                _table_.put(localKartenartType, this);
            }
        }

        public java.lang.String getValue() {
            return localKartenartType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localKartenartType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":kartenartType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "kartenartType", xmlWriter);
                }
            }

            if (localKartenartType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kartenartType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localKartenartType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localKartenartType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static KartenartType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                KartenartType enumeration = (KartenartType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static KartenartType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static KartenartType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return KartenartType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return KartenartType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static KartenartType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                KartenartType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "kartenartType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = KartenartType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = KartenartType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvertragsangebotParams implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditvertragsangebotParams
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Authentisierung
         */
        protected AuthentisierungXO localAuthentisierung;

        /**
         * field for Kreditantrag
         */
        protected KreditantragXO localKreditantrag;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        /**
         * Auto generated getter method
         * @return AuthentisierungXO
         */
        public AuthentisierungXO getAuthentisierung() {
            return localAuthentisierung;
        }

        /**
         * Auto generated setter method
         * @param param Authentisierung
         */
        public void setAuthentisierung(AuthentisierungXO param) {
            this.localAuthentisierung = param;
        }

        /**
         * Auto generated getter method
         * @return KreditantragXO
         */
        public KreditantragXO getKreditantrag() {
            return localKreditantrag;
        }

        /**
         * Auto generated setter method
         * @param param Kreditantrag
         */
        public void setKreditantrag(KreditantragXO param) {
            this.localKreditantrag = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditvertragsangebotParams",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditvertragsangebotParams", xmlWriter);
                }
            }

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            localAuthentisierung.serialize(new javax.xml.namespace.QName("",
                    "authentisierung"), xmlWriter);

            if (localKreditantrag == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kreditantrag cannot be null!!");
            }

            localKreditantrag.serialize(new javax.xml.namespace.QName("",
                    "kreditantrag"), xmlWriter);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            elementList.add(new javax.xml.namespace.QName("", "authentisierung"));

            if (localAuthentisierung == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "authentisierung cannot be null!!");
            }

            elementList.add(localAuthentisierung);

            elementList.add(new javax.xml.namespace.QName("", "kreditantrag"));

            if (localKreditantrag == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "kreditantrag cannot be null!!");
            }

            elementList.add(localKreditantrag);

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvertragsangebotParams parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvertragsangebotParams object = new GetKreditvertragsangebotParams();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditvertragsangebotParams".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditvertragsangebotParams) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "authentisierung").equals(
                                reader.getName())) {
                        object.setAuthentisierung(AuthentisierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kreditantrag").equals(
                                reader.getName())) {
                        object.setKreditantrag(KreditantragXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list3.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list3.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditkonditionenResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditkonditionenResponse", "ns1");

        /**
         * field for GetKreditkonditionenResponse
         */
        protected GetKreditkonditionenResult localGetKreditkonditionenResponse;

        /**
         * Auto generated getter method
         * @return GetKreditkonditionenResult
         */
        public GetKreditkonditionenResult getGetKreditkonditionenResponse() {
            return localGetKreditkonditionenResponse;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditkonditionenResponse
         */
        public void setGetKreditkonditionenResponse(
            GetKreditkonditionenResult param) {
            this.localGetKreditkonditionenResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditkonditionenResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditkonditionenResponse cannot be null!");
            }

            localGetKreditkonditionenResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditkonditionenResponse.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditkonditionenResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditkonditionenResponse object = new GetKreditkonditionenResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditkonditionenResponse").equals(
                                        reader.getName())) {
                                object.setGetKreditkonditionenResponse(GetKreditkonditionenResult.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class VwzType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "vwzType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _STANDARD = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "STANDARD");
        public static final java.lang.String _ABLOESUNG_UMSCHULDUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ABLOESUNG_UMSCHULDUNG");
        public static final java.lang.String _ANTIQUITAETEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ANTIQUITAETEN");
        public static final java.lang.String _ANWALTSKOSTEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ANWALTSKOSTEN");
        public static final java.lang.String _AUSBAU_DES_HAUSES = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUSBAU_DES_HAUSES");
        public static final java.lang.String _AUTOREPARATUR = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTOREPARATUR");
        public static final java.lang.String _AUTO_PKW_NEU = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTO_PKW_NEU");
        public static final java.lang.String _AUTO_PKW_GEBRAUCHT_BIS_4J = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTO_PKW_GEBRAUCHT_BIS_4J");
        public static final java.lang.String _AUTO_PKW_GEBRAUCHT_AB_5J = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTO_PKW_GEBRAUCHT_AB_5J");
        public static final java.lang.String _AUTO_ZUBEHOER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AUTO_ZUBEHOER");
        public static final java.lang.String _COMPUTER_LAPTOP_ETC = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "COMPUTER_LAPTOP_ETC");
        public static final java.lang.String _EXPRESS_KREDIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "EXPRESS_KREDIT");
        public static final java.lang.String _FESTIVITAETEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FESTIVITAETEN");
        public static final java.lang.String _FAHRRAD = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FAHRRAD");
        public static final java.lang.String _GESCHENKE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GESCHENKE");
        public static final java.lang.String _GIROUMSCHULDUNG_EIGEN_GESAMT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GIROUMSCHULDUNG_EIGEN_GESAMT");
        public static final java.lang.String _GIROUMSCHULDUNG_EIGEN_TEIL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GIROUMSCHULDUNG_EIGEN_TEIL");
        public static final java.lang.String _GIROUMSCHULDUNG_FREMD_GESAMT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GIROUMSCHULDUNG_FREMD_GESAMT");
        public static final java.lang.String _GIROUMSCHULDUNG_FREMD_TEIL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GIROUMSCHULDUNG_FREMD_TEIL");
        public static final java.lang.String _GRUNDSTUECK = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "GRUNDSTUECK");
        public static final java.lang.String _HAUSRAT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HAUSRAT");
        public static final java.lang.String _LIMIT_GIROKONTO_EIGEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "LIMIT_GIROKONTO_EIGEN");
        public static final java.lang.String _LIMIT_VISA_KARTE_EIGEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "LIMIT_VISA_KARTE_EIGEN");
        public static final java.lang.String _MIETKAUTION = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MIETKAUTION");
        public static final java.lang.String _MOEBEL = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MOEBEL");
        public static final java.lang.String _MOTORRAD_NEU = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MOTORRAD_NEU");
        public static final java.lang.String _MOTORRAD_GEBRAUCHT_BIS_4J = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MOTORRAD_GEBRAUCHT_BIS_4J");
        public static final java.lang.String _MOTORRAD_GEBRAUCHT_AB_5J = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "MOTORRAD_GEBRAUCHT_AB_5J");
        public static final java.lang.String _PFAENDUNGSSCHUTZKONTO = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "PFAENDUNGSSCHUTZKONTO");
        public static final java.lang.String _PFLEGE_VON_VERWANDTEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "PFLEGE_VON_VERWANDTEN");
        public static final java.lang.String _RENOVIERUNG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "RENOVIERUNG");
        public static final java.lang.String _REPARATUREN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "REPARATUREN");
        public static final java.lang.String _SCHEIDUNGSKOSTEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SCHEIDUNGSKOSTEN");
        public static final java.lang.String _STEUERSCHULDEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "STEUERSCHULDEN");
        public static final java.lang.String _UMZUG = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UMZUG");
        public static final java.lang.String _UNTERHALTUNGSELEKTRONIK = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UNTERHALTUNGSELEKTRONIK");
        public static final java.lang.String _URLAUB = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "URLAUB");
        public static final java.lang.String _WOHNWAGEN_MOBILE_CARAVAN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "WOHNWAGEN_MOBILE_CARAVAN");
        public static final java.lang.String _WINTERGARTEN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "WINTERGARTEN");
        public static final java.lang.String _ZAHNERSATZ = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ZAHNERSATZ");
        public static final VwzType STANDARD = new VwzType(_STANDARD, true);
        public static final VwzType ABLOESUNG_UMSCHULDUNG = new VwzType(_ABLOESUNG_UMSCHULDUNG,
                true);
        public static final VwzType ANTIQUITAETEN = new VwzType(_ANTIQUITAETEN,
                true);
        public static final VwzType ANWALTSKOSTEN = new VwzType(_ANWALTSKOSTEN,
                true);
        public static final VwzType AUSBAU_DES_HAUSES = new VwzType(_AUSBAU_DES_HAUSES,
                true);
        public static final VwzType AUTOREPARATUR = new VwzType(_AUTOREPARATUR,
                true);
        public static final VwzType AUTO_PKW_NEU = new VwzType(_AUTO_PKW_NEU,
                true);
        public static final VwzType AUTO_PKW_GEBRAUCHT_BIS_4J = new VwzType(_AUTO_PKW_GEBRAUCHT_BIS_4J,
                true);
        public static final VwzType AUTO_PKW_GEBRAUCHT_AB_5J = new VwzType(_AUTO_PKW_GEBRAUCHT_AB_5J,
                true);
        public static final VwzType AUTO_ZUBEHOER = new VwzType(_AUTO_ZUBEHOER,
                true);
        public static final VwzType COMPUTER_LAPTOP_ETC = new VwzType(_COMPUTER_LAPTOP_ETC,
                true);
        public static final VwzType EXPRESS_KREDIT = new VwzType(_EXPRESS_KREDIT,
                true);
        public static final VwzType FESTIVITAETEN = new VwzType(_FESTIVITAETEN,
                true);
        public static final VwzType FAHRRAD = new VwzType(_FAHRRAD, true);
        public static final VwzType GESCHENKE = new VwzType(_GESCHENKE, true);
        public static final VwzType GIROUMSCHULDUNG_EIGEN_GESAMT = new VwzType(_GIROUMSCHULDUNG_EIGEN_GESAMT,
                true);
        public static final VwzType GIROUMSCHULDUNG_EIGEN_TEIL = new VwzType(_GIROUMSCHULDUNG_EIGEN_TEIL,
                true);
        public static final VwzType GIROUMSCHULDUNG_FREMD_GESAMT = new VwzType(_GIROUMSCHULDUNG_FREMD_GESAMT,
                true);
        public static final VwzType GIROUMSCHULDUNG_FREMD_TEIL = new VwzType(_GIROUMSCHULDUNG_FREMD_TEIL,
                true);
        public static final VwzType GRUNDSTUECK = new VwzType(_GRUNDSTUECK, true);
        public static final VwzType HAUSRAT = new VwzType(_HAUSRAT, true);
        public static final VwzType LIMIT_GIROKONTO_EIGEN = new VwzType(_LIMIT_GIROKONTO_EIGEN,
                true);
        public static final VwzType LIMIT_VISA_KARTE_EIGEN = new VwzType(_LIMIT_VISA_KARTE_EIGEN,
                true);
        public static final VwzType MIETKAUTION = new VwzType(_MIETKAUTION, true);
        public static final VwzType MOEBEL = new VwzType(_MOEBEL, true);
        public static final VwzType MOTORRAD_NEU = new VwzType(_MOTORRAD_NEU,
                true);
        public static final VwzType MOTORRAD_GEBRAUCHT_BIS_4J = new VwzType(_MOTORRAD_GEBRAUCHT_BIS_4J,
                true);
        public static final VwzType MOTORRAD_GEBRAUCHT_AB_5J = new VwzType(_MOTORRAD_GEBRAUCHT_AB_5J,
                true);
        public static final VwzType PFAENDUNGSSCHUTZKONTO = new VwzType(_PFAENDUNGSSCHUTZKONTO,
                true);
        public static final VwzType PFLEGE_VON_VERWANDTEN = new VwzType(_PFLEGE_VON_VERWANDTEN,
                true);
        public static final VwzType RENOVIERUNG = new VwzType(_RENOVIERUNG, true);
        public static final VwzType REPARATUREN = new VwzType(_REPARATUREN, true);
        public static final VwzType SCHEIDUNGSKOSTEN = new VwzType(_SCHEIDUNGSKOSTEN,
                true);
        public static final VwzType STEUERSCHULDEN = new VwzType(_STEUERSCHULDEN,
                true);
        public static final VwzType UMZUG = new VwzType(_UMZUG, true);
        public static final VwzType UNTERHALTUNGSELEKTRONIK = new VwzType(_UNTERHALTUNGSELEKTRONIK,
                true);
        public static final VwzType URLAUB = new VwzType(_URLAUB, true);
        public static final VwzType WOHNWAGEN_MOBILE_CARAVAN = new VwzType(_WOHNWAGEN_MOBILE_CARAVAN,
                true);
        public static final VwzType WINTERGARTEN = new VwzType(_WINTERGARTEN,
                true);
        public static final VwzType ZAHNERSATZ = new VwzType(_ZAHNERSATZ, true);

        /**
         * field for VwzType
         */
        protected java.lang.String localVwzType;

        // Constructor
        protected VwzType(java.lang.String value, boolean isRegisterValue) {
            localVwzType = value;

            if (isRegisterValue) {
                _table_.put(localVwzType, this);
            }
        }

        public java.lang.String getValue() {
            return localVwzType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localVwzType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":vwzType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "vwzType", xmlWriter);
                }
            }

            if (localVwzType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "vwzType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localVwzType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localVwzType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static VwzType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                VwzType enumeration = (VwzType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static VwzType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static VwzType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return VwzType.Factory.fromString(content, namespaceUri);
                } else {
                    return VwzType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static VwzType parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                VwzType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "vwzType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = VwzType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = VwzType.Factory.fromString(content, "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DarlehnsnehmerXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DarlehnsnehmerXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for ScbKundeId
         */
        protected java.lang.String localScbKundeId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localScbKundeIdTracker = false;

        /**
         * field for Anrede
         */
        protected AnredeType localAnrede;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnredeTracker = false;

        /**
         * field for Titel
         */
        protected java.lang.String localTitel;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitelTracker = false;

        /**
         * field for Name
         */
        protected java.lang.String localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Vorname
         */
        protected java.lang.String localVorname;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVornameTracker = false;

        /**
         * field for Geburtsdatum
         */
        protected java.util.Date localGeburtsdatum;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeburtsdatumTracker = false;

        /**
         * field for Geburtsname
         */
        protected java.lang.String localGeburtsname;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeburtsnameTracker = false;

        /**
         * field for Geburtsort
         */
        protected java.lang.String localGeburtsort;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGeburtsortTracker = false;

        /**
         * field for Staatsangehoerigkeit
         */
        protected LandType localStaatsangehoerigkeit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStaatsangehoerigkeitTracker = false;

        /**
         * field for InDeLebendSeit
         */
        protected java.util.Date localInDeLebendSeit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInDeLebendSeitTracker = false;

        /**
         * field for Telefon
         */
        protected java.lang.String localTelefon;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTelefonTracker = false;

        /**
         * field for Mobil
         */
        protected java.lang.String localMobil;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMobilTracker = false;

        /**
         * field for Erreichbar
         */
        protected java.lang.String localErreichbar;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErreichbarTracker = false;

        /**
         * field for Email
         */
        protected java.lang.String localEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTracker = false;

        /**
         * field for Werbezustimmung
         */
        protected boolean localWerbezustimmung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWerbezustimmungTracker = false;

        /**
         * field for WerbewegEmail
         */
        protected boolean localWerbewegEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWerbewegEmailTracker = false;

        /**
         * field for WerbewegBrief
         */
        protected boolean localWerbewegBrief;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWerbewegBriefTracker = false;

        /**
         * field for WerbewegTelefon
         */
        protected boolean localWerbewegTelefon;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWerbewegTelefonTracker = false;

        /**
         * field for WerbewegSmsMms
         */
        protected boolean localWerbewegSmsMms;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWerbewegSmsMmsTracker = false;

        /**
         * field for Familienstand
         */
        protected FamilienstandType localFamilienstand;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFamilienstandTracker = false;

        /**
         * field for Trennungsdatum
         */
        protected java.util.Date localTrennungsdatum;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTrennungsdatumTracker = false;

        /**
         * field for ErwachseneImHaushalt
         */
        protected java.math.BigInteger localErwachseneImHaushalt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErwachseneImHaushaltTracker = false;

        /**
         * field for KinderImHaushalt
         */
        protected java.math.BigInteger localKinderImHaushalt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKinderImHaushaltTracker = false;

        /**
         * field for AnzKindergeldber
         */
        protected java.math.BigInteger localAnzKindergeldber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAnzKindergeldberTracker = false;

        /**
         * field for VerhaeltnisZuDn1
         */
        protected VerhaeltnisType localVerhaeltnisZuDn1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVerhaeltnisZuDn1Tracker = false;

        /**
         * field for GemeinsHaushaltMitDn1
         */
        protected boolean localGemeinsHaushaltMitDn1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGemeinsHaushaltMitDn1Tracker = false;

        /**
         * field for GemeinsAdresseMitDn1
         */
        protected boolean localGemeinsAdresseMitDn1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGemeinsAdresseMitDn1Tracker = false;

        /**
         * field for GemeinsKontaktdatenMitDn1
         */
        protected boolean localGemeinsKontaktdatenMitDn1;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGemeinsKontaktdatenMitDn1Tracker = false;

        /**
         * field for Aufenthaltsgenehmigung
         */
        protected boolean localAufenthaltsgenehmigung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAufenthaltsgenehmigungTracker = false;

        /**
         * field for AufenthaltsgenehmigungBis
         */
        protected java.util.Date localAufenthaltsgenehmigungBis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAufenthaltsgenehmigungBisTracker = false;

        /**
         * field for ArbeitserlaubnisBis
         */
        protected java.util.Date localArbeitserlaubnisBis;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localArbeitserlaubnisBisTracker = false;

        /**
         * field for AktuelleAdresse
         */
        protected AdresseXO localAktuelleAdresse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAktuelleAdresseTracker = false;

        /**
         * field for VorherigeAdresse
         */
        protected AdresseXO localVorherigeAdresse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVorherigeAdresseTracker = false;

        /**
         * field for AktuellesBV
         */
        protected BeschaeftigungsverhaeltnisXO localAktuellesBV;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAktuellesBVTracker = false;

        /**
         * field for VorherigesBV
         */
        protected BeschaeftigungsverhaeltnisXO localVorherigesBV;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localVorherigesBVTracker = false;

        /**
         * field for EinnahmenAusgaben
         */
        protected EinnahmenAusgabenXO localEinnahmenAusgaben;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEinnahmenAusgabenTracker = false;

        /**
         * field for Bankverbindung
         */
        protected BankverbindungXO localBankverbindung;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankverbindungTracker = false;

        /**
         * field for Konten
         * This was an Array!
         */
        protected KontoXO[] localKonten;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKontenTracker = false;

        /**
         * field for Karten
         * This was an Array!
         */
        protected KarteXO[] localKarten;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKartenTracker = false;

        public boolean isScbKundeIdSpecified() {
            return localScbKundeIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getScbKundeId() {
            return localScbKundeId;
        }

        /**
         * Auto generated setter method
         * @param param ScbKundeId
         */
        public void setScbKundeId(java.lang.String param) {
            localScbKundeIdTracker = param != null;

            this.localScbKundeId = param;
        }

        public boolean isAnredeSpecified() {
            return localAnredeTracker;
        }

        /**
         * Auto generated getter method
         * @return AnredeType
         */
        public AnredeType getAnrede() {
            return localAnrede;
        }

        /**
         * Auto generated setter method
         * @param param Anrede
         */
        public void setAnrede(AnredeType param) {
            localAnredeTracker = param != null;

            this.localAnrede = param;
        }

        public boolean isTitelSpecified() {
            return localTitelTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTitel() {
            return localTitel;
        }

        /**
         * Auto generated setter method
         * @param param Titel
         */
        public void setTitel(java.lang.String param) {
            localTitelTracker = param != null;

            this.localTitel = param;
        }

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            localNameTracker = param != null;

            this.localName = param;
        }

        public boolean isVornameSpecified() {
            return localVornameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getVorname() {
            return localVorname;
        }

        /**
         * Auto generated setter method
         * @param param Vorname
         */
        public void setVorname(java.lang.String param) {
            localVornameTracker = param != null;

            this.localVorname = param;
        }

        public boolean isGeburtsdatumSpecified() {
            return localGeburtsdatumTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getGeburtsdatum() {
            return localGeburtsdatum;
        }

        /**
         * Auto generated setter method
         * @param param Geburtsdatum
         */
        public void setGeburtsdatum(java.util.Date param) {
            localGeburtsdatumTracker = param != null;

            this.localGeburtsdatum = param;
        }

        public boolean isGeburtsnameSpecified() {
            return localGeburtsnameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeburtsname() {
            return localGeburtsname;
        }

        /**
         * Auto generated setter method
         * @param param Geburtsname
         */
        public void setGeburtsname(java.lang.String param) {
            localGeburtsnameTracker = param != null;

            this.localGeburtsname = param;
        }

        public boolean isGeburtsortSpecified() {
            return localGeburtsortTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGeburtsort() {
            return localGeburtsort;
        }

        /**
         * Auto generated setter method
         * @param param Geburtsort
         */
        public void setGeburtsort(java.lang.String param) {
            localGeburtsortTracker = param != null;

            this.localGeburtsort = param;
        }

        public boolean isStaatsangehoerigkeitSpecified() {
            return localStaatsangehoerigkeitTracker;
        }

        /**
         * Auto generated getter method
         * @return LandType
         */
        public LandType getStaatsangehoerigkeit() {
            return localStaatsangehoerigkeit;
        }

        /**
         * Auto generated setter method
         * @param param Staatsangehoerigkeit
         */
        public void setStaatsangehoerigkeit(LandType param) {
            localStaatsangehoerigkeitTracker = param != null;

            this.localStaatsangehoerigkeit = param;
        }

        public boolean isInDeLebendSeitSpecified() {
            return localInDeLebendSeitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getInDeLebendSeit() {
            return localInDeLebendSeit;
        }

        /**
         * Auto generated setter method
         * @param param InDeLebendSeit
         */
        public void setInDeLebendSeit(java.util.Date param) {
            localInDeLebendSeitTracker = param != null;

            this.localInDeLebendSeit = param;
        }

        public boolean isTelefonSpecified() {
            return localTelefonTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTelefon() {
            return localTelefon;
        }

        /**
         * Auto generated setter method
         * @param param Telefon
         */
        public void setTelefon(java.lang.String param) {
            localTelefonTracker = param != null;

            this.localTelefon = param;
        }

        public boolean isMobilSpecified() {
            return localMobilTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMobil() {
            return localMobil;
        }

        /**
         * Auto generated setter method
         * @param param Mobil
         */
        public void setMobil(java.lang.String param) {
            localMobilTracker = param != null;

            this.localMobil = param;
        }

        public boolean isErreichbarSpecified() {
            return localErreichbarTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getErreichbar() {
            return localErreichbar;
        }

        /**
         * Auto generated setter method
         * @param param Erreichbar
         */
        public void setErreichbar(java.lang.String param) {
            localErreichbarTracker = param != null;

            this.localErreichbar = param;
        }

        public boolean isEmailSpecified() {
            return localEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmail() {
            return localEmail;
        }

        /**
         * Auto generated setter method
         * @param param Email
         */
        public void setEmail(java.lang.String param) {
            localEmailTracker = param != null;

            this.localEmail = param;
        }

        public boolean isWerbezustimmungSpecified() {
            return localWerbezustimmungTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getWerbezustimmung() {
            return localWerbezustimmung;
        }

        /**
         * Auto generated setter method
         * @param param Werbezustimmung
         */
        public void setWerbezustimmung(boolean param) {
            // setting primitive attribute tracker to true
            localWerbezustimmungTracker = true;

            this.localWerbezustimmung = param;
        }

        public boolean isWerbewegEmailSpecified() {
            return localWerbewegEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getWerbewegEmail() {
            return localWerbewegEmail;
        }

        /**
         * Auto generated setter method
         * @param param WerbewegEmail
         */
        public void setWerbewegEmail(boolean param) {
            // setting primitive attribute tracker to true
            localWerbewegEmailTracker = true;

            this.localWerbewegEmail = param;
        }

        public boolean isWerbewegBriefSpecified() {
            return localWerbewegBriefTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getWerbewegBrief() {
            return localWerbewegBrief;
        }

        /**
         * Auto generated setter method
         * @param param WerbewegBrief
         */
        public void setWerbewegBrief(boolean param) {
            // setting primitive attribute tracker to true
            localWerbewegBriefTracker = true;

            this.localWerbewegBrief = param;
        }

        public boolean isWerbewegTelefonSpecified() {
            return localWerbewegTelefonTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getWerbewegTelefon() {
            return localWerbewegTelefon;
        }

        /**
         * Auto generated setter method
         * @param param WerbewegTelefon
         */
        public void setWerbewegTelefon(boolean param) {
            // setting primitive attribute tracker to true
            localWerbewegTelefonTracker = true;

            this.localWerbewegTelefon = param;
        }

        public boolean isWerbewegSmsMmsSpecified() {
            return localWerbewegSmsMmsTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getWerbewegSmsMms() {
            return localWerbewegSmsMms;
        }

        /**
         * Auto generated setter method
         * @param param WerbewegSmsMms
         */
        public void setWerbewegSmsMms(boolean param) {
            // setting primitive attribute tracker to true
            localWerbewegSmsMmsTracker = true;

            this.localWerbewegSmsMms = param;
        }

        public boolean isFamilienstandSpecified() {
            return localFamilienstandTracker;
        }

        /**
         * Auto generated getter method
         * @return FamilienstandType
         */
        public FamilienstandType getFamilienstand() {
            return localFamilienstand;
        }

        /**
         * Auto generated setter method
         * @param param Familienstand
         */
        public void setFamilienstand(FamilienstandType param) {
            localFamilienstandTracker = param != null;

            this.localFamilienstand = param;
        }

        public boolean isTrennungsdatumSpecified() {
            return localTrennungsdatumTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getTrennungsdatum() {
            return localTrennungsdatum;
        }

        /**
         * Auto generated setter method
         * @param param Trennungsdatum
         */
        public void setTrennungsdatum(java.util.Date param) {
            localTrennungsdatumTracker = param != null;

            this.localTrennungsdatum = param;
        }

        public boolean isErwachseneImHaushaltSpecified() {
            return localErwachseneImHaushaltTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getErwachseneImHaushalt() {
            return localErwachseneImHaushalt;
        }

        /**
         * Auto generated setter method
         * @param param ErwachseneImHaushalt
         */
        public void setErwachseneImHaushalt(java.math.BigInteger param) {
            localErwachseneImHaushaltTracker = param != null;

            this.localErwachseneImHaushalt = param;
        }

        public boolean isKinderImHaushaltSpecified() {
            return localKinderImHaushaltTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getKinderImHaushalt() {
            return localKinderImHaushalt;
        }

        /**
         * Auto generated setter method
         * @param param KinderImHaushalt
         */
        public void setKinderImHaushalt(java.math.BigInteger param) {
            localKinderImHaushaltTracker = param != null;

            this.localKinderImHaushalt = param;
        }

        public boolean isAnzKindergeldberSpecified() {
            return localAnzKindergeldberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigInteger
         */
        public java.math.BigInteger getAnzKindergeldber() {
            return localAnzKindergeldber;
        }

        /**
         * Auto generated setter method
         * @param param AnzKindergeldber
         */
        public void setAnzKindergeldber(java.math.BigInteger param) {
            localAnzKindergeldberTracker = param != null;

            this.localAnzKindergeldber = param;
        }

        public boolean isVerhaeltnisZuDn1Specified() {
            return localVerhaeltnisZuDn1Tracker;
        }

        /**
         * Auto generated getter method
         * @return VerhaeltnisType
         */
        public VerhaeltnisType getVerhaeltnisZuDn1() {
            return localVerhaeltnisZuDn1;
        }

        /**
         * Auto generated setter method
         * @param param VerhaeltnisZuDn1
         */
        public void setVerhaeltnisZuDn1(VerhaeltnisType param) {
            localVerhaeltnisZuDn1Tracker = param != null;

            this.localVerhaeltnisZuDn1 = param;
        }

        public boolean isGemeinsHaushaltMitDn1Specified() {
            return localGemeinsHaushaltMitDn1Tracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getGemeinsHaushaltMitDn1() {
            return localGemeinsHaushaltMitDn1;
        }

        /**
         * Auto generated setter method
         * @param param GemeinsHaushaltMitDn1
         */
        public void setGemeinsHaushaltMitDn1(boolean param) {
            // setting primitive attribute tracker to true
            localGemeinsHaushaltMitDn1Tracker = true;

            this.localGemeinsHaushaltMitDn1 = param;
        }

        public boolean isGemeinsAdresseMitDn1Specified() {
            return localGemeinsAdresseMitDn1Tracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getGemeinsAdresseMitDn1() {
            return localGemeinsAdresseMitDn1;
        }

        /**
         * Auto generated setter method
         * @param param GemeinsAdresseMitDn1
         */
        public void setGemeinsAdresseMitDn1(boolean param) {
            // setting primitive attribute tracker to true
            localGemeinsAdresseMitDn1Tracker = true;

            this.localGemeinsAdresseMitDn1 = param;
        }

        public boolean isGemeinsKontaktdatenMitDn1Specified() {
            return localGemeinsKontaktdatenMitDn1Tracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getGemeinsKontaktdatenMitDn1() {
            return localGemeinsKontaktdatenMitDn1;
        }

        /**
         * Auto generated setter method
         * @param param GemeinsKontaktdatenMitDn1
         */
        public void setGemeinsKontaktdatenMitDn1(boolean param) {
            // setting primitive attribute tracker to true
            localGemeinsKontaktdatenMitDn1Tracker = true;

            this.localGemeinsKontaktdatenMitDn1 = param;
        }

        public boolean isAufenthaltsgenehmigungSpecified() {
            return localAufenthaltsgenehmigungTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAufenthaltsgenehmigung() {
            return localAufenthaltsgenehmigung;
        }

        /**
         * Auto generated setter method
         * @param param Aufenthaltsgenehmigung
         */
        public void setAufenthaltsgenehmigung(boolean param) {
            // setting primitive attribute tracker to true
            localAufenthaltsgenehmigungTracker = true;

            this.localAufenthaltsgenehmigung = param;
        }

        public boolean isAufenthaltsgenehmigungBisSpecified() {
            return localAufenthaltsgenehmigungBisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getAufenthaltsgenehmigungBis() {
            return localAufenthaltsgenehmigungBis;
        }

        /**
         * Auto generated setter method
         * @param param AufenthaltsgenehmigungBis
         */
        public void setAufenthaltsgenehmigungBis(java.util.Date param) {
            localAufenthaltsgenehmigungBisTracker = param != null;

            this.localAufenthaltsgenehmigungBis = param;
        }

        public boolean isArbeitserlaubnisBisSpecified() {
            return localArbeitserlaubnisBisTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getArbeitserlaubnisBis() {
            return localArbeitserlaubnisBis;
        }

        /**
         * Auto generated setter method
         * @param param ArbeitserlaubnisBis
         */
        public void setArbeitserlaubnisBis(java.util.Date param) {
            localArbeitserlaubnisBisTracker = param != null;

            this.localArbeitserlaubnisBis = param;
        }

        public boolean isAktuelleAdresseSpecified() {
            return localAktuelleAdresseTracker;
        }

        /**
         * Auto generated getter method
         * @return AdresseXO
         */
        public AdresseXO getAktuelleAdresse() {
            return localAktuelleAdresse;
        }

        /**
         * Auto generated setter method
         * @param param AktuelleAdresse
         */
        public void setAktuelleAdresse(AdresseXO param) {
            localAktuelleAdresseTracker = param != null;

            this.localAktuelleAdresse = param;
        }

        public boolean isVorherigeAdresseSpecified() {
            return localVorherigeAdresseTracker;
        }

        /**
         * Auto generated getter method
         * @return AdresseXO
         */
        public AdresseXO getVorherigeAdresse() {
            return localVorherigeAdresse;
        }

        /**
         * Auto generated setter method
         * @param param VorherigeAdresse
         */
        public void setVorherigeAdresse(AdresseXO param) {
            localVorherigeAdresseTracker = param != null;

            this.localVorherigeAdresse = param;
        }

        public boolean isAktuellesBVSpecified() {
            return localAktuellesBVTracker;
        }

        /**
         * Auto generated getter method
         * @return BeschaeftigungsverhaeltnisXO
         */
        public BeschaeftigungsverhaeltnisXO getAktuellesBV() {
            return localAktuellesBV;
        }

        /**
         * Auto generated setter method
         * @param param AktuellesBV
         */
        public void setAktuellesBV(BeschaeftigungsverhaeltnisXO param) {
            localAktuellesBVTracker = param != null;

            this.localAktuellesBV = param;
        }

        public boolean isVorherigesBVSpecified() {
            return localVorherigesBVTracker;
        }

        /**
         * Auto generated getter method
         * @return BeschaeftigungsverhaeltnisXO
         */
        public BeschaeftigungsverhaeltnisXO getVorherigesBV() {
            return localVorherigesBV;
        }

        /**
         * Auto generated setter method
         * @param param VorherigesBV
         */
        public void setVorherigesBV(BeschaeftigungsverhaeltnisXO param) {
            localVorherigesBVTracker = param != null;

            this.localVorherigesBV = param;
        }

        public boolean isEinnahmenAusgabenSpecified() {
            return localEinnahmenAusgabenTracker;
        }

        /**
         * Auto generated getter method
         * @return EinnahmenAusgabenXO
         */
        public EinnahmenAusgabenXO getEinnahmenAusgaben() {
            return localEinnahmenAusgaben;
        }

        /**
         * Auto generated setter method
         * @param param EinnahmenAusgaben
         */
        public void setEinnahmenAusgaben(EinnahmenAusgabenXO param) {
            localEinnahmenAusgabenTracker = param != null;

            this.localEinnahmenAusgaben = param;
        }

        public boolean isBankverbindungSpecified() {
            return localBankverbindungTracker;
        }

        /**
         * Auto generated getter method
         * @return BankverbindungXO
         */
        public BankverbindungXO getBankverbindung() {
            return localBankverbindung;
        }

        /**
         * Auto generated setter method
         * @param param Bankverbindung
         */
        public void setBankverbindung(BankverbindungXO param) {
            localBankverbindungTracker = param != null;

            this.localBankverbindung = param;
        }

        public boolean isKontenSpecified() {
            return localKontenTracker;
        }

        /**
         * Auto generated getter method
         * @return KontoXO[]
         */
        public KontoXO[] getKonten() {
            return localKonten;
        }

        /**
         * validate the array for Konten
         */
        protected void validateKonten(KontoXO[] param) {
            if ((param != null) && (param.length > 10)) {
                throw new java.lang.RuntimeException();
            }
        }

        /**
         * Auto generated setter method
         * @param param Konten
         */
        public void setKonten(KontoXO[] param) {
            validateKonten(param);

            localKontenTracker = param != null;

            this.localKonten = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param KontoXO
         */
        public void addKonten(KontoXO param) {
            if (localKonten == null) {
                localKonten = new KontoXO[] {  };
            }

            //update the setting tracker
            localKontenTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localKonten);
            list.add(param);
            this.localKonten = (KontoXO[]) list.toArray(new KontoXO[list.size()]);
        }

        public boolean isKartenSpecified() {
            return localKartenTracker;
        }

        /**
         * Auto generated getter method
         * @return KarteXO[]
         */
        public KarteXO[] getKarten() {
            return localKarten;
        }

        /**
         * validate the array for Karten
         */
        protected void validateKarten(KarteXO[] param) {
            if ((param != null) && (param.length > 10)) {
                throw new java.lang.RuntimeException();
            }
        }

        /**
         * Auto generated setter method
         * @param param Karten
         */
        public void setKarten(KarteXO[] param) {
            validateKarten(param);

            localKartenTracker = param != null;

            this.localKarten = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param KarteXO
         */
        public void addKarten(KarteXO param) {
            if (localKarten == null) {
                localKarten = new KarteXO[] {  };
            }

            //update the setting tracker
            localKartenTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localKarten);
            list.add(param);
            this.localKarten = (KarteXO[]) list.toArray(new KarteXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DarlehnsnehmerXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DarlehnsnehmerXO", xmlWriter);
                }
            }

            if (localScbKundeIdTracker) {
                namespace = "";
                writeStartElement(null, namespace, "scbKundeId", xmlWriter);

                if (localScbKundeId == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbKundeId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localScbKundeId);
                }

                xmlWriter.writeEndElement();
            }

            if (localAnredeTracker) {
                if (localAnrede == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anrede cannot be null!!");
                }

                localAnrede.serialize(new javax.xml.namespace.QName("", "anrede"),
                    xmlWriter);
            }

            if (localTitelTracker) {
                namespace = "";
                writeStartElement(null, namespace, "titel", xmlWriter);

                if (localTitel == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "titel cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTitel);
                }

                xmlWriter.writeEndElement();
            }

            if (localNameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localName);
                }

                xmlWriter.writeEndElement();
            }

            if (localVornameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "vorname", xmlWriter);

                if (localVorname == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorname cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localVorname);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeburtsdatumTracker) {
                namespace = "";
                writeStartElement(null, namespace, "geburtsdatum", xmlWriter);

                if (localGeburtsdatum == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsdatum cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGeburtsdatum));
                }

                xmlWriter.writeEndElement();
            }

            if (localGeburtsnameTracker) {
                namespace = "";
                writeStartElement(null, namespace, "geburtsname", xmlWriter);

                if (localGeburtsname == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsname cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeburtsname);
                }

                xmlWriter.writeEndElement();
            }

            if (localGeburtsortTracker) {
                namespace = "";
                writeStartElement(null, namespace, "geburtsort", xmlWriter);

                if (localGeburtsort == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsort cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localGeburtsort);
                }

                xmlWriter.writeEndElement();
            }

            if (localStaatsangehoerigkeitTracker) {
                if (localStaatsangehoerigkeit == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "staatsangehoerigkeit cannot be null!!");
                }

                localStaatsangehoerigkeit.serialize(new javax.xml.namespace.QName(
                        "", "staatsangehoerigkeit"), xmlWriter);
            }

            if (localInDeLebendSeitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "inDeLebendSeit", xmlWriter);

                if (localInDeLebendSeit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "inDeLebendSeit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInDeLebendSeit));
                }

                xmlWriter.writeEndElement();
            }

            if (localTelefonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "telefon", xmlWriter);

                if (localTelefon == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "telefon cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localTelefon);
                }

                xmlWriter.writeEndElement();
            }

            if (localMobilTracker) {
                namespace = "";
                writeStartElement(null, namespace, "mobil", xmlWriter);

                if (localMobil == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "mobil cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localMobil);
                }

                xmlWriter.writeEndElement();
            }

            if (localErreichbarTracker) {
                namespace = "";
                writeStartElement(null, namespace, "erreichbar", xmlWriter);

                if (localErreichbar == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "erreichbar cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localErreichbar);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "email", xmlWriter);

                if (localEmail == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "email cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localEmail);
                }

                xmlWriter.writeEndElement();
            }

            if (localWerbezustimmungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "werbezustimmung", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "werbezustimmung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWerbezustimmung));
                }

                xmlWriter.writeEndElement();
            }

            if (localWerbewegEmailTracker) {
                namespace = "";
                writeStartElement(null, namespace, "werbewegEmail", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "werbewegEmail cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWerbewegEmail));
                }

                xmlWriter.writeEndElement();
            }

            if (localWerbewegBriefTracker) {
                namespace = "";
                writeStartElement(null, namespace, "werbewegBrief", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "werbewegBrief cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWerbewegBrief));
                }

                xmlWriter.writeEndElement();
            }

            if (localWerbewegTelefonTracker) {
                namespace = "";
                writeStartElement(null, namespace, "werbewegTelefon", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "werbewegTelefon cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWerbewegTelefon));
                }

                xmlWriter.writeEndElement();
            }

            if (localWerbewegSmsMmsTracker) {
                namespace = "";
                writeStartElement(null, namespace, "werbewegSmsMms", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "werbewegSmsMms cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWerbewegSmsMms));
                }

                xmlWriter.writeEndElement();
            }

            if (localFamilienstandTracker) {
                if (localFamilienstand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "familienstand cannot be null!!");
                }

                localFamilienstand.serialize(new javax.xml.namespace.QName("",
                        "familienstand"), xmlWriter);
            }

            if (localTrennungsdatumTracker) {
                namespace = "";
                writeStartElement(null, namespace, "trennungsdatum", xmlWriter);

                if (localTrennungsdatum == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "trennungsdatum cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTrennungsdatum));
                }

                xmlWriter.writeEndElement();
            }

            if (localErwachseneImHaushaltTracker) {
                namespace = "";
                writeStartElement(null, namespace, "erwachseneImHaushalt",
                    xmlWriter);

                if (localErwachseneImHaushalt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "erwachseneImHaushalt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localErwachseneImHaushalt));
                }

                xmlWriter.writeEndElement();
            }

            if (localKinderImHaushaltTracker) {
                namespace = "";
                writeStartElement(null, namespace, "kinderImHaushalt", xmlWriter);

                if (localKinderImHaushalt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "kinderImHaushalt cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKinderImHaushalt));
                }

                xmlWriter.writeEndElement();
            }

            if (localAnzKindergeldberTracker) {
                namespace = "";
                writeStartElement(null, namespace, "anzKindergeldber", xmlWriter);

                if (localAnzKindergeldber == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzKindergeldber cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzKindergeldber));
                }

                xmlWriter.writeEndElement();
            }

            if (localVerhaeltnisZuDn1Tracker) {
                if (localVerhaeltnisZuDn1 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "verhaeltnisZuDn1 cannot be null!!");
                }

                localVerhaeltnisZuDn1.serialize(new javax.xml.namespace.QName(
                        "", "verhaeltnisZuDn1"), xmlWriter);
            }

            if (localGemeinsHaushaltMitDn1Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "gemeinsHaushaltMitDn1",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "gemeinsHaushaltMitDn1 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGemeinsHaushaltMitDn1));
                }

                xmlWriter.writeEndElement();
            }

            if (localGemeinsAdresseMitDn1Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "gemeinsAdresseMitDn1",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "gemeinsAdresseMitDn1 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGemeinsAdresseMitDn1));
                }

                xmlWriter.writeEndElement();
            }

            if (localGemeinsKontaktdatenMitDn1Tracker) {
                namespace = "";
                writeStartElement(null, namespace, "gemeinsKontaktdatenMitDn1",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "gemeinsKontaktdatenMitDn1 cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGemeinsKontaktdatenMitDn1));
                }

                xmlWriter.writeEndElement();
            }

            if (localAufenthaltsgenehmigungTracker) {
                namespace = "";
                writeStartElement(null, namespace, "aufenthaltsgenehmigung",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aufenthaltsgenehmigung cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAufenthaltsgenehmigung));
                }

                xmlWriter.writeEndElement();
            }

            if (localAufenthaltsgenehmigungBisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "aufenthaltsgenehmigungBis",
                    xmlWriter);

                if (localAufenthaltsgenehmigungBis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "aufenthaltsgenehmigungBis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAufenthaltsgenehmigungBis));
                }

                xmlWriter.writeEndElement();
            }

            if (localArbeitserlaubnisBisTracker) {
                namespace = "";
                writeStartElement(null, namespace, "arbeitserlaubnisBis",
                    xmlWriter);

                if (localArbeitserlaubnisBis == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitserlaubnisBis cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitserlaubnisBis));
                }

                xmlWriter.writeEndElement();
            }

            if (localAktuelleAdresseTracker) {
                if (localAktuelleAdresse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aktuelleAdresse cannot be null!!");
                }

                localAktuelleAdresse.serialize(new javax.xml.namespace.QName(
                        "", "aktuelleAdresse"), xmlWriter);
            }

            if (localVorherigeAdresseTracker) {
                if (localVorherigeAdresse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorherigeAdresse cannot be null!!");
                }

                localVorherigeAdresse.serialize(new javax.xml.namespace.QName(
                        "", "vorherigeAdresse"), xmlWriter);
            }

            if (localAktuellesBVTracker) {
                if (localAktuellesBV == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aktuellesBV cannot be null!!");
                }

                localAktuellesBV.serialize(new javax.xml.namespace.QName("",
                        "aktuellesBV"), xmlWriter);
            }

            if (localVorherigesBVTracker) {
                if (localVorherigesBV == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorherigesBV cannot be null!!");
                }

                localVorherigesBV.serialize(new javax.xml.namespace.QName("",
                        "vorherigesBV"), xmlWriter);
            }

            if (localEinnahmenAusgabenTracker) {
                if (localEinnahmenAusgaben == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "einnahmenAusgaben cannot be null!!");
                }

                localEinnahmenAusgaben.serialize(new javax.xml.namespace.QName(
                        "", "einnahmenAusgaben"), xmlWriter);
            }

            if (localBankverbindungTracker) {
                if (localBankverbindung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bankverbindung cannot be null!!");
                }

                localBankverbindung.serialize(new javax.xml.namespace.QName(
                        "", "bankverbindung"), xmlWriter);
            }

            if (localKontenTracker) {
                if (localKonten != null) {
                    for (int i = 0; i < localKonten.length; i++) {
                        if (localKonten[i] != null) {
                            localKonten[i].serialize(new javax.xml.namespace.QName(
                                    "", "konten"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "konten cannot be null!!");
                }
            }

            if (localKartenTracker) {
                if (localKarten != null) {
                    for (int i = 0; i < localKarten.length; i++) {
                        if (localKarten[i] != null) {
                            localKarten[i].serialize(new javax.xml.namespace.QName(
                                    "", "karten"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "karten cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localScbKundeIdTracker) {
                elementList.add(new javax.xml.namespace.QName("", "scbKundeId"));

                if (localScbKundeId != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localScbKundeId));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "scbKundeId cannot be null!!");
                }
            }

            if (localAnredeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "anrede"));

                if (localAnrede == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anrede cannot be null!!");
                }

                elementList.add(localAnrede);
            }

            if (localTitelTracker) {
                elementList.add(new javax.xml.namespace.QName("", "titel"));

                if (localTitel != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTitel));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "titel cannot be null!!");
                }
            }

            if (localNameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "name"));

                if (localName != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localName));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "name cannot be null!!");
                }
            }

            if (localVornameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "vorname"));

                if (localVorname != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localVorname));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorname cannot be null!!");
                }
            }

            if (localGeburtsdatumTracker) {
                elementList.add(new javax.xml.namespace.QName("", "geburtsdatum"));

                if (localGeburtsdatum != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGeburtsdatum));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsdatum cannot be null!!");
                }
            }

            if (localGeburtsnameTracker) {
                elementList.add(new javax.xml.namespace.QName("", "geburtsname"));

                if (localGeburtsname != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGeburtsname));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsname cannot be null!!");
                }
            }

            if (localGeburtsortTracker) {
                elementList.add(new javax.xml.namespace.QName("", "geburtsort"));

                if (localGeburtsort != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGeburtsort));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "geburtsort cannot be null!!");
                }
            }

            if (localStaatsangehoerigkeitTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "staatsangehoerigkeit"));

                if (localStaatsangehoerigkeit == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "staatsangehoerigkeit cannot be null!!");
                }

                elementList.add(localStaatsangehoerigkeit);
            }

            if (localInDeLebendSeitTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "inDeLebendSeit"));

                if (localInDeLebendSeit != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInDeLebendSeit));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "inDeLebendSeit cannot be null!!");
                }
            }

            if (localTelefonTracker) {
                elementList.add(new javax.xml.namespace.QName("", "telefon"));

                if (localTelefon != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTelefon));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "telefon cannot be null!!");
                }
            }

            if (localMobilTracker) {
                elementList.add(new javax.xml.namespace.QName("", "mobil"));

                if (localMobil != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMobil));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "mobil cannot be null!!");
                }
            }

            if (localErreichbarTracker) {
                elementList.add(new javax.xml.namespace.QName("", "erreichbar"));

                if (localErreichbar != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localErreichbar));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "erreichbar cannot be null!!");
                }
            }

            if (localEmailTracker) {
                elementList.add(new javax.xml.namespace.QName("", "email"));

                if (localEmail != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmail));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "email cannot be null!!");
                }
            }

            if (localWerbezustimmungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "werbezustimmung"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWerbezustimmung));
            }

            if (localWerbewegEmailTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "werbewegEmail"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWerbewegEmail));
            }

            if (localWerbewegBriefTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "werbewegBrief"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWerbewegBrief));
            }

            if (localWerbewegTelefonTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "werbewegTelefon"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWerbewegTelefon));
            }

            if (localWerbewegSmsMmsTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "werbewegSmsMms"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localWerbewegSmsMms));
            }

            if (localFamilienstandTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "familienstand"));

                if (localFamilienstand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "familienstand cannot be null!!");
                }

                elementList.add(localFamilienstand);
            }

            if (localTrennungsdatumTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "trennungsdatum"));

                if (localTrennungsdatum != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTrennungsdatum));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "trennungsdatum cannot be null!!");
                }
            }

            if (localErwachseneImHaushaltTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "erwachseneImHaushalt"));

                if (localErwachseneImHaushalt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localErwachseneImHaushalt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "erwachseneImHaushalt cannot be null!!");
                }
            }

            if (localKinderImHaushaltTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kinderImHaushalt"));

                if (localKinderImHaushalt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localKinderImHaushalt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kinderImHaushalt cannot be null!!");
                }
            }

            if (localAnzKindergeldberTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "anzKindergeldber"));

                if (localAnzKindergeldber != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAnzKindergeldber));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "anzKindergeldber cannot be null!!");
                }
            }

            if (localVerhaeltnisZuDn1Tracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "verhaeltnisZuDn1"));

                if (localVerhaeltnisZuDn1 == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "verhaeltnisZuDn1 cannot be null!!");
                }

                elementList.add(localVerhaeltnisZuDn1);
            }

            if (localGemeinsHaushaltMitDn1Tracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "gemeinsHaushaltMitDn1"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGemeinsHaushaltMitDn1));
            }

            if (localGemeinsAdresseMitDn1Tracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "gemeinsAdresseMitDn1"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGemeinsAdresseMitDn1));
            }

            if (localGemeinsKontaktdatenMitDn1Tracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "gemeinsKontaktdatenMitDn1"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGemeinsKontaktdatenMitDn1));
            }

            if (localAufenthaltsgenehmigungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "aufenthaltsgenehmigung"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAufenthaltsgenehmigung));
            }

            if (localAufenthaltsgenehmigungBisTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "aufenthaltsgenehmigungBis"));

                if (localAufenthaltsgenehmigungBis != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAufenthaltsgenehmigungBis));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aufenthaltsgenehmigungBis cannot be null!!");
                }
            }

            if (localArbeitserlaubnisBisTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "arbeitserlaubnisBis"));

                if (localArbeitserlaubnisBis != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localArbeitserlaubnisBis));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "arbeitserlaubnisBis cannot be null!!");
                }
            }

            if (localAktuelleAdresseTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "aktuelleAdresse"));

                if (localAktuelleAdresse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aktuelleAdresse cannot be null!!");
                }

                elementList.add(localAktuelleAdresse);
            }

            if (localVorherigeAdresseTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "vorherigeAdresse"));

                if (localVorherigeAdresse == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorherigeAdresse cannot be null!!");
                }

                elementList.add(localVorherigeAdresse);
            }

            if (localAktuellesBVTracker) {
                elementList.add(new javax.xml.namespace.QName("", "aktuellesBV"));

                if (localAktuellesBV == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "aktuellesBV cannot be null!!");
                }

                elementList.add(localAktuellesBV);
            }

            if (localVorherigesBVTracker) {
                elementList.add(new javax.xml.namespace.QName("", "vorherigesBV"));

                if (localVorherigesBV == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "vorherigesBV cannot be null!!");
                }

                elementList.add(localVorherigesBV);
            }

            if (localEinnahmenAusgabenTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "einnahmenAusgaben"));

                if (localEinnahmenAusgaben == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "einnahmenAusgaben cannot be null!!");
                }

                elementList.add(localEinnahmenAusgaben);
            }

            if (localBankverbindungTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "bankverbindung"));

                if (localBankverbindung == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "bankverbindung cannot be null!!");
                }

                elementList.add(localBankverbindung);
            }

            if (localKontenTracker) {
                if (localKonten != null) {
                    for (int i = 0; i < localKonten.length; i++) {
                        if (localKonten[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "konten"));
                            elementList.add(localKonten[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "konten cannot be null!!");
                }
            }

            if (localKartenTracker) {
                if (localKarten != null) {
                    for (int i = 0; i < localKarten.length; i++) {
                        if (localKarten[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "karten"));
                            elementList.add(localKarten[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "karten cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DarlehnsnehmerXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DarlehnsnehmerXO object = new DarlehnsnehmerXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DarlehnsnehmerXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DarlehnsnehmerXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list38 = new java.util.ArrayList();

                    java.util.ArrayList list39 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "scbKundeId").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "scbKundeId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setScbKundeId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anrede").equals(
                                reader.getName())) {
                        object.setAnrede(AnredeType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "titel").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "titel" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTitel(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "name").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "name" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vorname").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "vorname" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setVorname(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "geburtsdatum").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "geburtsdatum" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeburtsdatum(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "geburtsname").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "geburtsname" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeburtsname(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "geburtsort").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "geburtsort" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGeburtsort(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "staatsangehoerigkeit").equals(reader.getName())) {
                        object.setStaatsangehoerigkeit(LandType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "inDeLebendSeit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "inDeLebendSeit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInDeLebendSeit(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "telefon").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "telefon" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTelefon(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "mobil").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "mobil" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMobil(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "erreichbar").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "erreichbar" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setErreichbar(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "email").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "email" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "werbezustimmung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "werbezustimmung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWerbezustimmung(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "werbewegEmail").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "werbewegEmail" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWerbewegEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "werbewegBrief").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "werbewegBrief" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWerbewegBrief(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "werbewegTelefon").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "werbewegTelefon" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWerbewegTelefon(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "werbewegSmsMms").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "werbewegSmsMms" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWerbewegSmsMms(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "familienstand").equals(
                                reader.getName())) {
                        object.setFamilienstand(FamilienstandType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "trennungsdatum").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "trennungsdatum" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTrennungsdatum(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "erwachseneImHaushalt").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "erwachseneImHaushalt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setErwachseneImHaushalt(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "kinderImHaushalt").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "kinderImHaushalt" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setKinderImHaushalt(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "anzKindergeldber").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "anzKindergeldber" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAnzKindergeldber(org.apache.axis2.databinding.utils.ConverterUtil.convertToInteger(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "verhaeltnisZuDn1").equals(
                                reader.getName())) {
                        object.setVerhaeltnisZuDn1(VerhaeltnisType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "gemeinsHaushaltMitDn1").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gemeinsHaushaltMitDn1" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGemeinsHaushaltMitDn1(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "gemeinsAdresseMitDn1").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gemeinsAdresseMitDn1" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGemeinsAdresseMitDn1(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "gemeinsKontaktdatenMitDn1").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "gemeinsKontaktdatenMitDn1" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGemeinsKontaktdatenMitDn1(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "aufenthaltsgenehmigung").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "aufenthaltsgenehmigung" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAufenthaltsgenehmigung(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "aufenthaltsgenehmigungBis").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "aufenthaltsgenehmigungBis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAufenthaltsgenehmigungBis(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "arbeitserlaubnisBis").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "arbeitserlaubnisBis" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setArbeitserlaubnisBis(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "aktuelleAdresse").equals(
                                reader.getName())) {
                        object.setAktuelleAdresse(AdresseXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vorherigeAdresse").equals(
                                reader.getName())) {
                        object.setVorherigeAdresse(AdresseXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "aktuellesBV").equals(
                                reader.getName())) {
                        object.setAktuellesBV(BeschaeftigungsverhaeltnisXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "vorherigesBV").equals(
                                reader.getName())) {
                        object.setVorherigesBV(BeschaeftigungsverhaeltnisXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "einnahmenAusgaben").equals(reader.getName())) {
                        object.setEinnahmenAusgaben(EinnahmenAusgabenXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "bankverbindung").equals(
                                reader.getName())) {
                        object.setBankverbindung(BankverbindungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "konten").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list38.add(KontoXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone38 = false;

                        while (!loopDone38) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone38 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "konten").equals(
                                            reader.getName())) {
                                    list38.add(KontoXO.Factory.parse(reader));
                                } else {
                                    loopDone38 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setKonten((KontoXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                KontoXO.class, list38));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "karten").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list39.add(KarteXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone39 = false;

                        while (!loopDone39) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone39 = true;
                            } else {
                                if (new javax.xml.namespace.QName("", "karten").equals(
                                            reader.getName())) {
                                    list39.add(KarteXO.Factory.parse(reader));
                                } else {
                                    loopDone39 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setKarten((KarteXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                KarteXO.class, list39));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AuthentisierungXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AuthentisierungXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Benutzer
         */
        protected java.lang.String localBenutzer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBenutzerTracker = false;

        /**
         * field for Passwort
         */
        protected java.lang.String localPasswort;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPasswortTracker = false;

        public boolean isBenutzerSpecified() {
            return localBenutzerTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBenutzer() {
            return localBenutzer;
        }

        /**
         * Auto generated setter method
         * @param param Benutzer
         */
        public void setBenutzer(java.lang.String param) {
            localBenutzerTracker = param != null;

            this.localBenutzer = param;
        }

        public boolean isPasswortSpecified() {
            return localPasswortTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPasswort() {
            return localPasswort;
        }

        /**
         * Auto generated setter method
         * @param param Passwort
         */
        public void setPasswort(java.lang.String param) {
            localPasswortTracker = param != null;

            this.localPasswort = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AuthentisierungXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AuthentisierungXO", xmlWriter);
                }
            }

            if (localBenutzerTracker) {
                namespace = "";
                writeStartElement(null, namespace, "benutzer", xmlWriter);

                if (localBenutzer == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "benutzer cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localBenutzer);
                }

                xmlWriter.writeEndElement();
            }

            if (localPasswortTracker) {
                namespace = "";
                writeStartElement(null, namespace, "passwort", xmlWriter);

                if (localPasswort == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "passwort cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPasswort);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localBenutzerTracker) {
                elementList.add(new javax.xml.namespace.QName("", "benutzer"));

                if (localBenutzer != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBenutzer));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "benutzer cannot be null!!");
                }
            }

            if (localPasswortTracker) {
                elementList.add(new javax.xml.namespace.QName("", "passwort"));

                if (localPasswort != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPasswort));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "passwort cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AuthentisierungXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AuthentisierungXO object = new AuthentisierungXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AuthentisierungXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AuthentisierungXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "benutzer").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "benutzer" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBenutzer(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "passwort").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "passwort" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPasswort(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvertragsangebotResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditvertragsangebotResponse", "ns1");

        /**
         * field for GetKreditvertragsangebotResponse
         */
        protected GetKreditvertragsangebotResult localGetKreditvertragsangebotResponse;

        /**
         * Auto generated getter method
         * @return GetKreditvertragsangebotResult
         */
        public GetKreditvertragsangebotResult getGetKreditvertragsangebotResponse() {
            return localGetKreditvertragsangebotResponse;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditvertragsangebotResponse
         */
        public void setGetKreditvertragsangebotResponse(
            GetKreditvertragsangebotResult param) {
            this.localGetKreditvertragsangebotResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditvertragsangebotResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditvertragsangebotResponse cannot be null!");
            }

            localGetKreditvertragsangebotResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditvertragsangebotResponse.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvertragsangebotResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvertragsangebotResponse object = new GetKreditvertragsangebotResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditvertragsangebotResponse").equals(
                                        reader.getName())) {
                                object.setGetKreditvertragsangebotResponse(GetKreditvertragsangebotResult.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditkonditionen implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditkonditionen", "ns1");

        /**
         * field for GetKreditkonditionen
         */
        protected GetKreditkonditionenParams localGetKreditkonditionen;

        /**
         * Auto generated getter method
         * @return GetKreditkonditionenParams
         */
        public GetKreditkonditionenParams getGetKreditkonditionen() {
            return localGetKreditkonditionen;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditkonditionen
         */
        public void setGetKreditkonditionen(GetKreditkonditionenParams param) {
            this.localGetKreditkonditionen = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditkonditionen == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditkonditionen cannot be null!");
            }

            localGetKreditkonditionen.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditkonditionen.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditkonditionen parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditkonditionen object = new GetKreditkonditionen();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditkonditionen").equals(
                                        reader.getName())) {
                                object.setGetKreditkonditionen(GetKreditkonditionenParams.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvergleichsangebotResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditvergleichsangebotResponse", "ns1");

        /**
         * field for GetKreditvergleichsangebotResponse
         */
        protected GetKreditvergleichsangebotResult localGetKreditvergleichsangebotResponse;

        /**
         * Auto generated getter method
         * @return GetKreditvergleichsangebotResult
         */
        public GetKreditvergleichsangebotResult getGetKreditvergleichsangebotResponse() {
            return localGetKreditvergleichsangebotResponse;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditvergleichsangebotResponse
         */
        public void setGetKreditvergleichsangebotResponse(
            GetKreditvergleichsangebotResult param) {
            this.localGetKreditvergleichsangebotResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditvergleichsangebotResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditvergleichsangebotResponse cannot be null!");
            }

            localGetKreditvergleichsangebotResponse.serialize(MY_QNAME,
                xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditvergleichsangebotResponse.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvergleichsangebotResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvergleichsangebotResponse object = new GetKreditvergleichsangebotResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditvergleichsangebotResponse").equals(
                                        reader.getName())) {
                                object.setGetKreditvergleichsangebotResponse(GetKreditvergleichsangebotResult.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExceptionXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ExceptionXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Text
         */
        protected java.lang.String localText;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTextTracker = false;

        /**
         * field for Code
         */
        protected java.lang.String localCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCodeTracker = false;

        public boolean isTextSpecified() {
            return localTextTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getText() {
            return localText;
        }

        /**
         * Auto generated setter method
         * @param param Text
         */
        public void setText(java.lang.String param) {
            localTextTracker = param != null;

            this.localText = param;
        }

        public boolean isCodeSpecified() {
            return localCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCode() {
            return localCode;
        }

        /**
         * Auto generated setter method
         * @param param Code
         */
        public void setCode(java.lang.String param) {
            localCodeTracker = param != null;

            this.localCode = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ExceptionXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ExceptionXO", xmlWriter);
                }
            }

            if (localTextTracker) {
                namespace = "";
                writeStartElement(null, namespace, "text", xmlWriter);

                if (localText == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "text cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localText);
                }

                xmlWriter.writeEndElement();
            }

            if (localCodeTracker) {
                namespace = "";
                writeStartElement(null, namespace, "code", xmlWriter);

                if (localCode == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "code cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localCode);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localTextTracker) {
                elementList.add(new javax.xml.namespace.QName("", "text"));

                if (localText != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localText));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "text cannot be null!!");
                }
            }

            if (localCodeTracker) {
                elementList.add(new javax.xml.namespace.QName("", "code"));

                if (localCode != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCode));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "code cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ExceptionXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ExceptionXO object = new ExceptionXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ExceptionXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ExceptionXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "text").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "text" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setText(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "code").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "code" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PraegenameType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "praegenameType", "ns1");

        /**
         * field for PraegenameType
         */
        protected java.lang.String localPraegenameType;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPraegenameType() {
            return localPraegenameType;
        }

        /**
         * Auto generated setter method
         * @param param PraegenameType
         */
        public void setPraegenameType(java.lang.String param) {
            if ((java.lang.String.valueOf(param).length() <= 21)) {
                this.localPraegenameType = param;
            } else {
                throw new java.lang.RuntimeException();
            }
        }

        public java.lang.String toString() {
            return localPraegenameType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":praegenameType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "praegenameType", xmlWriter);
                }
            }

            if (localPraegenameType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "praegenameType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localPraegenameType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPraegenameType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static PraegenameType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                PraegenameType returnValue = new PraegenameType();

                returnValue.setPraegenameType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static PraegenameType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return PraegenameType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return PraegenameType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PraegenameType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PraegenameType object = new PraegenameType();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "praegenameType" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setPraegenameType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AdresseXO implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AdresseXO
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Strasse
         */
        protected java.lang.String localStrasse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStrasseTracker = false;

        /**
         * field for Hausnr
         */
        protected java.lang.String localHausnr;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHausnrTracker = false;

        /**
         * field for Plz
         */
        protected java.lang.String localPlz;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPlzTracker = false;

        /**
         * field for Ort
         */
        protected java.lang.String localOrt;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOrtTracker = false;

        /**
         * field for Land
         */
        protected LandType localLand;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLandTracker = false;

        /**
         * field for WohnhaftSeit
         */
        protected java.util.Date localWohnhaftSeit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localWohnhaftSeitTracker = false;

        public boolean isStrasseSpecified() {
            return localStrasseTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStrasse() {
            return localStrasse;
        }

        /**
         * Auto generated setter method
         * @param param Strasse
         */
        public void setStrasse(java.lang.String param) {
            localStrasseTracker = param != null;

            this.localStrasse = param;
        }

        public boolean isHausnrSpecified() {
            return localHausnrTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHausnr() {
            return localHausnr;
        }

        /**
         * Auto generated setter method
         * @param param Hausnr
         */
        public void setHausnr(java.lang.String param) {
            localHausnrTracker = param != null;

            this.localHausnr = param;
        }

        public boolean isPlzSpecified() {
            return localPlzTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPlz() {
            return localPlz;
        }

        /**
         * Auto generated setter method
         * @param param Plz
         */
        public void setPlz(java.lang.String param) {
            localPlzTracker = param != null;

            this.localPlz = param;
        }

        public boolean isOrtSpecified() {
            return localOrtTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOrt() {
            return localOrt;
        }

        /**
         * Auto generated setter method
         * @param param Ort
         */
        public void setOrt(java.lang.String param) {
            localOrtTracker = param != null;

            this.localOrt = param;
        }

        public boolean isLandSpecified() {
            return localLandTracker;
        }

        /**
         * Auto generated getter method
         * @return LandType
         */
        public LandType getLand() {
            return localLand;
        }

        /**
         * Auto generated setter method
         * @param param Land
         */
        public void setLand(LandType param) {
            localLandTracker = param != null;

            this.localLand = param;
        }

        public boolean isWohnhaftSeitSpecified() {
            return localWohnhaftSeitTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getWohnhaftSeit() {
            return localWohnhaftSeit;
        }

        /**
         * Auto generated setter method
         * @param param WohnhaftSeit
         */
        public void setWohnhaftSeit(java.util.Date param) {
            localWohnhaftSeitTracker = param != null;

            this.localWohnhaftSeit = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AdresseXO", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AdresseXO", xmlWriter);
                }
            }

            if (localStrasseTracker) {
                namespace = "";
                writeStartElement(null, namespace, "strasse", xmlWriter);

                if (localStrasse == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "strasse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localStrasse);
                }

                xmlWriter.writeEndElement();
            }

            if (localHausnrTracker) {
                namespace = "";
                writeStartElement(null, namespace, "hausnr", xmlWriter);

                if (localHausnr == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "hausnr cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localHausnr);
                }

                xmlWriter.writeEndElement();
            }

            if (localPlzTracker) {
                namespace = "";
                writeStartElement(null, namespace, "plz", xmlWriter);

                if (localPlz == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "plz cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localPlz);
                }

                xmlWriter.writeEndElement();
            }

            if (localOrtTracker) {
                namespace = "";
                writeStartElement(null, namespace, "ort", xmlWriter);

                if (localOrt == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "ort cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(localOrt);
                }

                xmlWriter.writeEndElement();
            }

            if (localLandTracker) {
                if (localLand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "land cannot be null!!");
                }

                localLand.serialize(new javax.xml.namespace.QName("", "land"),
                    xmlWriter);
            }

            if (localWohnhaftSeitTracker) {
                namespace = "";
                writeStartElement(null, namespace, "wohnhaftSeit", xmlWriter);

                if (localWohnhaftSeit == null) {
                    // write the nil attribute
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnhaftSeit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnhaftSeit));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localStrasseTracker) {
                elementList.add(new javax.xml.namespace.QName("", "strasse"));

                if (localStrasse != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStrasse));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "strasse cannot be null!!");
                }
            }

            if (localHausnrTracker) {
                elementList.add(new javax.xml.namespace.QName("", "hausnr"));

                if (localHausnr != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHausnr));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "hausnr cannot be null!!");
                }
            }

            if (localPlzTracker) {
                elementList.add(new javax.xml.namespace.QName("", "plz"));

                if (localPlz != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPlz));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "plz cannot be null!!");
                }
            }

            if (localOrtTracker) {
                elementList.add(new javax.xml.namespace.QName("", "ort"));

                if (localOrt != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOrt));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ort cannot be null!!");
                }
            }

            if (localLandTracker) {
                elementList.add(new javax.xml.namespace.QName("", "land"));

                if (localLand == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "land cannot be null!!");
                }

                elementList.add(localLand);
            }

            if (localWohnhaftSeitTracker) {
                elementList.add(new javax.xml.namespace.QName("", "wohnhaftSeit"));

                if (localWohnhaftSeit != null) {
                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localWohnhaftSeit));
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "wohnhaftSeit cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AdresseXO parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AdresseXO object = new AdresseXO();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AdresseXO".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AdresseXO) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "strasse").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "strasse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStrasse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "hausnr").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "hausnr" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHausnr(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "plz").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "plz" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPlz(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "ort").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ort" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOrt(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "land").equals(
                                reader.getName())) {
                        object.setLand(LandType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "wohnhaftSeit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "wohnhaftSeit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setWohnhaftSeit(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditantragsstatus implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditantragsstatus", "ns1");

        /**
         * field for GetKreditantragsstatus
         */
        protected GetKreditantragsstatusParams localGetKreditantragsstatus;

        /**
         * Auto generated getter method
         * @return GetKreditantragsstatusParams
         */
        public GetKreditantragsstatusParams getGetKreditantragsstatus() {
            return localGetKreditantragsstatus;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditantragsstatus
         */
        public void setGetKreditantragsstatus(
            GetKreditantragsstatusParams param) {
            this.localGetKreditantragsstatus = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditantragsstatus == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditantragsstatus cannot be null!");
            }

            localGetKreditantragsstatus.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditantragsstatus.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditantragsstatus parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditantragsstatus object = new GetKreditantragsstatus();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditantragsstatus").equals(
                                        reader.getName())) {
                                object.setGetKreditantragsstatus(GetKreditantragsstatusParams.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvertragsangebot implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditvertragsangebot", "ns1");

        /**
         * field for GetKreditvertragsangebot
         */
        protected GetKreditvertragsangebotParams localGetKreditvertragsangebot;

        /**
         * Auto generated getter method
         * @return GetKreditvertragsangebotParams
         */
        public GetKreditvertragsangebotParams getGetKreditvertragsangebot() {
            return localGetKreditvertragsangebot;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditvertragsangebot
         */
        public void setGetKreditvertragsangebot(
            GetKreditvertragsangebotParams param) {
            this.localGetKreditvertragsangebot = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditvertragsangebot == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditvertragsangebot cannot be null!");
            }

            localGetKreditvertragsangebot.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditvertragsangebot.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvertragsangebot parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvertragsangebot object = new GetKreditvertragsangebot();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditvertragsangebot").equals(
                                        reader.getName())) {
                                object.setGetKreditvertragsangebot(GetKreditvertragsangebotParams.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvergleichsangebotResult implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditvergleichsangebotResult
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for Antragsstatus
         */
        protected KreditantragsstatusXO localAntragsstatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAntragsstatusTracker = false;

        /**
         * field for Parameter
         * This was an Array!
         */
        protected ParameterXO[] localParameter;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localParameterTracker = false;

        public boolean isAntragsstatusSpecified() {
            return localAntragsstatusTracker;
        }

        /**
         * Auto generated getter method
         * @return KreditantragsstatusXO
         */
        public KreditantragsstatusXO getAntragsstatus() {
            return localAntragsstatus;
        }

        /**
         * Auto generated setter method
         * @param param Antragsstatus
         */
        public void setAntragsstatus(KreditantragsstatusXO param) {
            localAntragsstatusTracker = param != null;

            this.localAntragsstatus = param;
        }

        public boolean isParameterSpecified() {
            return localParameterTracker;
        }

        /**
         * Auto generated getter method
         * @return ParameterXO[]
         */
        public ParameterXO[] getParameter() {
            return localParameter;
        }

        /**
         * validate the array for Parameter
         */
        protected void validateParameter(ParameterXO[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Parameter
         */
        public void setParameter(ParameterXO[] param) {
            validateParameter(param);

            localParameterTracker = param != null;

            this.localParameter = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param ParameterXO
         */
        public void addParameter(ParameterXO param) {
            if (localParameter == null) {
                localParameter = new ParameterXO[] {  };
            }

            //update the setting tracker
            localParameterTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameter);
            list.add(param);
            this.localParameter = (ParameterXO[]) list.toArray(new ParameterXO[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditvergleichsangebotResult",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditvergleichsangebotResult", xmlWriter);
                }
            }

            if (localAntragsstatusTracker) {
                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                localAntragsstatus.serialize(new javax.xml.namespace.QName("",
                        "antragsstatus"), xmlWriter);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            localParameter[i].serialize(new javax.xml.namespace.QName(
                                    "", "parameter"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAntragsstatusTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "antragsstatus"));

                if (localAntragsstatus == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "antragsstatus cannot be null!!");
                }

                elementList.add(localAntragsstatus);
            }

            if (localParameterTracker) {
                if (localParameter != null) {
                    for (int i = 0; i < localParameter.length; i++) {
                        if (localParameter[i] != null) {
                            elementList.add(new javax.xml.namespace.QName("",
                                    "parameter"));
                            elementList.add(localParameter[i]);
                        } else {
                            // nothing to do
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "parameter cannot be null!!");
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvergleichsangebotResult parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvergleichsangebotResult object = new GetKreditvergleichsangebotResult();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditvergleichsangebotResult".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditvergleichsangebotResult) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list2 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "antragsstatus").equals(
                                reader.getName())) {
                        object.setAntragsstatus(KreditantragsstatusXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("", "parameter").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list2.add(ParameterXO.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone2 = false;

                        while (!loopDone2) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone2 = true;
                            } else {
                                if (new javax.xml.namespace.QName("",
                                            "parameter").equals(
                                            reader.getName())) {
                                    list2.add(ParameterXO.Factory.parse(reader));
                                } else {
                                    loopDone2 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setParameter((ParameterXO[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                ParameterXO.class, list2));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditkonditionenResult implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = GetKreditkonditionenResult
           Namespace URI = http://ws.bco.caps.scb.de
           Namespace Prefix = ns1
         */

        /**
         * field for KreditkonditionenResult
         */
        protected FinanzierungXO localKreditkonditionenResult;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localKreditkonditionenResultTracker = false;

        public boolean isKreditkonditionenResultSpecified() {
            return localKreditkonditionenResultTracker;
        }

        /**
         * Auto generated getter method
         * @return FinanzierungXO
         */
        public FinanzierungXO getKreditkonditionenResult() {
            return localKreditkonditionenResult;
        }

        /**
         * Auto generated setter method
         * @param param KreditkonditionenResult
         */
        public void setKreditkonditionenResult(FinanzierungXO param) {
            localKreditkonditionenResultTracker = param != null;

            this.localKreditkonditionenResult = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":GetKreditkonditionenResult",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "GetKreditkonditionenResult", xmlWriter);
                }
            }

            if (localKreditkonditionenResultTracker) {
                if (localKreditkonditionenResult == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditkonditionenResult cannot be null!!");
                }

                localKreditkonditionenResult.serialize(new javax.xml.namespace.QName(
                        "", "kreditkonditionenResult"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localKreditkonditionenResultTracker) {
                elementList.add(new javax.xml.namespace.QName("",
                        "kreditkonditionenResult"));

                if (localKreditkonditionenResult == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "kreditkonditionenResult cannot be null!!");
                }

                elementList.add(localKreditkonditionenResult);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditkonditionenResult parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditkonditionenResult object = new GetKreditkonditionenResult();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"GetKreditkonditionenResult".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetKreditkonditionenResult) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName("",
                                "kreditkonditionenResult").equals(
                                reader.getName())) {
                        object.setKreditkonditionenResult(FinanzierungXO.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditantragsstatusResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditantragsstatusResponse", "ns1");

        /**
         * field for GetKreditantragsstatusResponse
         */
        protected GetKreditantragsstatusResult localGetKreditantragsstatusResponse;

        /**
         * Auto generated getter method
         * @return GetKreditantragsstatusResult
         */
        public GetKreditantragsstatusResult getGetKreditantragsstatusResponse() {
            return localGetKreditantragsstatusResponse;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditantragsstatusResponse
         */
        public void setGetKreditantragsstatusResponse(
            GetKreditantragsstatusResult param) {
            this.localGetKreditantragsstatusResponse = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditantragsstatusResponse == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditantragsstatusResponse cannot be null!");
            }

            localGetKreditantragsstatusResponse.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditantragsstatusResponse.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditantragsstatusResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditantragsstatusResponse object = new GetKreditantragsstatusResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditantragsstatusResponse").equals(
                                        reader.getName())) {
                                object.setGetKreditantragsstatusResponse(GetKreditantragsstatusResult.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BerufType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "berufType", "ns1");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _UNBEKANNT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "UNBEKANNT");
        public static final java.lang.String _ABM = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ABM");
        public static final java.lang.String _AKADEMIKER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AKADEMIKER");
        public static final java.lang.String _ARBEITER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ARBEITER");
        public static final java.lang.String _ARBEITSLOSER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ARBEITSLOSER");
        public static final java.lang.String _ANGESTELLTER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ANGESTELLTER");
        public static final java.lang.String _ANGESTELLTER_OEFFENTL_DIENST = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ANGESTELLTER_OEFFENTL_DIENST");
        public static final java.lang.String _ANSTELLUNG_AUF_ZEIT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "ANSTELLUNG_AUF_ZEIT");
        public static final java.lang.String _BEAMTER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BEAMTER");
        public static final java.lang.String _BUNDESWEHR_SOLDAT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "BUNDESWEHR_SOLDAT");
        public static final java.lang.String _HOHER_ANGESTELLTER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HOHER_ANGESTELLTER");
        public static final java.lang.String _KFM_ANGESTELLTER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "KFM_ANGESTELLTER");
        public static final java.lang.String _HAUSFRAU_HAUSMANN = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "HAUSFRAU_HAUSMANN");
        public static final java.lang.String _RENTNER_PENSIONAER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "RENTNER_PENSIONAER");
        public static final java.lang.String _SELBSTAENDIGER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SELBSTAENDIGER");
        public static final java.lang.String _SONSTIGER_SELBSTAENDIGER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SONSTIGER_SELBSTAENDIGER");
        public static final java.lang.String _SONSTIGER_GEHOBENER_BERUF = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SONSTIGER_GEHOBENER_BERUF");
        public static final java.lang.String _SONSTIGER_EINFACHER_BERUF = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SONSTIGER_EINFACHER_BERUF");
        public static final java.lang.String _SOZIALHILFE_WEHRPFLICHT_ERSATZDIENST =
            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SOZIALHILFE_WEHRPFLICHT_ERSATZDIENST");
        public static final java.lang.String _STUDENT = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "STUDENT");
        public static final java.lang.String _SCHUELER = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SCHUELER");
        public static final java.lang.String _AZUBI = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "AZUBI");
        public static final BerufType UNBEKANNT = new BerufType(_UNBEKANNT, true);
        public static final BerufType ABM = new BerufType(_ABM, true);
        public static final BerufType AKADEMIKER = new BerufType(_AKADEMIKER,
                true);
        public static final BerufType ARBEITER = new BerufType(_ARBEITER, true);
        public static final BerufType ARBEITSLOSER = new BerufType(_ARBEITSLOSER,
                true);
        public static final BerufType ANGESTELLTER = new BerufType(_ANGESTELLTER,
                true);
        public static final BerufType ANGESTELLTER_OEFFENTL_DIENST = new BerufType(_ANGESTELLTER_OEFFENTL_DIENST,
                true);
        public static final BerufType ANSTELLUNG_AUF_ZEIT = new BerufType(_ANSTELLUNG_AUF_ZEIT,
                true);
        public static final BerufType BEAMTER = new BerufType(_BEAMTER, true);
        public static final BerufType BUNDESWEHR_SOLDAT = new BerufType(_BUNDESWEHR_SOLDAT,
                true);
        public static final BerufType HOHER_ANGESTELLTER = new BerufType(_HOHER_ANGESTELLTER,
                true);
        public static final BerufType KFM_ANGESTELLTER = new BerufType(_KFM_ANGESTELLTER,
                true);
        public static final BerufType HAUSFRAU_HAUSMANN = new BerufType(_HAUSFRAU_HAUSMANN,
                true);
        public static final BerufType RENTNER_PENSIONAER = new BerufType(_RENTNER_PENSIONAER,
                true);
        public static final BerufType SELBSTAENDIGER = new BerufType(_SELBSTAENDIGER,
                true);
        public static final BerufType SONSTIGER_SELBSTAENDIGER = new BerufType(_SONSTIGER_SELBSTAENDIGER,
                true);
        public static final BerufType SONSTIGER_GEHOBENER_BERUF = new BerufType(_SONSTIGER_GEHOBENER_BERUF,
                true);
        public static final BerufType SONSTIGER_EINFACHER_BERUF = new BerufType(_SONSTIGER_EINFACHER_BERUF,
                true);
        public static final BerufType SOZIALHILFE_WEHRPFLICHT_ERSATZDIENST = new BerufType(_SOZIALHILFE_WEHRPFLICHT_ERSATZDIENST,
                true);
        public static final BerufType STUDENT = new BerufType(_STUDENT, true);
        public static final BerufType SCHUELER = new BerufType(_SCHUELER, true);
        public static final BerufType AZUBI = new BerufType(_AZUBI, true);

        /**
         * field for BerufType
         */
        protected java.lang.String localBerufType;

        // Constructor
        protected BerufType(java.lang.String value, boolean isRegisterValue) {
            localBerufType = value;

            if (isRegisterValue) {
                _table_.put(localBerufType, this);
            }
        }

        public java.lang.String getValue() {
            return localBerufType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localBerufType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://ws.bco.caps.scb.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":berufType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "berufType", xmlWriter);
                }
            }

            if (localBerufType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "berufType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localBerufType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                new java.lang.Object[] {
                    org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBerufType)
                }, null);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            public static BerufType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                BerufType enumeration = (BerufType) _table_.get(value);

                if ((enumeration == null) &&
                        !((value == null) || (value.equals("")))) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static BerufType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static BerufType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return BerufType.Factory.fromString(content, namespaceUri);
                } else {
                    return BerufType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BerufType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BerufType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "berufType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = BerufType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = BerufType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetKreditvergleichsangebot implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://ws.bco.caps.scb.de",
                "GetKreditvergleichsangebot", "ns1");

        /**
         * field for GetKreditvergleichsangebot
         */
        protected GetKreditvergleichsangebotParams localGetKreditvergleichsangebot;

        /**
         * Auto generated getter method
         * @return GetKreditvergleichsangebotParams
         */
        public GetKreditvergleichsangebotParams getGetKreditvergleichsangebot() {
            return localGetKreditvergleichsangebot;
        }

        /**
         * Auto generated setter method
         * @param param GetKreditvergleichsangebot
         */
        public void setGetKreditvergleichsangebot(
            GetKreditvergleichsangebotParams param) {
            this.localGetKreditvergleichsangebot = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            if (localGetKreditvergleichsangebot == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "GetKreditvergleichsangebot cannot be null!");
            }

            localGetKreditvergleichsangebot.serialize(MY_QNAME, xmlWriter);
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://ws.bco.caps.scb.de")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            return localGetKreditvergleichsangebot.getPullParser(MY_QNAME);
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetKreditvergleichsangebot parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetKreditvergleichsangebot object = new GetKreditvergleichsangebot();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement()) {
                            if (reader.isStartElement() &&
                                    new javax.xml.namespace.QName(
                                        "http://ws.bco.caps.scb.de",
                                        "GetKreditvergleichsangebot").equals(
                                        reader.getName())) {
                                object.setGetKreditvergleichsangebot(GetKreditvergleichsangebotParams.Factory.parse(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
