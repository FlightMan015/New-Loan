/**
 * PreCheckServiceStub.java
 * <p>
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
package de.joonko.loan.partner.swk.stub;


/*
 *  PreCheckServiceStub java implementation
 */
public class PreCheckServiceStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public PreCheckServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public PreCheckServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

        //Set the soap version
        _serviceClient.getOptions()
                      .setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
    }

    /**
     * Default Constructor
     */
    public PreCheckServiceStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext,
            "https://apitest2.swkbank.de/services/PreCheckService.PreCheckServiceHttpSoap12Endpoint/");
    }

    /**
     * Default Constructor
     */
    public PreCheckServiceStub() throws org.apache.axis2.AxisFault {
        this(
            "https://apitest2.swkbank.de/services/PreCheckService.PreCheckServiceHttpSoap12Endpoint/");
    }

    /**
     * Constructor taking the target endpoint
     */
    public PreCheckServiceStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "PreCheckService" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[2];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://creditdecision.services.oks.swkbank.netempire.de",
                "checkForCredit"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://creditdecision.services.oks.swkbank.netempire.de",
                "getServiceVersion"));
        _service.addOperation(__operation);

        _operations[1] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.swk.stub.PreCheckService#checkForCredit
     * @param checkForCredit1
     */
    public de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse checkForCredit(
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit checkForCredit1)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions().setAction("urn:checkForCredit");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    checkForCredit1,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://creditdecision.services.oks.swkbank.netempire.de",
                            "checkForCredit")),
                    new javax.xml.namespace.QName(
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "checkForCredit"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "checkForCredit"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "checkForCredit"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "checkForCredit"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.swk.stub.PreCheckService#startcheckForCredit
     * @param checkForCredit1
     */
    public void startcheckForCredit(
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit checkForCredit1,
        final de.joonko.loan.partner.swk.stub.PreCheckServiceCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions().setAction("urn:checkForCredit");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                checkForCredit1,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "checkForCredit")),
                new javax.xml.namespace.QName(
                    "http://creditdecision.services.oks.swkbank.netempire.de",
                    "checkForCredit"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultcheckForCredit((de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorcheckForCredit(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "checkForCredit"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "checkForCredit"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "checkForCredit"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorcheckForCredit(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcheckForCredit(f);
                                }
                            } else {
                                callback.receiveErrorcheckForCredit(f);
                            }
                        } else {
                            callback.receiveErrorcheckForCredit(f);
                        }
                    } else {
                        callback.receiveErrorcheckForCredit(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorcheckForCredit(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see de.joonko.loan.partner.swk.stub.PreCheckService#getServiceVersion
     */
    public de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse getServiceVersion()
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = null;

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions().setAction("urn:getServiceVersion");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create a message context
            _messageContext = new org.apache.axis2.context.MessageContext();

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            //Style is taken to be "document". No input parameters
            // according to the WS-Basic profile in this case we have to send an empty soap message
            org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions()
                                                                                   .getSoapVersionURI());
            env = factory.getDefaultEnvelope();

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse.class,
                    getEnvelopeNamespaces(_returnEnv));

            return (de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(), "getServiceVersion"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getServiceVersion"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(), "getServiceVersion"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass, null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see de.joonko.loan.partner.swk.stub.PreCheckService#startgetServiceVersion
     */
    public void startgetServiceVersion(
        final de.joonko.loan.partner.swk.stub.PreCheckServiceCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions().setAction("urn:getServiceVersion");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is taken to be "document". No input parameters
        // according to the WS-Basic profile in this case we have to send an empty soap message
        org.apache.axiom.soap.SOAPFactory factory = getFactory(_operationClient.getOptions()
                                                                               .getSoapVersionURI());
        env = factory.getDefaultEnvelope();

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse.class,
                                getEnvelopeNamespaces(resultEnv));
                        callback.receiveResultgetServiceVersion((de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorgetServiceVersion(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "getServiceVersion"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getServiceVersion"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "getServiceVersion"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass, null);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorgetServiceVersion(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorgetServiceVersion(f);
                                }
                            } else {
                                callback.receiveErrorgetServiceVersion(f);
                            }
                        } else {
                            callback.receiveErrorgetServiceVersion(f);
                        }
                    } else {
                        callback.receiveErrorgetServiceVersion(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorgetServiceVersion(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     *  A utility method that copies the namepaces from the SOAPEnvelope
     */
    private java.util.Map getEnvelopeNamespaces(
        org.apache.axiom.soap.SOAPEnvelope env) {
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();

        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
        }

        return returnMap;
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit param,
        boolean optimizeContent, javax.xml.namespace.QName methodQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type, java.util.Map extraNamespaces)
        throws org.apache.axis2.AxisFault {
        try {
            if (de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit.class.equals(
                        type)) {
                return de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCredit.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.swk.stub.PreCheckServiceStub.CheckForCreditResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse.class.equals(
                        type)) {
                return de.joonko.loan.partner.swk.stub.PreCheckServiceStub.GetServiceVersionResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //https://apitest2.swkbank.de/services/PreCheckService.PreCheckServiceHttpSoap12Endpoint/
    public static class CalculatorRequest extends BaseRequest implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CalculatorRequest
           Namespace URI = http://calculator.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns2
         */

        /**
         * field for Amount
         */
        protected double localAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAmountTracker = false;

        /**
         * field for BalloonInstallment
         */
        protected double localBalloonInstallment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBalloonInstallmentTracker = false;

        /**
         * field for CalculationMode
         */
        protected int localCalculationMode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCalculationModeTracker = false;

        /**
         * field for CollectionDayOfMonth
         */
        protected int localCollectionDayOfMonth;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCollectionDayOfMonthTracker = false;

        /**
         * field for Currency
         */
        protected java.lang.String localCurrency;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTracker = false;

        /**
         * field for DateOfBirth
         */
        protected java.util.Calendar localDateOfBirth;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDateOfBirthTracker = false;

        /**
         * field for DeliveryDate
         */
        protected java.util.Calendar localDeliveryDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDeliveryDateTracker = false;

        /**
         * field for DetailedIntendedUse
         */
        protected java.lang.String localDetailedIntendedUse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDetailedIntendedUseTracker = false;

        /**
         * field for DisagioPercentage
         */
        protected double localDisagioPercentage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDisagioPercentageTracker = false;

        /**
         * field for Duration
         */
        protected int localDuration;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationTracker = false;

        /**
         * field for ExtraInfo
         * This was an Array!
         */
        protected Property[] localExtraInfo;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExtraInfoTracker = false;

        /**
         * field for FavoredInstallment
         */
        protected double localFavoredInstallment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFavoredInstallmentTracker = false;

        /**
         * field for FirstInstallmentDate
         */
        protected java.util.Calendar localFirstInstallmentDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstInstallmentDateTracker = false;

        /**
         * field for Gender
         */
        protected java.lang.String localGender;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGenderTracker = false;

        /**
         * field for HandlingChargePercentage
         */
        protected double localHandlingChargePercentage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHandlingChargePercentageTracker = false;

        /**
         * field for HandlingChargeSeparateAbsolute
         */
        protected double localHandlingChargeSeparateAbsolute;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHandlingChargeSeparateAbsoluteTracker = false;

        /**
         * field for Id
         */
        protected int localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for Insurance
         */
        protected int localInsurance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInsuranceTracker = false;

        /**
         * field for IntendedUse
         */
        protected int localIntendedUse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIntendedUseTracker = false;

        /**
         * field for InterestPercentage
         */
        protected double localInterestPercentage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInterestPercentageTracker = false;

        /**
         * field for StartDate
         */
        protected java.util.Calendar localStartDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStartDateTracker = false;

        /**
         * field for TariffId
         */
        protected int localTariffId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTariffIdTracker = false;

        public boolean isAmountSpecified() {
            return localAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getAmount() {
            return localAmount;
        }

        /**
         * Auto generated setter method
         * @param param Amount
         */
        public void setAmount(double param) {
            // setting primitive attribute tracker to true
            localAmountTracker = !java.lang.Double.isNaN(param);

            this.localAmount = param;
        }

        public boolean isBalloonInstallmentSpecified() {
            return localBalloonInstallmentTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getBalloonInstallment() {
            return localBalloonInstallment;
        }

        /**
         * Auto generated setter method
         * @param param BalloonInstallment
         */
        public void setBalloonInstallment(double param) {
            // setting primitive attribute tracker to true
            localBalloonInstallmentTracker = !java.lang.Double.isNaN(param);

            this.localBalloonInstallment = param;
        }

        public boolean isCalculationModeSpecified() {
            return localCalculationModeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getCalculationMode() {
            return localCalculationMode;
        }

        /**
         * Auto generated setter method
         * @param param CalculationMode
         */
        public void setCalculationMode(int param) {
            // setting primitive attribute tracker to true
            localCalculationModeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localCalculationMode = param;
        }

        public boolean isCollectionDayOfMonthSpecified() {
            return localCollectionDayOfMonthTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getCollectionDayOfMonth() {
            return localCollectionDayOfMonth;
        }

        /**
         * Auto generated setter method
         * @param param CollectionDayOfMonth
         */
        public void setCollectionDayOfMonth(int param) {
            // setting primitive attribute tracker to true
            localCollectionDayOfMonthTracker = param != java.lang.Integer.MIN_VALUE;

            this.localCollectionDayOfMonth = param;
        }

        public boolean isCurrencySpecified() {
            return localCurrencyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCurrency() {
            return localCurrency;
        }

        /**
         * Auto generated setter method
         * @param param Currency
         */
        public void setCurrency(java.lang.String param) {
            localCurrencyTracker = true;

            this.localCurrency = param;
        }

        public boolean isDateOfBirthSpecified() {
            return localDateOfBirthTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getDateOfBirth() {
            return localDateOfBirth;
        }

        /**
         * Auto generated setter method
         * @param param DateOfBirth
         */
        public void setDateOfBirth(java.util.Calendar param) {
            localDateOfBirthTracker = true;

            this.localDateOfBirth = param;
        }

        public boolean isDeliveryDateSpecified() {
            return localDeliveryDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getDeliveryDate() {
            return localDeliveryDate;
        }

        /**
         * Auto generated setter method
         * @param param DeliveryDate
         */
        public void setDeliveryDate(java.util.Calendar param) {
            localDeliveryDateTracker = true;

            this.localDeliveryDate = param;
        }

        public boolean isDetailedIntendedUseSpecified() {
            return localDetailedIntendedUseTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDetailedIntendedUse() {
            return localDetailedIntendedUse;
        }

        /**
         * Auto generated setter method
         * @param param DetailedIntendedUse
         */
        public void setDetailedIntendedUse(java.lang.String param) {
            localDetailedIntendedUseTracker = true;

            this.localDetailedIntendedUse = param;
        }

        public boolean isDisagioPercentageSpecified() {
            return localDisagioPercentageTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getDisagioPercentage() {
            return localDisagioPercentage;
        }

        /**
         * Auto generated setter method
         * @param param DisagioPercentage
         */
        public void setDisagioPercentage(double param) {
            // setting primitive attribute tracker to true
            localDisagioPercentageTracker = !java.lang.Double.isNaN(param);

            this.localDisagioPercentage = param;
        }

        public boolean isDurationSpecified() {
            return localDurationTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getDuration() {
            return localDuration;
        }

        /**
         * Auto generated setter method
         * @param param Duration
         */
        public void setDuration(int param) {
            // setting primitive attribute tracker to true
            localDurationTracker = param != java.lang.Integer.MIN_VALUE;

            this.localDuration = param;
        }

        public boolean isExtraInfoSpecified() {
            return localExtraInfoTracker;
        }

        /**
         * Auto generated getter method
         * @return Property[]
         */
        public Property[] getExtraInfo() {
            return localExtraInfo;
        }

        /**
         * validate the array for ExtraInfo
         */
        protected void validateExtraInfo(Property[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ExtraInfo
         */
        public void setExtraInfo(Property[] param) {
            validateExtraInfo(param);

            localExtraInfoTracker = true;

            this.localExtraInfo = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param Property
         */
        public void addExtraInfo(Property param) {
            if (localExtraInfo == null) {
                localExtraInfo = new Property[] {  };
            }

            //update the setting tracker
            localExtraInfoTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localExtraInfo);
            list.add(param);
            this.localExtraInfo = (Property[]) list.toArray(new Property[list.size()]);
        }

        public boolean isFavoredInstallmentSpecified() {
            return localFavoredInstallmentTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getFavoredInstallment() {
            return localFavoredInstallment;
        }

        /**
         * Auto generated setter method
         * @param param FavoredInstallment
         */
        public void setFavoredInstallment(double param) {
            // setting primitive attribute tracker to true
            localFavoredInstallmentTracker = !java.lang.Double.isNaN(param);

            this.localFavoredInstallment = param;
        }

        public boolean isFirstInstallmentDateSpecified() {
            return localFirstInstallmentDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getFirstInstallmentDate() {
            return localFirstInstallmentDate;
        }

        /**
         * Auto generated setter method
         * @param param FirstInstallmentDate
         */
        public void setFirstInstallmentDate(java.util.Calendar param) {
            localFirstInstallmentDateTracker = true;

            this.localFirstInstallmentDate = param;
        }

        public boolean isGenderSpecified() {
            return localGenderTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGender() {
            return localGender;
        }

        /**
         * Auto generated setter method
         * @param param Gender
         */
        public void setGender(java.lang.String param) {
            localGenderTracker = true;

            this.localGender = param;
        }

        public boolean isHandlingChargePercentageSpecified() {
            return localHandlingChargePercentageTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getHandlingChargePercentage() {
            return localHandlingChargePercentage;
        }

        /**
         * Auto generated setter method
         * @param param HandlingChargePercentage
         */
        public void setHandlingChargePercentage(double param) {
            // setting primitive attribute tracker to true
            localHandlingChargePercentageTracker = !java.lang.Double.isNaN(param);

            this.localHandlingChargePercentage = param;
        }

        public boolean isHandlingChargeSeparateAbsoluteSpecified() {
            return localHandlingChargeSeparateAbsoluteTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getHandlingChargeSeparateAbsolute() {
            return localHandlingChargeSeparateAbsolute;
        }

        /**
         * Auto generated setter method
         * @param param HandlingChargeSeparateAbsolute
         */
        public void setHandlingChargeSeparateAbsolute(double param) {
            // setting primitive attribute tracker to true
            localHandlingChargeSeparateAbsoluteTracker = !java.lang.Double.isNaN(param);

            this.localHandlingChargeSeparateAbsolute = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(int param) {
            // setting primitive attribute tracker to true
            localIdTracker = param != java.lang.Integer.MIN_VALUE;

            this.localId = param;
        }

        public boolean isInsuranceSpecified() {
            return localInsuranceTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getInsurance() {
            return localInsurance;
        }

        /**
         * Auto generated setter method
         * @param param Insurance
         */
        public void setInsurance(int param) {
            // setting primitive attribute tracker to true
            localInsuranceTracker = param != java.lang.Integer.MIN_VALUE;

            this.localInsurance = param;
        }

        public boolean isIntendedUseSpecified() {
            return localIntendedUseTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getIntendedUse() {
            return localIntendedUse;
        }

        /**
         * Auto generated setter method
         * @param param IntendedUse
         */
        public void setIntendedUse(int param) {
            // setting primitive attribute tracker to true
            localIntendedUseTracker = param != java.lang.Integer.MIN_VALUE;

            this.localIntendedUse = param;
        }

        public boolean isInterestPercentageSpecified() {
            return localInterestPercentageTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getInterestPercentage() {
            return localInterestPercentage;
        }

        /**
         * Auto generated setter method
         * @param param InterestPercentage
         */
        public void setInterestPercentage(double param) {
            // setting primitive attribute tracker to true
            localInterestPercentageTracker = !java.lang.Double.isNaN(param);

            this.localInterestPercentage = param;
        }

        public boolean isStartDateSpecified() {
            return localStartDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getStartDate() {
            return localStartDate;
        }

        /**
         * Auto generated setter method
         * @param param StartDate
         */
        public void setStartDate(java.util.Calendar param) {
            localStartDateTracker = true;

            this.localStartDate = param;
        }

        public boolean isTariffIdSpecified() {
            return localTariffIdTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getTariffId() {
            return localTariffId;
        }

        /**
         * Auto generated setter method
         * @param param TariffId
         */
        public void setTariffId(int param) {
            // setting primitive attribute tracker to true
            localTariffIdTracker = param != java.lang.Integer.MIN_VALUE;

            this.localTariffId = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":CalculatorRequest", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "CalculatorRequest", xmlWriter);
            }

            if (localClientIdentificationTracker) {
                if (localClientIdentification == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClientIdentification.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "clientIdentification"), xmlWriter);
                }
            }

            if (localAmountTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "amount", xmlWriter);

                if (java.lang.Double.isNaN(localAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "amount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localBalloonInstallmentTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "balloonInstallment",
                    xmlWriter);

                if (java.lang.Double.isNaN(localBalloonInstallment)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "balloonInstallment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBalloonInstallment));
                }

                xmlWriter.writeEndElement();
            }

            if (localCalculationModeTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "calculationMode", xmlWriter);

                if (localCalculationMode == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "calculationMode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCalculationMode));
                }

                xmlWriter.writeEndElement();
            }

            if (localCollectionDayOfMonthTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "collectionDayOfMonth",
                    xmlWriter);

                if (localCollectionDayOfMonth == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "collectionDayOfMonth cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCollectionDayOfMonth));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "currency", xmlWriter);

                if (localCurrency == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCurrency);
                }

                xmlWriter.writeEndElement();
            }

            if (localDateOfBirthTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "dateOfBirth", xmlWriter);

                if (localDateOfBirth == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfBirth));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeliveryDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "deliveryDate", xmlWriter);

                if (localDeliveryDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDetailedIntendedUseTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "detailedIntendedUse",
                    xmlWriter);

                if (localDetailedIntendedUse == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDetailedIntendedUse);
                }

                xmlWriter.writeEndElement();
            }

            if (localDisagioPercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "disagioPercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localDisagioPercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "disagioPercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDisagioPercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "duration", xmlWriter);

                if (localDuration == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "duration cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDuration));
                }

                xmlWriter.writeEndElement();
            }

            if (localExtraInfoTracker) {
                if (localExtraInfo != null) {
                    for (int i = 0; i < localExtraInfo.length; i++) {
                        if (localExtraInfo[i] != null) {
                            localExtraInfo[i].serialize(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "extraInfo", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "extraInfo", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localFavoredInstallmentTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "favoredInstallment",
                    xmlWriter);

                if (java.lang.Double.isNaN(localFavoredInstallment)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "favoredInstallment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFavoredInstallment));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstInstallmentDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "firstInstallmentDate",
                    xmlWriter);

                if (localFirstInstallmentDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFirstInstallmentDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localGenderTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "gender", xmlWriter);

                if (localGender == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localGender);
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargePercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "handlingChargePercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargePercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargePercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargePercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargeSeparateAbsoluteTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace,
                    "handlingChargeSeparateAbsolute", xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargeSeparateAbsolute)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargeSeparateAbsolute cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargeSeparateAbsolute));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localId));
                }

                xmlWriter.writeEndElement();
            }

            if (localInsuranceTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "insurance", xmlWriter);

                if (localInsurance == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "insurance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInsurance));
                }

                xmlWriter.writeEndElement();
            }

            if (localIntendedUseTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "intendedUse", xmlWriter);

                if (localIntendedUse == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "intendedUse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIntendedUse));
                }

                xmlWriter.writeEndElement();
            }

            if (localInterestPercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "interestPercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localInterestPercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "interestPercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInterestPercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localStartDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "startDate", xmlWriter);

                if (localStartDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStartDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localTariffIdTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "tariffId", xmlWriter);

                if (localTariffId == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "tariffId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTariffId));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            attribList.add(new javax.xml.namespace.QName(
                    "http://www.w3.org/2001/XMLSchema-instance", "type"));
            attribList.add(new javax.xml.namespace.QName(
                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                    "CalculatorRequest"));

            if (localClientIdentificationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification"));

                elementList.add((localClientIdentification == null) ? null
                                                                    : localClientIdentification);
            }

            if (localAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "amount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAmount));
            }

            if (localBalloonInstallmentTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "balloonInstallment"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBalloonInstallment));
            }

            if (localCalculationModeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "calculationMode"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCalculationMode));
            }

            if (localCollectionDayOfMonthTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "collectionDayOfMonth"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCollectionDayOfMonth));
            }

            if (localCurrencyTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "currency"));

                elementList.add((localCurrency == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCurrency));
            }

            if (localDateOfBirthTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "dateOfBirth"));

                elementList.add((localDateOfBirth == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDateOfBirth));
            }

            if (localDeliveryDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "deliveryDate"));

                elementList.add((localDeliveryDate == null) ? null
                                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDeliveryDate));
            }

            if (localDetailedIntendedUseTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "detailedIntendedUse"));

                elementList.add((localDetailedIntendedUse == null) ? null
                                                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDetailedIntendedUse));
            }

            if (localDisagioPercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "disagioPercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDisagioPercentage));
            }

            if (localDurationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "duration"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDuration));
            }

            if (localExtraInfoTracker) {
                if (localExtraInfo != null) {
                    for (int i = 0; i < localExtraInfo.length; i++) {
                        if (localExtraInfo[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"));
                            elementList.add(localExtraInfo[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                            "extraInfo"));
                    elementList.add(localExtraInfo);
                }
            }

            if (localFavoredInstallmentTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "favoredInstallment"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFavoredInstallment));
            }

            if (localFirstInstallmentDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "firstInstallmentDate"));

                elementList.add((localFirstInstallmentDate == null) ? null
                                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFirstInstallmentDate));
            }

            if (localGenderTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "gender"));

                elementList.add((localGender == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGender));
            }

            if (localHandlingChargePercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargePercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargePercentage));
            }

            if (localHandlingChargeSeparateAbsoluteTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargeSeparateAbsolute"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargeSeparateAbsolute));
            }

            if (localIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "id"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localId));
            }

            if (localInsuranceTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "insurance"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInsurance));
            }

            if (localIntendedUseTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "intendedUse"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIntendedUse));
            }

            if (localInterestPercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "interestPercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInterestPercentage));
            }

            if (localStartDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "startDate"));

                elementList.add((localStartDate == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStartDate));
            }

            if (localTariffIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "tariffId"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTariffId));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CalculatorRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CalculatorRequest object = new CalculatorRequest();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CalculatorRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CalculatorRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list12 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "clientIdentification").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClientIdentification(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClientIdentification(ClientIdentification.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "amount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "amount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "balloonInstallment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "balloonInstallment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBalloonInstallment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setBalloonInstallment(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "calculationMode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "calculationMode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCalculationMode(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCalculationMode(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "collectionDayOfMonth").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "collectionDayOfMonth" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCollectionDayOfMonth(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCollectionDayOfMonth(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "currency").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCurrency(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "dateOfBirth").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDateOfBirth(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "deliveryDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDeliveryDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "detailedIntendedUse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDetailedIntendedUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "disagioPercentage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "disagioPercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDisagioPercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDisagioPercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "duration").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "duration" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDuration(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "extraInfo").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list12.add(null);
                            reader.next();
                        } else {
                            list12.add(Property.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone12 = false;

                        while (!loopDone12) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone12 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                            "extraInfo").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list12.add(null);
                                        reader.next();
                                    } else {
                                        list12.add(Property.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone12 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setExtraInfo((Property[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Property.class, list12));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "favoredInstallment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "favoredInstallment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFavoredInstallment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFavoredInstallment(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "firstInstallmentDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setFirstInstallmentDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "gender").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setGender(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargePercentage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "handlingChargePercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargePercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargePercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargeSeparateAbsolute").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "handlingChargeSeparateAbsolute" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargeSeparateAbsolute(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargeSeparateAbsolute(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "id").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setId(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "insurance").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "insurance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInsurance(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInsurance(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "intendedUse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "intendedUse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIntendedUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setIntendedUse(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "interestPercentage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "interestPercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInterestPercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInterestPercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "startDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setStartDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "tariffId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tariffId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTariffId(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setTariffId(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ErrorDetails implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ErrorDetails
           Namespace URI = http://services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns1
         */

        /**
         * field for AffectedProperty
         */
        protected java.lang.String localAffectedProperty;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAffectedPropertyTracker = false;

        /**
         * field for Code
         */
        protected java.lang.String localCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCodeTracker = false;

        /**
         * field for Message
         */
        protected java.lang.String localMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessageTracker = false;

        /**
         * field for TransactionId
         */
        protected java.lang.String localTransactionId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTransactionIdTracker = false;

        /**
         * field for TransactionStartDate
         */
        protected java.util.Calendar localTransactionStartDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTransactionStartDateTracker = false;

        /**
         * field for UserFriendlyMessage
         */
        protected java.lang.String localUserFriendlyMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserFriendlyMessageTracker = false;

        public boolean isAffectedPropertySpecified() {
            return localAffectedPropertyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAffectedProperty() {
            return localAffectedProperty;
        }

        /**
         * Auto generated setter method
         * @param param AffectedProperty
         */
        public void setAffectedProperty(java.lang.String param) {
            localAffectedPropertyTracker = true;

            this.localAffectedProperty = param;
        }

        public boolean isCodeSpecified() {
            return localCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCode() {
            return localCode;
        }

        /**
         * Auto generated setter method
         * @param param Code
         */
        public void setCode(java.lang.String param) {
            localCodeTracker = true;

            this.localCode = param;
        }

        public boolean isMessageSpecified() {
            return localMessageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            localMessageTracker = true;

            this.localMessage = param;
        }

        public boolean isTransactionIdSpecified() {
            return localTransactionIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTransactionId() {
            return localTransactionId;
        }

        /**
         * Auto generated setter method
         * @param param TransactionId
         */
        public void setTransactionId(java.lang.String param) {
            localTransactionIdTracker = true;

            this.localTransactionId = param;
        }

        public boolean isTransactionStartDateSpecified() {
            return localTransactionStartDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getTransactionStartDate() {
            return localTransactionStartDate;
        }

        /**
         * Auto generated setter method
         * @param param TransactionStartDate
         */
        public void setTransactionStartDate(java.util.Calendar param) {
            localTransactionStartDateTracker = true;

            this.localTransactionStartDate = param;
        }

        public boolean isUserFriendlyMessageSpecified() {
            return localUserFriendlyMessageTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUserFriendlyMessage() {
            return localUserFriendlyMessage;
        }

        /**
         * Auto generated setter method
         * @param param UserFriendlyMessage
         */
        public void setUserFriendlyMessage(java.lang.String param) {
            localUserFriendlyMessageTracker = true;

            this.localUserFriendlyMessage = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ErrorDetails", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ErrorDetails", xmlWriter);
                }
            }

            if (localAffectedPropertyTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "affectedProperty", xmlWriter);

                if (localAffectedProperty == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAffectedProperty);
                }

                xmlWriter.writeEndElement();
            }

            if (localCodeTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "code", xmlWriter);

                if (localCode == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localMessageTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "message", xmlWriter);

                if (localMessage == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localMessage);
                }

                xmlWriter.writeEndElement();
            }

            if (localTransactionIdTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "transactionId", xmlWriter);

                if (localTransactionId == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTransactionId);
                }

                xmlWriter.writeEndElement();
            }

            if (localTransactionStartDateTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "transactionStartDate",
                    xmlWriter);

                if (localTransactionStartDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTransactionStartDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localUserFriendlyMessageTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "userFriendlyMessage",
                    xmlWriter);

                if (localUserFriendlyMessage == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUserFriendlyMessage);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAffectedPropertyTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "affectedProperty"));

                elementList.add((localAffectedProperty == null) ? null
                                                                : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAffectedProperty));
            }

            if (localCodeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "code"));

                elementList.add((localCode == null) ? null
                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCode));
            }

            if (localMessageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "message"));

                elementList.add((localMessage == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage));
            }

            if (localTransactionIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "transactionId"));

                elementList.add((localTransactionId == null) ? null
                                                             : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTransactionId));
            }

            if (localTransactionStartDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "transactionStartDate"));

                elementList.add((localTransactionStartDate == null) ? null
                                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTransactionStartDate));
            }

            if (localUserFriendlyMessageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "userFriendlyMessage"));

                elementList.add((localUserFriendlyMessage == null) ? null
                                                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUserFriendlyMessage));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ErrorDetails parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ErrorDetails object = new ErrorDetails();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ErrorDetails".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ErrorDetails) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "affectedProperty").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setAffectedProperty(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "code").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "message").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "transactionId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTransactionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "transactionStartDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTransactionStartDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "userFriendlyMessage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setUserFriendlyMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BankCardsInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BankCardsInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for CreditCard
         */
        protected boolean localCreditCard;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditCardTracker = false;

        /**
         * field for EcCard
         */
        protected boolean localEcCard;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEcCardTracker = false;

        /**
         * field for EcCardNumber
         */
        protected java.lang.String localEcCardNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEcCardNumberTracker = false;

        public boolean isCreditCardSpecified() {
            return localCreditCardTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getCreditCard() {
            return localCreditCard;
        }

        /**
         * Auto generated setter method
         * @param param CreditCard
         */
        public void setCreditCard(boolean param) {
            // setting primitive attribute tracker to true
            localCreditCardTracker = true;

            this.localCreditCard = param;
        }

        public boolean isEcCardSpecified() {
            return localEcCardTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getEcCard() {
            return localEcCard;
        }

        /**
         * Auto generated setter method
         * @param param EcCard
         */
        public void setEcCard(boolean param) {
            // setting primitive attribute tracker to true
            localEcCardTracker = true;

            this.localEcCard = param;
        }

        public boolean isEcCardNumberSpecified() {
            return localEcCardNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEcCardNumber() {
            return localEcCardNumber;
        }

        /**
         * Auto generated setter method
         * @param param EcCardNumber
         */
        public void setEcCardNumber(java.lang.String param) {
            localEcCardNumberTracker = true;

            this.localEcCardNumber = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BankCardsInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BankCardsInformation", xmlWriter);
                }
            }

            if (localCreditCardTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "creditCard", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "creditCard cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreditCard));
                }

                xmlWriter.writeEndElement();
            }

            if (localEcCardTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "ecCard", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ecCard cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEcCard));
                }

                xmlWriter.writeEndElement();
            }

            if (localEcCardNumberTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "ecCardNumber", xmlWriter);

                if (localEcCardNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localEcCardNumber);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCreditCardTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditCard"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditCard));
            }

            if (localEcCardTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "ecCard"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEcCard));
            }

            if (localEcCardNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "ecCardNumber"));

                elementList.add((localEcCardNumber == null) ? null
                                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEcCardNumber));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BankCardsInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BankCardsInformation object = new BankCardsInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BankCardsInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BankCardsInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditCard").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creditCard" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditCard(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "ecCard").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "ecCard" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEcCard(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "ecCardNumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setEcCardNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreditTransfer implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CreditTransfer
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Account
         */
        protected BankingInformation localAccount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccountTracker = false;

        /**
         * field for IntendedUse
         */
        protected java.lang.String localIntendedUse;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIntendedUseTracker = false;

        /**
         * field for LastInstallmentAmount
         */
        protected double localLastInstallmentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastInstallmentAmountTracker = false;

        /**
         * field for LastInstallmentDate
         */
        protected java.util.Calendar localLastInstallmentDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastInstallmentDateTracker = false;

        /**
         * field for MonthlyInstallmentAmount
         */
        protected double localMonthlyInstallmentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMonthlyInstallmentAmountTracker = false;

        /**
         * field for OriginalAmount
         */
        protected double localOriginalAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOriginalAmountTracker = false;

        /**
         * field for Product
         */
        protected java.lang.String localProduct;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProductTracker = false;

        /**
         * field for RemainingAmount
         */
        protected double localRemainingAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRemainingAmountTracker = false;

        public boolean isAccountSpecified() {
            return localAccountTracker;
        }

        /**
         * Auto generated getter method
         * @return BankingInformation
         */
        public BankingInformation getAccount() {
            return localAccount;
        }

        /**
         * Auto generated setter method
         * @param param Account
         */
        public void setAccount(BankingInformation param) {
            localAccountTracker = true;

            this.localAccount = param;
        }

        public boolean isIntendedUseSpecified() {
            return localIntendedUseTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIntendedUse() {
            return localIntendedUse;
        }

        /**
         * Auto generated setter method
         * @param param IntendedUse
         */
        public void setIntendedUse(java.lang.String param) {
            localIntendedUseTracker = true;

            this.localIntendedUse = param;
        }

        public boolean isLastInstallmentAmountSpecified() {
            return localLastInstallmentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getLastInstallmentAmount() {
            return localLastInstallmentAmount;
        }

        /**
         * Auto generated setter method
         * @param param LastInstallmentAmount
         */
        public void setLastInstallmentAmount(double param) {
            // setting primitive attribute tracker to true
            localLastInstallmentAmountTracker = !java.lang.Double.isNaN(param);

            this.localLastInstallmentAmount = param;
        }

        public boolean isLastInstallmentDateSpecified() {
            return localLastInstallmentDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getLastInstallmentDate() {
            return localLastInstallmentDate;
        }

        /**
         * Auto generated setter method
         * @param param LastInstallmentDate
         */
        public void setLastInstallmentDate(java.util.Calendar param) {
            localLastInstallmentDateTracker = true;

            this.localLastInstallmentDate = param;
        }

        public boolean isMonthlyInstallmentAmountSpecified() {
            return localMonthlyInstallmentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getMonthlyInstallmentAmount() {
            return localMonthlyInstallmentAmount;
        }

        /**
         * Auto generated setter method
         * @param param MonthlyInstallmentAmount
         */
        public void setMonthlyInstallmentAmount(double param) {
            // setting primitive attribute tracker to true
            localMonthlyInstallmentAmountTracker = !java.lang.Double.isNaN(param);

            this.localMonthlyInstallmentAmount = param;
        }

        public boolean isOriginalAmountSpecified() {
            return localOriginalAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getOriginalAmount() {
            return localOriginalAmount;
        }

        /**
         * Auto generated setter method
         * @param param OriginalAmount
         */
        public void setOriginalAmount(double param) {
            // setting primitive attribute tracker to true
            localOriginalAmountTracker = !java.lang.Double.isNaN(param);

            this.localOriginalAmount = param;
        }

        public boolean isProductSpecified() {
            return localProductTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getProduct() {
            return localProduct;
        }

        /**
         * Auto generated setter method
         * @param param Product
         */
        public void setProduct(java.lang.String param) {
            localProductTracker = true;

            this.localProduct = param;
        }

        public boolean isRemainingAmountSpecified() {
            return localRemainingAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getRemainingAmount() {
            return localRemainingAmount;
        }

        /**
         * Auto generated setter method
         * @param param RemainingAmount
         */
        public void setRemainingAmount(double param) {
            // setting primitive attribute tracker to true
            localRemainingAmountTracker = !java.lang.Double.isNaN(param);

            this.localRemainingAmount = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":CreditTransfer", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CreditTransfer", xmlWriter);
                }
            }

            if (localAccountTracker) {
                if (localAccount == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "account", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAccount.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "account"), xmlWriter);
                }
            }

            if (localIntendedUseTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "intendedUse", xmlWriter);

                if (localIntendedUse == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localIntendedUse);
                }

                xmlWriter.writeEndElement();
            }

            if (localLastInstallmentAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "lastInstallmentAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localLastInstallmentAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastInstallmentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastInstallmentAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastInstallmentDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "lastInstallmentDate",
                    xmlWriter);

                if (localLastInstallmentDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastInstallmentDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localMonthlyInstallmentAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "monthlyInstallmentAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localMonthlyInstallmentAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "monthlyInstallmentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMonthlyInstallmentAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localOriginalAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "originalAmount", xmlWriter);

                if (java.lang.Double.isNaN(localOriginalAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "originalAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOriginalAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localProductTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "product", xmlWriter);

                if (localProduct == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localProduct);
                }

                xmlWriter.writeEndElement();
            }

            if (localRemainingAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "remainingAmount", xmlWriter);

                if (java.lang.Double.isNaN(localRemainingAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "remainingAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRemainingAmount));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAccountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "account"));

                elementList.add((localAccount == null) ? null : localAccount);
            }

            if (localIntendedUseTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "intendedUse"));

                elementList.add((localIntendedUse == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIntendedUse));
            }

            if (localLastInstallmentAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "lastInstallmentAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLastInstallmentAmount));
            }

            if (localLastInstallmentDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "lastInstallmentDate"));

                elementList.add((localLastInstallmentDate == null) ? null
                                                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLastInstallmentDate));
            }

            if (localMonthlyInstallmentAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "monthlyInstallmentAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMonthlyInstallmentAmount));
            }

            if (localOriginalAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "originalAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localOriginalAmount));
            }

            if (localProductTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "product"));

                elementList.add((localProduct == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localProduct));
            }

            if (localRemainingAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "remainingAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRemainingAmount));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreditTransfer parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreditTransfer object = new CreditTransfer();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreditTransfer".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreditTransfer) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "account").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAccount(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAccount(BankingInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "intendedUse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setIntendedUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "lastInstallmentAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastInstallmentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastInstallmentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setLastInstallmentAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "lastInstallmentDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setLastInstallmentDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "monthlyInstallmentAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "monthlyInstallmentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMonthlyInstallmentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setMonthlyInstallmentAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "originalAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "originalAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOriginalAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setOriginalAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "product").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setProduct(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "remainingAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "remainingAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRemainingAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setRemainingAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ClientIdentification implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ClientIdentification
           Namespace URI = http://services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns1
         */

        /**
         * field for ClientSessionId
         */
        protected java.lang.String localClientSessionId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localClientSessionIdTracker = false;

        /**
         * field for PartnerId
         */
        protected java.lang.String localPartnerId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPartnerIdTracker = false;

        /**
         * field for Password
         */
        protected java.lang.String localPassword;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPasswordTracker = false;

        /**
         * field for RequestId
         */
        protected java.lang.String localRequestId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRequestIdTracker = false;

        /**
         * field for RequestType
         */
        protected int localRequestType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRequestTypeTracker = false;

        /**
         * field for Username
         */
        protected java.lang.String localUsername;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUsernameTracker = false;

        public boolean isClientSessionIdSpecified() {
            return localClientSessionIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getClientSessionId() {
            return localClientSessionId;
        }

        /**
         * Auto generated setter method
         * @param param ClientSessionId
         */
        public void setClientSessionId(java.lang.String param) {
            localClientSessionIdTracker = true;

            this.localClientSessionId = param;
        }

        public boolean isPartnerIdSpecified() {
            return localPartnerIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPartnerId() {
            return localPartnerId;
        }

        /**
         * Auto generated setter method
         * @param param PartnerId
         */
        public void setPartnerId(java.lang.String param) {
            localPartnerIdTracker = true;

            this.localPartnerId = param;
        }

        public boolean isPasswordSpecified() {
            return localPasswordTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPassword() {
            return localPassword;
        }

        /**
         * Auto generated setter method
         * @param param Password
         */
        public void setPassword(java.lang.String param) {
            localPasswordTracker = true;

            this.localPassword = param;
        }

        public boolean isRequestIdSpecified() {
            return localRequestIdTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRequestId() {
            return localRequestId;
        }

        /**
         * Auto generated setter method
         * @param param RequestId
         */
        public void setRequestId(java.lang.String param) {
            localRequestIdTracker = true;

            this.localRequestId = param;
        }

        public boolean isRequestTypeSpecified() {
            return localRequestTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getRequestType() {
            return localRequestType;
        }

        /**
         * Auto generated setter method
         * @param param RequestType
         */
        public void setRequestType(int param) {
            // setting primitive attribute tracker to true
            localRequestTypeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localRequestType = param;
        }

        public boolean isUsernameSpecified() {
            return localUsernameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUsername() {
            return localUsername;
        }

        /**
         * Auto generated setter method
         * @param param Username
         */
        public void setUsername(java.lang.String param) {
            localUsernameTracker = true;

            this.localUsername = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ClientIdentification", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ClientIdentification", xmlWriter);
                }
            }

            if (localClientSessionIdTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "clientSessionId", xmlWriter);

                if (localClientSessionId == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localClientSessionId);
                }

                xmlWriter.writeEndElement();
            }

            if (localPartnerIdTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "partnerId", xmlWriter);

                if (localPartnerId == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localPartnerId);
                }

                xmlWriter.writeEndElement();
            }

            if (localPasswordTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "password", xmlWriter);

                if (localPassword == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localPassword);
                }

                xmlWriter.writeEndElement();
            }

            if (localRequestIdTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "requestId", xmlWriter);

                if (localRequestId == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localRequestId);
                }

                xmlWriter.writeEndElement();
            }

            if (localRequestTypeTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "requestType", xmlWriter);

                if (localRequestType == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "requestType cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRequestType));
                }

                xmlWriter.writeEndElement();
            }

            if (localUsernameTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "username", xmlWriter);

                if (localUsername == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localUsername);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localClientSessionIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientSessionId"));

                elementList.add((localClientSessionId == null) ? null
                                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localClientSessionId));
            }

            if (localPartnerIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "partnerId"));

                elementList.add((localPartnerId == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPartnerId));
            }

            if (localPasswordTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "password"));

                elementList.add((localPassword == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPassword));
            }

            if (localRequestIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "requestId"));

                elementList.add((localRequestId == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRequestId));
            }

            if (localRequestTypeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "requestType"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRequestType));
            }

            if (localUsernameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "username"));

                elementList.add((localUsername == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUsername));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ClientIdentification parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ClientIdentification object = new ClientIdentification();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ClientIdentification".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ClientIdentification) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "clientSessionId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setClientSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "partnerId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setPartnerId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "password").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setPassword(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "requestId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setRequestId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "requestType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "requestType" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRequestType(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setRequestType(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "username").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setUsername(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CheckForCreditResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://creditdecision.services.oks.swkbank.netempire.de",
                "checkForCreditResponse", "ns6");

        /**
         * field for _return
         */
        protected PreCheckResponse local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return PreCheckResponse
         */
        public PreCheckResponse get_return() {
            return local_return;
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(PreCheckResponse param) {
            local_returnTracker = true;

            this.local_return = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://creditdecision.services.oks.swkbank.netempire.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":checkForCreditResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "checkForCreditResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                if (local_return == null) {
                    writeStartElement(null,
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "return", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    local_return.serialize(new javax.xml.namespace.QName(
                            "http://creditdecision.services.oks.swkbank.netempire.de",
                            "return"), xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://creditdecision.services.oks.swkbank.netempire.de")) {
                return "ns6";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "return"));

                elementList.add((local_return == null) ? null : local_return);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CheckForCreditResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CheckForCreditResponse object = new CheckForCreditResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"checkForCreditResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CheckForCreditResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.oks.swkbank.netempire.de",
                                "return").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.set_return(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.set_return(PreCheckResponse.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EmploymentInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = EmploymentInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for EmployedSinceDate
         */
        protected java.util.Calendar localEmployedSinceDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmployedSinceDateTracker = false;

        /**
         * field for EmployerAddress
         */
        protected Address localEmployerAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmployerAddressTracker = false;

        /**
         * field for EmployerChangePlanned
         */
        protected boolean localEmployerChangePlanned;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmployerChangePlannedTracker = false;

        /**
         * field for EmployerName
         */
        protected java.lang.String localEmployerName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmployerNameTracker = false;

        /**
         * field for EmployerPhone
         */
        protected java.lang.String localEmployerPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmployerPhoneTracker = false;

        /**
         * field for InProbationaryPeriod
         */
        protected boolean localInProbationaryPeriod;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInProbationaryPeriodTracker = false;

        /**
         * field for Industry
         */
        protected java.lang.String localIndustry;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIndustryTracker = false;

        /**
         * field for OccupationGroup
         */
        protected int localOccupationGroup;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOccupationGroupTracker = false;

        /**
         * field for OccupationRole
         */
        protected java.lang.String localOccupationRole;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOccupationRoleTracker = false;

        /**
         * field for Temporary
         */
        protected boolean localTemporary;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTemporaryTracker = false;

        /**
         * field for TemporaryUntil
         */
        protected java.util.Calendar localTemporaryUntil;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTemporaryUntilTracker = false;

        public boolean isEmployedSinceDateSpecified() {
            return localEmployedSinceDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getEmployedSinceDate() {
            return localEmployedSinceDate;
        }

        /**
         * Auto generated setter method
         * @param param EmployedSinceDate
         */
        public void setEmployedSinceDate(java.util.Calendar param) {
            localEmployedSinceDateTracker = true;

            this.localEmployedSinceDate = param;
        }

        public boolean isEmployerAddressSpecified() {
            return localEmployerAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return Address
         */
        public Address getEmployerAddress() {
            return localEmployerAddress;
        }

        /**
         * Auto generated setter method
         * @param param EmployerAddress
         */
        public void setEmployerAddress(Address param) {
            localEmployerAddressTracker = true;

            this.localEmployerAddress = param;
        }

        public boolean isEmployerChangePlannedSpecified() {
            return localEmployerChangePlannedTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getEmployerChangePlanned() {
            return localEmployerChangePlanned;
        }

        /**
         * Auto generated setter method
         * @param param EmployerChangePlanned
         */
        public void setEmployerChangePlanned(boolean param) {
            // setting primitive attribute tracker to true
            localEmployerChangePlannedTracker = true;

            this.localEmployerChangePlanned = param;
        }

        public boolean isEmployerNameSpecified() {
            return localEmployerNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmployerName() {
            return localEmployerName;
        }

        /**
         * Auto generated setter method
         * @param param EmployerName
         */
        public void setEmployerName(java.lang.String param) {
            localEmployerNameTracker = true;

            this.localEmployerName = param;
        }

        public boolean isEmployerPhoneSpecified() {
            return localEmployerPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmployerPhone() {
            return localEmployerPhone;
        }

        /**
         * Auto generated setter method
         * @param param EmployerPhone
         */
        public void setEmployerPhone(java.lang.String param) {
            localEmployerPhoneTracker = true;

            this.localEmployerPhone = param;
        }

        public boolean isInProbationaryPeriodSpecified() {
            return localInProbationaryPeriodTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getInProbationaryPeriod() {
            return localInProbationaryPeriod;
        }

        /**
         * Auto generated setter method
         * @param param InProbationaryPeriod
         */
        public void setInProbationaryPeriod(boolean param) {
            // setting primitive attribute tracker to true
            localInProbationaryPeriodTracker = true;

            this.localInProbationaryPeriod = param;
        }

        public boolean isIndustrySpecified() {
            return localIndustryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getIndustry() {
            return localIndustry;
        }

        /**
         * Auto generated setter method
         * @param param Industry
         */
        public void setIndustry(java.lang.String param) {
            localIndustryTracker = true;

            this.localIndustry = param;
        }

        public boolean isOccupationGroupSpecified() {
            return localOccupationGroupTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getOccupationGroup() {
            return localOccupationGroup;
        }

        /**
         * Auto generated setter method
         * @param param OccupationGroup
         */
        public void setOccupationGroup(int param) {
            // setting primitive attribute tracker to true
            localOccupationGroupTracker = param != java.lang.Integer.MIN_VALUE;

            this.localOccupationGroup = param;
        }

        public boolean isOccupationRoleSpecified() {
            return localOccupationRoleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getOccupationRole() {
            return localOccupationRole;
        }

        /**
         * Auto generated setter method
         * @param param OccupationRole
         */
        public void setOccupationRole(java.lang.String param) {
            localOccupationRoleTracker = true;

            this.localOccupationRole = param;
        }

        public boolean isTemporarySpecified() {
            return localTemporaryTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getTemporary() {
            return localTemporary;
        }

        /**
         * Auto generated setter method
         * @param param Temporary
         */
        public void setTemporary(boolean param) {
            // setting primitive attribute tracker to true
            localTemporaryTracker = true;

            this.localTemporary = param;
        }

        public boolean isTemporaryUntilSpecified() {
            return localTemporaryUntilTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getTemporaryUntil() {
            return localTemporaryUntil;
        }

        /**
         * Auto generated setter method
         * @param param TemporaryUntil
         */
        public void setTemporaryUntil(java.util.Calendar param) {
            localTemporaryUntilTracker = true;

            this.localTemporaryUntil = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":EmploymentInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "EmploymentInformation", xmlWriter);
                }
            }

            if (localEmployedSinceDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "employedSinceDate",
                    xmlWriter);

                if (localEmployedSinceDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmployedSinceDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localEmployerAddressTracker) {
                if (localEmployerAddress == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employerAddress", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localEmployerAddress.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "employerAddress"), xmlWriter);
                }
            }

            if (localEmployerChangePlannedTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "employerChangePlanned",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "employerChangePlanned cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEmployerChangePlanned));
                }

                xmlWriter.writeEndElement();
            }

            if (localEmployerNameTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "employerName", xmlWriter);

                if (localEmployerName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localEmployerName);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmployerPhoneTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "employerPhone", xmlWriter);

                if (localEmployerPhone == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localEmployerPhone);
                }

                xmlWriter.writeEndElement();
            }

            if (localInProbationaryPeriodTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "inProbationaryPeriod",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "inProbationaryPeriod cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInProbationaryPeriod));
                }

                xmlWriter.writeEndElement();
            }

            if (localIndustryTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "industry", xmlWriter);

                if (localIndustry == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localIndustry);
                }

                xmlWriter.writeEndElement();
            }

            if (localOccupationGroupTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "occupationGroup", xmlWriter);

                if (localOccupationGroup == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "occupationGroup cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOccupationGroup));
                }

                xmlWriter.writeEndElement();
            }

            if (localOccupationRoleTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "occupationRole", xmlWriter);

                if (localOccupationRole == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localOccupationRole);
                }

                xmlWriter.writeEndElement();
            }

            if (localTemporaryTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "temporary", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "temporary cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTemporary));
                }

                xmlWriter.writeEndElement();
            }

            if (localTemporaryUntilTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "temporaryUntil", xmlWriter);

                if (localTemporaryUntil == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTemporaryUntil));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localEmployedSinceDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employedSinceDate"));

                elementList.add((localEmployedSinceDate == null) ? null
                                                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEmployedSinceDate));
            }

            if (localEmployerAddressTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employerAddress"));

                elementList.add((localEmployerAddress == null) ? null
                                                               : localEmployerAddress);
            }

            if (localEmployerChangePlannedTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employerChangePlanned"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEmployerChangePlanned));
            }

            if (localEmployerNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employerName"));

                elementList.add((localEmployerName == null) ? null
                                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEmployerName));
            }

            if (localEmployerPhoneTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employerPhone"));

                elementList.add((localEmployerPhone == null) ? null
                                                             : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEmployerPhone));
            }

            if (localInProbationaryPeriodTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "inProbationaryPeriod"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInProbationaryPeriod));
            }

            if (localIndustryTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "industry"));

                elementList.add((localIndustry == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIndustry));
            }

            if (localOccupationGroupTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "occupationGroup"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localOccupationGroup));
            }

            if (localOccupationRoleTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "occupationRole"));

                elementList.add((localOccupationRole == null) ? null
                                                              : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localOccupationRole));
            }

            if (localTemporaryTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "temporary"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTemporary));
            }

            if (localTemporaryUntilTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "temporaryUntil"));

                elementList.add((localTemporaryUntil == null) ? null
                                                              : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTemporaryUntil));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EmploymentInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EmploymentInformation object = new EmploymentInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"EmploymentInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EmploymentInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employedSinceDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setEmployedSinceDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employerAddress").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setEmployerAddress(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setEmployerAddress(Address.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employerChangePlanned").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "employerChangePlanned" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEmployerChangePlanned(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employerName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setEmployerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employerPhone").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setEmployerPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "inProbationaryPeriod").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "inProbationaryPeriod" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInProbationaryPeriod(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "industry").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setIndustry(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "occupationGroup").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "occupationGroup" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOccupationGroup(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setOccupationGroup(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "occupationRole").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setOccupationRole(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "temporary").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "temporary" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTemporary(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "temporaryUntil").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTemporaryUntil(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Address implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Address
           Namespace URI = http://util.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns3
         */

        /**
         * field for City
         */
        protected java.lang.String localCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCityTracker = false;

        /**
         * field for Country
         */
        protected java.lang.String localCountry;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCountryTracker = false;

        /**
         * field for District
         */
        protected java.lang.String localDistrict;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDistrictTracker = false;

        /**
         * field for Housenumber
         */
        protected java.lang.String localHousenumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHousenumberTracker = false;

        /**
         * field for Street
         */
        protected java.lang.String localStreet;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStreetTracker = false;

        /**
         * field for Zipcode
         */
        protected java.lang.String localZipcode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localZipcodeTracker = false;

        public boolean isCitySpecified() {
            return localCityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCity() {
            return localCity;
        }

        /**
         * Auto generated setter method
         * @param param City
         */
        public void setCity(java.lang.String param) {
            localCityTracker = true;

            this.localCity = param;
        }

        public boolean isCountrySpecified() {
            return localCountryTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCountry() {
            return localCountry;
        }

        /**
         * Auto generated setter method
         * @param param Country
         */
        public void setCountry(java.lang.String param) {
            localCountryTracker = true;

            this.localCountry = param;
        }

        public boolean isDistrictSpecified() {
            return localDistrictTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDistrict() {
            return localDistrict;
        }

        /**
         * Auto generated setter method
         * @param param District
         */
        public void setDistrict(java.lang.String param) {
            localDistrictTracker = true;

            this.localDistrict = param;
        }

        public boolean isHousenumberSpecified() {
            return localHousenumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHousenumber() {
            return localHousenumber;
        }

        /**
         * Auto generated setter method
         * @param param Housenumber
         */
        public void setHousenumber(java.lang.String param) {
            localHousenumberTracker = true;

            this.localHousenumber = param;
        }

        public boolean isStreetSpecified() {
            return localStreetTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getStreet() {
            return localStreet;
        }

        /**
         * Auto generated setter method
         * @param param Street
         */
        public void setStreet(java.lang.String param) {
            localStreetTracker = true;

            this.localStreet = param;
        }

        public boolean isZipcodeSpecified() {
            return localZipcodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getZipcode() {
            return localZipcode;
        }

        /**
         * Auto generated setter method
         * @param param Zipcode
         */
        public void setZipcode(java.lang.String param) {
            localZipcodeTracker = true;

            this.localZipcode = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://util.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Address", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Address", xmlWriter);
                }
            }

            if (localCityTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "city", xmlWriter);

                if (localCity == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCity);
                }

                xmlWriter.writeEndElement();
            }

            if (localCountryTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "country", xmlWriter);

                if (localCountry == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCountry);
                }

                xmlWriter.writeEndElement();
            }

            if (localDistrictTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "district", xmlWriter);

                if (localDistrict == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDistrict);
                }

                xmlWriter.writeEndElement();
            }

            if (localHousenumberTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "housenumber", xmlWriter);

                if (localHousenumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localHousenumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localStreetTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "street", xmlWriter);

                if (localStreet == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localStreet);
                }

                xmlWriter.writeEndElement();
            }

            if (localZipcodeTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "zipcode", xmlWriter);

                if (localZipcode == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localZipcode);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCityTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "city"));

                elementList.add((localCity == null) ? null
                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCity));
            }

            if (localCountryTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "country"));

                elementList.add((localCountry == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCountry));
            }

            if (localDistrictTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "district"));

                elementList.add((localDistrict == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDistrict));
            }

            if (localHousenumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "housenumber"));

                elementList.add((localHousenumber == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHousenumber));
            }

            if (localStreetTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "street"));

                elementList.add((localStreet == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStreet));
            }

            if (localZipcodeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "zipcode"));

                elementList.add((localZipcode == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localZipcode));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Address parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Address object = new Address();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Address".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Address) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "city").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "country").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCountry(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "district").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDistrict(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "housenumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setHousenumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "street").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setStreet(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "zipcode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setZipcode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class PreCheckResponse extends BaseResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = PreCheckResponse
           Namespace URI = http://creditdecision.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns5
         */

        /**
         * field for CreditOffers
         * This was an Array!
         */
        protected CreditOffer[] localCreditOffers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditOffersTracker = false;

        /**
         * field for MaxCreditAmount
         */
        protected int localMaxCreditAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaxCreditAmountTracker = false;

        /**
         * field for RiskClasses
         * This was an Array!
         */
        protected int[] localRiskClasses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRiskClassesTracker = false;

        public boolean isCreditOffersSpecified() {
            return localCreditOffersTracker;
        }

        /**
         * Auto generated getter method
         * @return CreditOffer[]
         */
        public CreditOffer[] getCreditOffers() {
            return localCreditOffers;
        }

        /**
         * validate the array for CreditOffers
         */
        protected void validateCreditOffers(CreditOffer[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CreditOffers
         */
        public void setCreditOffers(CreditOffer[] param) {
            validateCreditOffers(param);

            localCreditOffersTracker = true;

            this.localCreditOffers = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CreditOffer
         */
        public void addCreditOffers(CreditOffer param) {
            if (localCreditOffers == null) {
                localCreditOffers = new CreditOffer[] {  };
            }

            //update the setting tracker
            localCreditOffersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCreditOffers);
            list.add(param);
            this.localCreditOffers = (CreditOffer[]) list.toArray(new CreditOffer[list.size()]);
        }

        public boolean isMaxCreditAmountSpecified() {
            return localMaxCreditAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getMaxCreditAmount() {
            return localMaxCreditAmount;
        }

        /**
         * Auto generated setter method
         * @param param MaxCreditAmount
         */
        public void setMaxCreditAmount(int param) {
            // setting primitive attribute tracker to true
            localMaxCreditAmountTracker = param != java.lang.Integer.MIN_VALUE;

            this.localMaxCreditAmount = param;
        }

        public boolean isRiskClassesSpecified() {
            return localRiskClassesTracker;
        }

        /**
         * Auto generated getter method
         * @return int[]
         */
        public int[] getRiskClasses() {
            return localRiskClasses;
        }

        /**
         * validate the array for RiskClasses
         */
        protected void validateRiskClasses(int[] param) {
        }

        /**
         * Auto generated setter method
         * @param param RiskClasses
         */
        public void setRiskClasses(int[] param) {
            validateRiskClasses(param);

            localRiskClassesTracker = true;

            this.localRiskClasses = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":PreCheckResponse", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "PreCheckResponse", xmlWriter);
            }

            if (localErrorDetailsTracker) {
                if (localErrorDetails == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localErrorDetails.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "errorDetails"), xmlWriter);
                }
            }

            if (localSuccessTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "success", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "success cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSuccess));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditOffersTracker) {
                if (localCreditOffers != null) {
                    for (int i = 0; i < localCreditOffers.length; i++) {
                        if (localCreditOffers[i] != null) {
                            localCreditOffers[i].serialize(new javax.xml.namespace.QName(
                                    "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditOffers"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                "creditOffers", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                        "creditOffers", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localMaxCreditAmountTracker) {
                namespace = "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "maxCreditAmount", xmlWriter);

                if (localMaxCreditAmount == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "maxCreditAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaxCreditAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localRiskClassesTracker) {
                if (localRiskClasses != null) {
                    namespace = "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd";

                    for (int i = 0; i < localRiskClasses.length; i++) {
                        if (localRiskClasses[i] != java.lang.Integer.MIN_VALUE) {
                            writeStartElement(null, namespace, "riskClasses",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localRiskClasses[i]));
                            xmlWriter.writeEndElement();
                        } else {
                            // write null attribute
                            namespace = "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd";
                            writeStartElement(null, namespace, "riskClasses",
                                xmlWriter);
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    // write the null attribute
                    // write null attribute
                    writeStartElement(null,
                        "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                        "riskClasses", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns5";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            attribList.add(new javax.xml.namespace.QName(
                    "http://www.w3.org/2001/XMLSchema-instance", "type"));
            attribList.add(new javax.xml.namespace.QName(
                    "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                    "PreCheckResponse"));

            if (localErrorDetailsTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails"));

                elementList.add((localErrorDetails == null) ? null
                                                            : localErrorDetails);
            }

            if (localSuccessTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "success"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSuccess));
            }

            if (localCreditOffersTracker) {
                if (localCreditOffers != null) {
                    for (int i = 0; i < localCreditOffers.length; i++) {
                        if (localCreditOffers[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditOffers"));
                            elementList.add(localCreditOffers[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditOffers"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                            "creditOffers"));
                    elementList.add(localCreditOffers);
                }
            }

            if (localMaxCreditAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                        "maxCreditAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMaxCreditAmount));
            }

            if (localRiskClassesTracker) {
                if (localRiskClasses != null) {
                    for (int i = 0; i < localRiskClasses.length; i++) {
                        elementList.add(new javax.xml.namespace.QName(
                                "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                "riskClasses"));
                        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                localRiskClasses[i]));
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                            "riskClasses"));
                    elementList.add(null);
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static PreCheckResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                PreCheckResponse object = new PreCheckResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"PreCheckResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (PreCheckResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list3 = new java.util.ArrayList();

                    java.util.ArrayList list5 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "errorDetails").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setErrorDetails(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setErrorDetails(ErrorDetails.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "success").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "success" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSuccess(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                "creditOffers").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list3.add(null);
                            reader.next();
                        } else {
                            list3.add(CreditOffer.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone3 = false;

                        while (!loopDone3) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone3 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                            "creditOffers").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list3.add(null);
                                        reader.next();
                                    } else {
                                        list3.add(CreditOffer.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone3 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCreditOffers((CreditOffer[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CreditOffer.class, list3));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                "maxCreditAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "maxCreditAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaxCreditAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setMaxCreditAmount(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                "riskClasses").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list5.add(String.valueOf(
                                    java.lang.Integer.MIN_VALUE));

                            reader.next();
                        } else {
                            list5.add(reader.getElementText());
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone5 = false;

                        while (!loopDone5) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone5 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://creditdecision.services.types.oks.swkbank.netempire.de/xsd",
                                            "riskClasses").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list5.add(String.valueOf(
                                                java.lang.Integer.MIN_VALUE));

                                        reader.next();
                                    } else {
                                        list5.add(reader.getElementText());
                                    }
                                } else {
                                    loopDone5 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setRiskClasses((int[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                int.class, list5));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CheckForCredit implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://creditdecision.services.oks.swkbank.netempire.de",
                "checkForCredit", "ns6");

        /**
         * field for Request
         */
        protected ApplicationRequest localRequest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRequestTracker = false;

        public boolean isRequestSpecified() {
            return localRequestTracker;
        }

        /**
         * Auto generated getter method
         * @return ApplicationRequest
         */
        public ApplicationRequest getRequest() {
            return localRequest;
        }

        /**
         * Auto generated setter method
         * @param param Request
         */
        public void setRequest(ApplicationRequest param) {
            localRequestTracker = true;

            this.localRequest = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://creditdecision.services.oks.swkbank.netempire.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":checkForCredit", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "checkForCredit", xmlWriter);
                }
            }

            if (localRequestTracker) {
                if (localRequest == null) {
                    writeStartElement(null,
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "request", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localRequest.serialize(new javax.xml.namespace.QName(
                            "http://creditdecision.services.oks.swkbank.netempire.de",
                            "request"), xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://creditdecision.services.oks.swkbank.netempire.de")) {
                return "ns6";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localRequestTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "request"));

                elementList.add((localRequest == null) ? null : localRequest);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CheckForCredit parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CheckForCredit object = new CheckForCredit();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"checkForCredit".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CheckForCredit) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.oks.swkbank.netempire.de",
                                "request").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setRequest(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setRequest(ApplicationRequest.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BankingInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BankingInformation
           Namespace URI = http://util.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns3
         */

        /**
         * field for AccountHolder
         */
        protected java.lang.String localAccountHolder;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccountHolderTracker = false;

        /**
         * field for AccountNumber
         */
        protected java.lang.String localAccountNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAccountNumberTracker = false;

        /**
         * field for BankCity
         */
        protected java.lang.String localBankCity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankCityTracker = false;

        /**
         * field for BankName
         */
        protected java.lang.String localBankName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankNameTracker = false;

        /**
         * field for BankZipCode
         */
        protected java.lang.String localBankZipCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankZipCodeTracker = false;

        /**
         * field for SortCode
         */
        protected java.lang.String localSortCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSortCodeTracker = false;

        public boolean isAccountHolderSpecified() {
            return localAccountHolderTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAccountHolder() {
            return localAccountHolder;
        }

        /**
         * Auto generated setter method
         * @param param AccountHolder
         */
        public void setAccountHolder(java.lang.String param) {
            localAccountHolderTracker = true;

            this.localAccountHolder = param;
        }

        public boolean isAccountNumberSpecified() {
            return localAccountNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAccountNumber() {
            return localAccountNumber;
        }

        /**
         * Auto generated setter method
         * @param param AccountNumber
         */
        public void setAccountNumber(java.lang.String param) {
            localAccountNumberTracker = true;

            this.localAccountNumber = param;
        }

        public boolean isBankCitySpecified() {
            return localBankCityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBankCity() {
            return localBankCity;
        }

        /**
         * Auto generated setter method
         * @param param BankCity
         */
        public void setBankCity(java.lang.String param) {
            localBankCityTracker = true;

            this.localBankCity = param;
        }

        public boolean isBankNameSpecified() {
            return localBankNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBankName() {
            return localBankName;
        }

        /**
         * Auto generated setter method
         * @param param BankName
         */
        public void setBankName(java.lang.String param) {
            localBankNameTracker = true;

            this.localBankName = param;
        }

        public boolean isBankZipCodeSpecified() {
            return localBankZipCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBankZipCode() {
            return localBankZipCode;
        }

        /**
         * Auto generated setter method
         * @param param BankZipCode
         */
        public void setBankZipCode(java.lang.String param) {
            localBankZipCodeTracker = true;

            this.localBankZipCode = param;
        }

        public boolean isSortCodeSpecified() {
            return localSortCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getSortCode() {
            return localSortCode;
        }

        /**
         * Auto generated setter method
         * @param param SortCode
         */
        public void setSortCode(java.lang.String param) {
            localSortCodeTracker = true;

            this.localSortCode = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://util.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BankingInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BankingInformation", xmlWriter);
                }
            }

            if (localAccountHolderTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "accountHolder", xmlWriter);

                if (localAccountHolder == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAccountHolder);
                }

                xmlWriter.writeEndElement();
            }

            if (localAccountNumberTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "accountNumber", xmlWriter);

                if (localAccountNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAccountNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localBankCityTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "bankCity", xmlWriter);

                if (localBankCity == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localBankCity);
                }

                xmlWriter.writeEndElement();
            }

            if (localBankNameTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "bankName", xmlWriter);

                if (localBankName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localBankName);
                }

                xmlWriter.writeEndElement();
            }

            if (localBankZipCodeTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "bankZipCode", xmlWriter);

                if (localBankZipCode == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localBankZipCode);
                }

                xmlWriter.writeEndElement();
            }

            if (localSortCodeTracker) {
                namespace = "http://util.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "sortCode", xmlWriter);

                if (localSortCode == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localSortCode);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAccountHolderTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "accountHolder"));

                elementList.add((localAccountHolder == null) ? null
                                                             : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAccountHolder));
            }

            if (localAccountNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "accountNumber"));

                elementList.add((localAccountNumber == null) ? null
                                                             : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAccountNumber));
            }

            if (localBankCityTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "bankCity"));

                elementList.add((localBankCity == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBankCity));
            }

            if (localBankNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "bankName"));

                elementList.add((localBankName == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBankName));
            }

            if (localBankZipCodeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "bankZipCode"));

                elementList.add((localBankZipCode == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBankZipCode));
            }

            if (localSortCodeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://util.services.types.oks.swkbank.netempire.de/xsd",
                        "sortCode"));

                elementList.add((localSortCode == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSortCode));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BankingInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BankingInformation object = new BankingInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BankingInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BankingInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "accountHolder").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setAccountHolder(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "accountNumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setAccountNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "bankCity").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBankCity(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "bankName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBankName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "bankZipCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBankZipCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://util.services.types.oks.swkbank.netempire.de/xsd",
                                "sortCode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setSortCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class FamilyInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = FamilyInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for LongTermRelationship
         */
        protected boolean localLongTermRelationship;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLongTermRelationshipTracker = false;

        /**
         * field for MaritalStatus
         */
        protected int localMaritalStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMaritalStatusTracker = false;

        /**
         * field for NumberOfChildren
         */
        protected int localNumberOfChildren;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfChildrenTracker = false;

        public boolean isLongTermRelationshipSpecified() {
            return localLongTermRelationshipTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getLongTermRelationship() {
            return localLongTermRelationship;
        }

        /**
         * Auto generated setter method
         * @param param LongTermRelationship
         */
        public void setLongTermRelationship(boolean param) {
            // setting primitive attribute tracker to true
            localLongTermRelationshipTracker = true;

            this.localLongTermRelationship = param;
        }

        public boolean isMaritalStatusSpecified() {
            return localMaritalStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getMaritalStatus() {
            return localMaritalStatus;
        }

        /**
         * Auto generated setter method
         * @param param MaritalStatus
         */
        public void setMaritalStatus(int param) {
            // setting primitive attribute tracker to true
            localMaritalStatusTracker = param != java.lang.Integer.MIN_VALUE;

            this.localMaritalStatus = param;
        }

        public boolean isNumberOfChildrenSpecified() {
            return localNumberOfChildrenTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getNumberOfChildren() {
            return localNumberOfChildren;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfChildren
         */
        public void setNumberOfChildren(int param) {
            // setting primitive attribute tracker to true
            localNumberOfChildrenTracker = param != java.lang.Integer.MIN_VALUE;

            this.localNumberOfChildren = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":FamilyInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "FamilyInformation", xmlWriter);
                }
            }

            if (localLongTermRelationshipTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "longTermRelationship",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "longTermRelationship cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLongTermRelationship));
                }

                xmlWriter.writeEndElement();
            }

            if (localMaritalStatusTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "maritalStatus", xmlWriter);

                if (localMaritalStatus == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "maritalStatus cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localMaritalStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfChildrenTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "numberOfChildren", xmlWriter);

                if (localNumberOfChildren == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "numberOfChildren cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfChildren));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localLongTermRelationshipTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "longTermRelationship"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLongTermRelationship));
            }

            if (localMaritalStatusTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "maritalStatus"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMaritalStatus));
            }

            if (localNumberOfChildrenTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "numberOfChildren"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNumberOfChildren));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FamilyInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FamilyInformation object = new FamilyInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"FamilyInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (FamilyInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "longTermRelationship").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "longTermRelationship" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLongTermRelationship(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "maritalStatus").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "maritalStatus" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setMaritalStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setMaritalStatus(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "numberOfChildren").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "numberOfChildren" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNumberOfChildren(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setNumberOfChildren(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class NeuralNetworkInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = NeuralNetworkInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Characteristics
         * This was an Array!
         */
        protected NeuralNetworkCharacteristic[] localCharacteristics;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCharacteristicsTracker = false;

        /**
         * field for Type
         */
        protected int localType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeTracker = false;

        /**
         * field for Value
         */
        protected float localValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValueTracker = false;

        public boolean isCharacteristicsSpecified() {
            return localCharacteristicsTracker;
        }

        /**
         * Auto generated getter method
         * @return NeuralNetworkCharacteristic[]
         */
        public NeuralNetworkCharacteristic[] getCharacteristics() {
            return localCharacteristics;
        }

        /**
         * validate the array for Characteristics
         */
        protected void validateCharacteristics(
            NeuralNetworkCharacteristic[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Characteristics
         */
        public void setCharacteristics(NeuralNetworkCharacteristic[] param) {
            validateCharacteristics(param);

            localCharacteristicsTracker = true;

            this.localCharacteristics = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param NeuralNetworkCharacteristic
         */
        public void addCharacteristics(NeuralNetworkCharacteristic param) {
            if (localCharacteristics == null) {
                localCharacteristics = new NeuralNetworkCharacteristic[] {  };
            }

            //update the setting tracker
            localCharacteristicsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCharacteristics);
            list.add(param);
            this.localCharacteristics = (NeuralNetworkCharacteristic[]) list.toArray(new NeuralNetworkCharacteristic[list.size()]);
        }

        public boolean isTypeSpecified() {
            return localTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(int param) {
            // setting primitive attribute tracker to true
            localTypeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localType = param;
        }

        public boolean isValueSpecified() {
            return localValueTracker;
        }

        /**
         * Auto generated getter method
         * @return float
         */
        public float getValue() {
            return localValue;
        }

        /**
         * Auto generated setter method
         * @param param Value
         */
        public void setValue(float param) {
            // setting primitive attribute tracker to true
            localValueTracker = !java.lang.Float.isNaN(param);

            this.localValue = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":NeuralNetworkInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "NeuralNetworkInformation", xmlWriter);
                }
            }

            if (localCharacteristicsTracker) {
                if (localCharacteristics != null) {
                    for (int i = 0; i < localCharacteristics.length; i++) {
                        if (localCharacteristics[i] != null) {
                            localCharacteristics[i].serialize(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "characteristics"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "characteristics", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "characteristics", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localTypeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "type", xmlWriter);

                if (localType == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localType));
                }

                xmlWriter.writeEndElement();
            }

            if (localValueTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "value", xmlWriter);

                if (java.lang.Float.isNaN(localValue)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "value cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localValue));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCharacteristicsTracker) {
                if (localCharacteristics != null) {
                    for (int i = 0; i < localCharacteristics.length; i++) {
                        if (localCharacteristics[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "characteristics"));
                            elementList.add(localCharacteristics[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "characteristics"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "characteristics"));
                    elementList.add(localCharacteristics);
                }
            }

            if (localTypeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "type"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType));
            }

            if (localValueTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "value"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localValue));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static NeuralNetworkInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                NeuralNetworkInformation object = new NeuralNetworkInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"NeuralNetworkInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (NeuralNetworkInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "characteristics").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(NeuralNetworkCharacteristic.Factory.parse(
                                    reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                            "characteristics").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(NeuralNetworkCharacteristic.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCharacteristics((NeuralNetworkCharacteristic[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                NeuralNetworkCharacteristic.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "type").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "type" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setType(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "value").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "value" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setValue(java.lang.Float.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BudgetInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BudgetInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for AlimonyExpenses
         */
        protected int localAlimonyExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAlimonyExpensesTracker = false;

        /**
         * field for ChildAllowance
         */
        protected int localChildAllowance;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localChildAllowanceTracker = false;

        /**
         * field for FurtherExpenses
         */
        protected int localFurtherExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFurtherExpensesTracker = false;

        /**
         * field for GrossIncome
         */
        protected int localGrossIncome;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGrossIncomeTracker = false;

        /**
         * field for InsuranceAndSavingsExpenses
         */
        protected int localInsuranceAndSavingsExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInsuranceAndSavingsExpensesTracker = false;

        /**
         * field for LeasingRates
         */
        protected int localLeasingRates;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLeasingRatesTracker = false;

        /**
         * field for NetIncome
         */
        protected int localNetIncome;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNetIncomeTracker = false;

        /**
         * field for NumberOfPersons
         */
        protected int localNumberOfPersons;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberOfPersonsTracker = false;

        /**
         * field for OtherIncome
         */
        protected int localOtherIncome;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOtherIncomeTracker = false;

        /**
         * field for OtherInstallmentExpenses
         */
        protected int localOtherInstallmentExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOtherInstallmentExpensesTracker = false;

        /**
         * field for PropertyExpenses
         */
        protected int localPropertyExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPropertyExpensesTracker = false;

        /**
         * field for PropertySquareMeters
         */
        protected double localPropertySquareMeters;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPropertySquareMetersTracker = false;

        /**
         * field for PropertyValue
         */
        protected int localPropertyValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPropertyValueTracker = false;

        /**
         * field for ReasonForNoRentExpenses
         */
        protected java.lang.String localReasonForNoRentExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReasonForNoRentExpensesTracker = false;

        /**
         * field for RentExpenses
         */
        protected int localRentExpenses;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRentExpensesTracker = false;

        /**
         * field for RentIncome
         */
        protected int localRentIncome;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localRentIncomeTracker = false;

        /**
         * field for Tax
         */
        protected int localTax;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTaxTracker = false;

        /**
         * field for TaxClass
         */
        protected java.lang.String localTaxClass;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTaxClassTracker = false;

        /**
         * field for TypeOfOtherIncome
         */
        protected java.lang.String localTypeOfOtherIncome;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeOfOtherIncomeTracker = false;

        public boolean isAlimonyExpensesSpecified() {
            return localAlimonyExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getAlimonyExpenses() {
            return localAlimonyExpenses;
        }

        /**
         * Auto generated setter method
         * @param param AlimonyExpenses
         */
        public void setAlimonyExpenses(int param) {
            // setting primitive attribute tracker to true
            localAlimonyExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localAlimonyExpenses = param;
        }

        public boolean isChildAllowanceSpecified() {
            return localChildAllowanceTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getChildAllowance() {
            return localChildAllowance;
        }

        /**
         * Auto generated setter method
         * @param param ChildAllowance
         */
        public void setChildAllowance(int param) {
            // setting primitive attribute tracker to true
            localChildAllowanceTracker = param != java.lang.Integer.MIN_VALUE;

            this.localChildAllowance = param;
        }

        public boolean isFurtherExpensesSpecified() {
            return localFurtherExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getFurtherExpenses() {
            return localFurtherExpenses;
        }

        /**
         * Auto generated setter method
         * @param param FurtherExpenses
         */
        public void setFurtherExpenses(int param) {
            // setting primitive attribute tracker to true
            localFurtherExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localFurtherExpenses = param;
        }

        public boolean isGrossIncomeSpecified() {
            return localGrossIncomeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getGrossIncome() {
            return localGrossIncome;
        }

        /**
         * Auto generated setter method
         * @param param GrossIncome
         */
        public void setGrossIncome(int param) {
            // setting primitive attribute tracker to true
            localGrossIncomeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localGrossIncome = param;
        }

        public boolean isInsuranceAndSavingsExpensesSpecified() {
            return localInsuranceAndSavingsExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getInsuranceAndSavingsExpenses() {
            return localInsuranceAndSavingsExpenses;
        }

        /**
         * Auto generated setter method
         * @param param InsuranceAndSavingsExpenses
         */
        public void setInsuranceAndSavingsExpenses(int param) {
            // setting primitive attribute tracker to true
            localInsuranceAndSavingsExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localInsuranceAndSavingsExpenses = param;
        }

        public boolean isLeasingRatesSpecified() {
            return localLeasingRatesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getLeasingRates() {
            return localLeasingRates;
        }

        /**
         * Auto generated setter method
         * @param param LeasingRates
         */
        public void setLeasingRates(int param) {
            // setting primitive attribute tracker to true
            localLeasingRatesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localLeasingRates = param;
        }

        public boolean isNetIncomeSpecified() {
            return localNetIncomeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getNetIncome() {
            return localNetIncome;
        }

        /**
         * Auto generated setter method
         * @param param NetIncome
         */
        public void setNetIncome(int param) {
            // setting primitive attribute tracker to true
            localNetIncomeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localNetIncome = param;
        }

        public boolean isNumberOfPersonsSpecified() {
            return localNumberOfPersonsTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getNumberOfPersons() {
            return localNumberOfPersons;
        }

        /**
         * Auto generated setter method
         * @param param NumberOfPersons
         */
        public void setNumberOfPersons(int param) {
            // setting primitive attribute tracker to true
            localNumberOfPersonsTracker = param != java.lang.Integer.MIN_VALUE;

            this.localNumberOfPersons = param;
        }

        public boolean isOtherIncomeSpecified() {
            return localOtherIncomeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getOtherIncome() {
            return localOtherIncome;
        }

        /**
         * Auto generated setter method
         * @param param OtherIncome
         */
        public void setOtherIncome(int param) {
            // setting primitive attribute tracker to true
            localOtherIncomeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localOtherIncome = param;
        }

        public boolean isOtherInstallmentExpensesSpecified() {
            return localOtherInstallmentExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getOtherInstallmentExpenses() {
            return localOtherInstallmentExpenses;
        }

        /**
         * Auto generated setter method
         * @param param OtherInstallmentExpenses
         */
        public void setOtherInstallmentExpenses(int param) {
            // setting primitive attribute tracker to true
            localOtherInstallmentExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localOtherInstallmentExpenses = param;
        }

        public boolean isPropertyExpensesSpecified() {
            return localPropertyExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getPropertyExpenses() {
            return localPropertyExpenses;
        }

        /**
         * Auto generated setter method
         * @param param PropertyExpenses
         */
        public void setPropertyExpenses(int param) {
            // setting primitive attribute tracker to true
            localPropertyExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localPropertyExpenses = param;
        }

        public boolean isPropertySquareMetersSpecified() {
            return localPropertySquareMetersTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getPropertySquareMeters() {
            return localPropertySquareMeters;
        }

        /**
         * Auto generated setter method
         * @param param PropertySquareMeters
         */
        public void setPropertySquareMeters(double param) {
            // setting primitive attribute tracker to true
            localPropertySquareMetersTracker = !java.lang.Double.isNaN(param);

            this.localPropertySquareMeters = param;
        }

        public boolean isPropertyValueSpecified() {
            return localPropertyValueTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getPropertyValue() {
            return localPropertyValue;
        }

        /**
         * Auto generated setter method
         * @param param PropertyValue
         */
        public void setPropertyValue(int param) {
            // setting primitive attribute tracker to true
            localPropertyValueTracker = param != java.lang.Integer.MIN_VALUE;

            this.localPropertyValue = param;
        }

        public boolean isReasonForNoRentExpensesSpecified() {
            return localReasonForNoRentExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getReasonForNoRentExpenses() {
            return localReasonForNoRentExpenses;
        }

        /**
         * Auto generated setter method
         * @param param ReasonForNoRentExpenses
         */
        public void setReasonForNoRentExpenses(java.lang.String param) {
            localReasonForNoRentExpensesTracker = true;

            this.localReasonForNoRentExpenses = param;
        }

        public boolean isRentExpensesSpecified() {
            return localRentExpensesTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getRentExpenses() {
            return localRentExpenses;
        }

        /**
         * Auto generated setter method
         * @param param RentExpenses
         */
        public void setRentExpenses(int param) {
            // setting primitive attribute tracker to true
            localRentExpensesTracker = param != java.lang.Integer.MIN_VALUE;

            this.localRentExpenses = param;
        }

        public boolean isRentIncomeSpecified() {
            return localRentIncomeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getRentIncome() {
            return localRentIncome;
        }

        /**
         * Auto generated setter method
         * @param param RentIncome
         */
        public void setRentIncome(int param) {
            // setting primitive attribute tracker to true
            localRentIncomeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localRentIncome = param;
        }

        public boolean isTaxSpecified() {
            return localTaxTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getTax() {
            return localTax;
        }

        /**
         * Auto generated setter method
         * @param param Tax
         */
        public void setTax(int param) {
            // setting primitive attribute tracker to true
            localTaxTracker = param != java.lang.Integer.MIN_VALUE;

            this.localTax = param;
        }

        public boolean isTaxClassSpecified() {
            return localTaxClassTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTaxClass() {
            return localTaxClass;
        }

        /**
         * Auto generated setter method
         * @param param TaxClass
         */
        public void setTaxClass(java.lang.String param) {
            localTaxClassTracker = true;

            this.localTaxClass = param;
        }

        public boolean isTypeOfOtherIncomeSpecified() {
            return localTypeOfOtherIncomeTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTypeOfOtherIncome() {
            return localTypeOfOtherIncome;
        }

        /**
         * Auto generated setter method
         * @param param TypeOfOtherIncome
         */
        public void setTypeOfOtherIncome(java.lang.String param) {
            localTypeOfOtherIncomeTracker = true;

            this.localTypeOfOtherIncome = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BudgetInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BudgetInformation", xmlWriter);
                }
            }

            if (localAlimonyExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "alimonyExpenses", xmlWriter);

                if (localAlimonyExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "alimonyExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAlimonyExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localChildAllowanceTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "childAllowance", xmlWriter);

                if (localChildAllowance == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "childAllowance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localChildAllowance));
                }

                xmlWriter.writeEndElement();
            }

            if (localFurtherExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "furtherExpenses", xmlWriter);

                if (localFurtherExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "furtherExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFurtherExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localGrossIncomeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "grossIncome", xmlWriter);

                if (localGrossIncome == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "grossIncome cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGrossIncome));
                }

                xmlWriter.writeEndElement();
            }

            if (localInsuranceAndSavingsExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace,
                    "insuranceAndSavingsExpenses", xmlWriter);

                if (localInsuranceAndSavingsExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "insuranceAndSavingsExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInsuranceAndSavingsExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localLeasingRatesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "leasingRates", xmlWriter);

                if (localLeasingRates == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "leasingRates cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLeasingRates));
                }

                xmlWriter.writeEndElement();
            }

            if (localNetIncomeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "netIncome", xmlWriter);

                if (localNetIncome == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "netIncome cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNetIncome));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberOfPersonsTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "numberOfPersons", xmlWriter);

                if (localNumberOfPersons == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "numberOfPersons cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNumberOfPersons));
                }

                xmlWriter.writeEndElement();
            }

            if (localOtherIncomeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "otherIncome", xmlWriter);

                if (localOtherIncome == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "otherIncome cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOtherIncome));
                }

                xmlWriter.writeEndElement();
            }

            if (localOtherInstallmentExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "otherInstallmentExpenses",
                    xmlWriter);

                if (localOtherInstallmentExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "otherInstallmentExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localOtherInstallmentExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localPropertyExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "propertyExpenses", xmlWriter);

                if (localPropertyExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "propertyExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPropertyExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localPropertySquareMetersTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "propertySquareMeters",
                    xmlWriter);

                if (java.lang.Double.isNaN(localPropertySquareMeters)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "propertySquareMeters cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPropertySquareMeters));
                }

                xmlWriter.writeEndElement();
            }

            if (localPropertyValueTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "propertyValue", xmlWriter);

                if (localPropertyValue == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "propertyValue cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPropertyValue));
                }

                xmlWriter.writeEndElement();
            }

            if (localReasonForNoRentExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "reasonForNoRentExpenses",
                    xmlWriter);

                if (localReasonForNoRentExpenses == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localReasonForNoRentExpenses);
                }

                xmlWriter.writeEndElement();
            }

            if (localRentExpensesTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "rentExpenses", xmlWriter);

                if (localRentExpenses == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentExpenses cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRentExpenses));
                }

                xmlWriter.writeEndElement();
            }

            if (localRentIncomeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "rentIncome", xmlWriter);

                if (localRentIncome == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "rentIncome cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localRentIncome));
                }

                xmlWriter.writeEndElement();
            }

            if (localTaxTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "tax", xmlWriter);

                if (localTax == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "tax cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTax));
                }

                xmlWriter.writeEndElement();
            }

            if (localTaxClassTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "taxClass", xmlWriter);

                if (localTaxClass == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTaxClass);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeOfOtherIncomeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "typeOfOtherIncome",
                    xmlWriter);

                if (localTypeOfOtherIncome == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTypeOfOtherIncome);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAlimonyExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "alimonyExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAlimonyExpenses));
            }

            if (localChildAllowanceTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "childAllowance"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localChildAllowance));
            }

            if (localFurtherExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "furtherExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFurtherExpenses));
            }

            if (localGrossIncomeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "grossIncome"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGrossIncome));
            }

            if (localInsuranceAndSavingsExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "insuranceAndSavingsExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInsuranceAndSavingsExpenses));
            }

            if (localLeasingRatesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "leasingRates"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLeasingRates));
            }

            if (localNetIncomeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "netIncome"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNetIncome));
            }

            if (localNumberOfPersonsTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "numberOfPersons"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNumberOfPersons));
            }

            if (localOtherIncomeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "otherIncome"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localOtherIncome));
            }

            if (localOtherInstallmentExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "otherInstallmentExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localOtherInstallmentExpenses));
            }

            if (localPropertyExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "propertyExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPropertyExpenses));
            }

            if (localPropertySquareMetersTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "propertySquareMeters"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPropertySquareMeters));
            }

            if (localPropertyValueTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "propertyValue"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPropertyValue));
            }

            if (localReasonForNoRentExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "reasonForNoRentExpenses"));

                elementList.add((localReasonForNoRentExpenses == null) ? null
                                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReasonForNoRentExpenses));
            }

            if (localRentExpensesTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "rentExpenses"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRentExpenses));
            }

            if (localRentIncomeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "rentIncome"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRentIncome));
            }

            if (localTaxTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "tax"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTax));
            }

            if (localTaxClassTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "taxClass"));

                elementList.add((localTaxClass == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTaxClass));
            }

            if (localTypeOfOtherIncomeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "typeOfOtherIncome"));

                elementList.add((localTypeOfOtherIncome == null) ? null
                                                                 : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTypeOfOtherIncome));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BudgetInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BudgetInformation object = new BudgetInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BudgetInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BudgetInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "alimonyExpenses").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "alimonyExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAlimonyExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setAlimonyExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "childAllowance").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "childAllowance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setChildAllowance(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setChildAllowance(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "furtherExpenses").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "furtherExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFurtherExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFurtherExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "grossIncome").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "grossIncome" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGrossIncome(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setGrossIncome(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "insuranceAndSavingsExpenses").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "insuranceAndSavingsExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInsuranceAndSavingsExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInsuranceAndSavingsExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "leasingRates").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "leasingRates" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLeasingRates(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setLeasingRates(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "netIncome").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "netIncome" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNetIncome(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setNetIncome(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "numberOfPersons").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "numberOfPersons" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNumberOfPersons(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setNumberOfPersons(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "otherIncome").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "otherIncome" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOtherIncome(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setOtherIncome(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "otherInstallmentExpenses").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "otherInstallmentExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setOtherInstallmentExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setOtherInstallmentExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "propertyExpenses").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "propertyExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPropertyExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPropertyExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "propertySquareMeters").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "propertySquareMeters" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPropertySquareMeters(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPropertySquareMeters(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "propertyValue").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "propertyValue" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPropertyValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPropertyValue(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "reasonForNoRentExpenses").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setReasonForNoRentExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "rentExpenses").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rentExpenses" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRentExpenses(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setRentExpenses(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "rentIncome").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "rentIncome" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setRentIncome(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setRentIncome(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "tax").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tax" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTax(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setTax(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "taxClass").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTaxClass(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "typeOfOtherIncome").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTypeOfOtherIncome(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Property implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Property
           Namespace URI = http://services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns1
         */

        /**
         * field for Name
         */
        protected java.lang.String localName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNameTracker = false;

        /**
         * field for Value
         */
        protected java.lang.String localValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValueTracker = false;

        public boolean isNameSpecified() {
            return localNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            localNameTracker = true;

            this.localName = param;
        }

        public boolean isValueSpecified() {
            return localValueTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getValue() {
            return localValue;
        }

        /**
         * Auto generated setter method
         * @param param Value
         */
        public void setValue(java.lang.String param) {
            localValueTracker = true;

            this.localValue = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Property", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Property", xmlWriter);
                }
            }

            if (localNameTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "name", xmlWriter);

                if (localName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localName);
                }

                xmlWriter.writeEndElement();
            }

            if (localValueTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "value", xmlWriter);

                if (localValue == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localValue);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "name"));

                elementList.add((localName == null) ? null
                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localName));
            }

            if (localValueTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "value"));

                elementList.add((localValue == null) ? null
                                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localValue));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Property parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Property object = new Property();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Property".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Property) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "name").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "value").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CarInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CarInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Car
         */
        protected boolean localCar;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCarTracker = false;

        /**
         * field for Power
         */
        protected int localPower;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPowerTracker = false;

        /**
         * field for YearOfManufacturing
         */
        protected int localYearOfManufacturing;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localYearOfManufacturingTracker = false;

        public boolean isCarSpecified() {
            return localCarTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getCar() {
            return localCar;
        }

        /**
         * Auto generated setter method
         * @param param Car
         */
        public void setCar(boolean param) {
            // setting primitive attribute tracker to true
            localCarTracker = true;

            this.localCar = param;
        }

        public boolean isPowerSpecified() {
            return localPowerTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getPower() {
            return localPower;
        }

        /**
         * Auto generated setter method
         * @param param Power
         */
        public void setPower(int param) {
            // setting primitive attribute tracker to true
            localPowerTracker = param != java.lang.Integer.MIN_VALUE;

            this.localPower = param;
        }

        public boolean isYearOfManufacturingSpecified() {
            return localYearOfManufacturingTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getYearOfManufacturing() {
            return localYearOfManufacturing;
        }

        /**
         * Auto generated setter method
         * @param param YearOfManufacturing
         */
        public void setYearOfManufacturing(int param) {
            // setting primitive attribute tracker to true
            localYearOfManufacturingTracker = param != java.lang.Integer.MIN_VALUE;

            this.localYearOfManufacturing = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":CarInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CarInformation", xmlWriter);
                }
            }

            if (localCarTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "car", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "car cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCar));
                }

                xmlWriter.writeEndElement();
            }

            if (localPowerTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "power", xmlWriter);

                if (localPower == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "power cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localPower));
                }

                xmlWriter.writeEndElement();
            }

            if (localYearOfManufacturingTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "yearOfManufacturing",
                    xmlWriter);

                if (localYearOfManufacturing == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "yearOfManufacturing cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localYearOfManufacturing));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCarTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "car"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCar));
            }

            if (localPowerTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "power"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPower));
            }

            if (localYearOfManufacturingTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "yearOfManufacturing"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localYearOfManufacturing));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CarInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CarInformation object = new CarInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CarInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CarInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "car").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "car" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCar(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "power").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "power" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setPower(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setPower(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "yearOfManufacturing").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "yearOfManufacturing" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setYearOfManufacturing(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setYearOfManufacturing(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SchufaInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = SchufaInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for SchufaRecords
         * This was an Array!
         */
        protected SchufaRecord[] localSchufaRecords;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSchufaRecordsTracker = false;

        public boolean isSchufaRecordsSpecified() {
            return localSchufaRecordsTracker;
        }

        /**
         * Auto generated getter method
         * @return SchufaRecord[]
         */
        public SchufaRecord[] getSchufaRecords() {
            return localSchufaRecords;
        }

        /**
         * validate the array for SchufaRecords
         */
        protected void validateSchufaRecords(SchufaRecord[] param) {
        }

        /**
         * Auto generated setter method
         * @param param SchufaRecords
         */
        public void setSchufaRecords(SchufaRecord[] param) {
            validateSchufaRecords(param);

            localSchufaRecordsTracker = true;

            this.localSchufaRecords = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param SchufaRecord
         */
        public void addSchufaRecords(SchufaRecord param) {
            if (localSchufaRecords == null) {
                localSchufaRecords = new SchufaRecord[] {  };
            }

            //update the setting tracker
            localSchufaRecordsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localSchufaRecords);
            list.add(param);
            this.localSchufaRecords = (SchufaRecord[]) list.toArray(new SchufaRecord[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":SchufaInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "SchufaInformation", xmlWriter);
                }
            }

            if (localSchufaRecordsTracker) {
                if (localSchufaRecords != null) {
                    for (int i = 0; i < localSchufaRecords.length; i++) {
                        if (localSchufaRecords[i] != null) {
                            localSchufaRecords[i].serialize(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "schufaRecords"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "schufaRecords", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "schufaRecords", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localSchufaRecordsTracker) {
                if (localSchufaRecords != null) {
                    for (int i = 0; i < localSchufaRecords.length; i++) {
                        if (localSchufaRecords[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "schufaRecords"));
                            elementList.add(localSchufaRecords[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "schufaRecords"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "schufaRecords"));
                    elementList.add(localSchufaRecords);
                }
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SchufaInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SchufaInformation object = new SchufaInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"SchufaInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SchufaInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "schufaRecords").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list1.add(null);
                            reader.next();
                        } else {
                            list1.add(SchufaRecord.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                            "schufaRecords").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list1.add(null);
                                        reader.next();
                                    } else {
                                        list1.add(SchufaRecord.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setSchufaRecords((SchufaRecord[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                SchufaRecord.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ApplicationRequest extends CalculatorRequest
        implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ApplicationRequest
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for CollectionAccount
         */
        protected BankingInformation localCollectionAccount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCollectionAccountTracker = false;

        /**
         * field for CreditTransfers
         * This was an Array!
         */
        protected CreditTransfer[] localCreditTransfers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditTransfersTracker = false;

        /**
         * field for CreditUsers
         * This was an Array!
         */
        protected CreditUser[] localCreditUsers;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditUsersTracker = false;

        /**
         * field for PaymentAccount
         */
        protected BankingInformation localPaymentAccount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPaymentAccountTracker = false;

        public boolean isCollectionAccountSpecified() {
            return localCollectionAccountTracker;
        }

        /**
         * Auto generated getter method
         * @return BankingInformation
         */
        public BankingInformation getCollectionAccount() {
            return localCollectionAccount;
        }

        /**
         * Auto generated setter method
         * @param param CollectionAccount
         */
        public void setCollectionAccount(BankingInformation param) {
            localCollectionAccountTracker = true;

            this.localCollectionAccount = param;
        }

        public boolean isCreditTransfersSpecified() {
            return localCreditTransfersTracker;
        }

        /**
         * Auto generated getter method
         * @return CreditTransfer[]
         */
        public CreditTransfer[] getCreditTransfers() {
            return localCreditTransfers;
        }

        /**
         * validate the array for CreditTransfers
         */
        protected void validateCreditTransfers(CreditTransfer[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CreditTransfers
         */
        public void setCreditTransfers(CreditTransfer[] param) {
            validateCreditTransfers(param);

            localCreditTransfersTracker = true;

            this.localCreditTransfers = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CreditTransfer
         */
        public void addCreditTransfers(CreditTransfer param) {
            if (localCreditTransfers == null) {
                localCreditTransfers = new CreditTransfer[] {  };
            }

            //update the setting tracker
            localCreditTransfersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCreditTransfers);
            list.add(param);
            this.localCreditTransfers = (CreditTransfer[]) list.toArray(new CreditTransfer[list.size()]);
        }

        public boolean isCreditUsersSpecified() {
            return localCreditUsersTracker;
        }

        /**
         * Auto generated getter method
         * @return CreditUser[]
         */
        public CreditUser[] getCreditUsers() {
            return localCreditUsers;
        }

        /**
         * validate the array for CreditUsers
         */
        protected void validateCreditUsers(CreditUser[] param) {
        }

        /**
         * Auto generated setter method
         * @param param CreditUsers
         */
        public void setCreditUsers(CreditUser[] param) {
            validateCreditUsers(param);

            localCreditUsersTracker = true;

            this.localCreditUsers = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param CreditUser
         */
        public void addCreditUsers(CreditUser param) {
            if (localCreditUsers == null) {
                localCreditUsers = new CreditUser[] {  };
            }

            //update the setting tracker
            localCreditUsersTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localCreditUsers);
            list.add(param);
            this.localCreditUsers = (CreditUser[]) list.toArray(new CreditUser[list.size()]);
        }

        public boolean isPaymentAccountSpecified() {
            return localPaymentAccountTracker;
        }

        /**
         * Auto generated getter method
         * @return BankingInformation
         */
        public BankingInformation getPaymentAccount() {
            return localPaymentAccount;
        }

        /**
         * Auto generated setter method
         * @param param PaymentAccount
         */
        public void setPaymentAccount(BankingInformation param) {
            localPaymentAccountTracker = true;

            this.localPaymentAccount = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://credit.services.types.oks.swkbank.netempire.de/xsd");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":ApplicationRequest", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "ApplicationRequest", xmlWriter);
            }

            if (localClientIdentificationTracker) {
                if (localClientIdentification == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClientIdentification.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "clientIdentification"), xmlWriter);
                }
            }

            if (localAmountTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "amount", xmlWriter);

                if (java.lang.Double.isNaN(localAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "amount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localBalloonInstallmentTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "balloonInstallment",
                    xmlWriter);

                if (java.lang.Double.isNaN(localBalloonInstallment)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "balloonInstallment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBalloonInstallment));
                }

                xmlWriter.writeEndElement();
            }

            if (localCalculationModeTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "calculationMode", xmlWriter);

                if (localCalculationMode == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "calculationMode cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCalculationMode));
                }

                xmlWriter.writeEndElement();
            }

            if (localCollectionDayOfMonthTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "collectionDayOfMonth",
                    xmlWriter);

                if (localCollectionDayOfMonth == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "collectionDayOfMonth cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCollectionDayOfMonth));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "currency", xmlWriter);

                if (localCurrency == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCurrency);
                }

                xmlWriter.writeEndElement();
            }

            if (localDateOfBirthTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "dateOfBirth", xmlWriter);

                if (localDateOfBirth == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDateOfBirth));
                }

                xmlWriter.writeEndElement();
            }

            if (localDeliveryDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "deliveryDate", xmlWriter);

                if (localDeliveryDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDeliveryDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localDetailedIntendedUseTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "detailedIntendedUse",
                    xmlWriter);

                if (localDetailedIntendedUse == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDetailedIntendedUse);
                }

                xmlWriter.writeEndElement();
            }

            if (localDisagioPercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "disagioPercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localDisagioPercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "disagioPercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDisagioPercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "duration", xmlWriter);

                if (localDuration == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "duration cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDuration));
                }

                xmlWriter.writeEndElement();
            }

            if (localExtraInfoTracker) {
                if (localExtraInfo != null) {
                    for (int i = 0; i < localExtraInfo.length; i++) {
                        if (localExtraInfo[i] != null) {
                            localExtraInfo[i].serialize(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "extraInfo", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "extraInfo", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localFavoredInstallmentTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "favoredInstallment",
                    xmlWriter);

                if (java.lang.Double.isNaN(localFavoredInstallment)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "favoredInstallment cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFavoredInstallment));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstInstallmentDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "firstInstallmentDate",
                    xmlWriter);

                if (localFirstInstallmentDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFirstInstallmentDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localGenderTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "gender", xmlWriter);

                if (localGender == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localGender);
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargePercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "handlingChargePercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargePercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargePercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargePercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargeSeparateAbsoluteTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace,
                    "handlingChargeSeparateAbsolute", xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargeSeparateAbsolute)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargeSeparateAbsolute cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargeSeparateAbsolute));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localId));
                }

                xmlWriter.writeEndElement();
            }

            if (localInsuranceTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "insurance", xmlWriter);

                if (localInsurance == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "insurance cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInsurance));
                }

                xmlWriter.writeEndElement();
            }

            if (localIntendedUseTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "intendedUse", xmlWriter);

                if (localIntendedUse == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "intendedUse cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIntendedUse));
                }

                xmlWriter.writeEndElement();
            }

            if (localInterestPercentageTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "interestPercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localInterestPercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "interestPercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInterestPercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localStartDateTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "startDate", xmlWriter);

                if (localStartDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStartDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localTariffIdTracker) {
                namespace = "http://calculator.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "tariffId", xmlWriter);

                if (localTariffId == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "tariffId cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTariffId));
                }

                xmlWriter.writeEndElement();
            }

            if (localCollectionAccountTracker) {
                if (localCollectionAccount == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "collectionAccount", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localCollectionAccount.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "collectionAccount"), xmlWriter);
                }
            }

            if (localCreditTransfersTracker) {
                if (localCreditTransfers != null) {
                    for (int i = 0; i < localCreditTransfers.length; i++) {
                        if (localCreditTransfers[i] != null) {
                            localCreditTransfers[i].serialize(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditTransfers"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditTransfers", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditTransfers", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localCreditUsersTracker) {
                if (localCreditUsers != null) {
                    for (int i = 0; i < localCreditUsers.length; i++) {
                        if (localCreditUsers[i] != null) {
                            localCreditUsers[i].serialize(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditUsers"), xmlWriter);
                        } else {
                            writeStartElement(null,
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditUsers", xmlWriter);

                            // write the nil attribute
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditUsers", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localPaymentAccountTracker) {
                if (localPaymentAccount == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "paymentAccount", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localPaymentAccount.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "paymentAccount"), xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            attribList.add(new javax.xml.namespace.QName(
                    "http://www.w3.org/2001/XMLSchema-instance", "type"));
            attribList.add(new javax.xml.namespace.QName(
                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                    "ApplicationRequest"));

            if (localClientIdentificationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification"));

                elementList.add((localClientIdentification == null) ? null
                                                                    : localClientIdentification);
            }

            if (localAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "amount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAmount));
            }

            if (localBalloonInstallmentTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "balloonInstallment"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBalloonInstallment));
            }

            if (localCalculationModeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "calculationMode"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCalculationMode));
            }

            if (localCollectionDayOfMonthTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "collectionDayOfMonth"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCollectionDayOfMonth));
            }

            if (localCurrencyTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "currency"));

                elementList.add((localCurrency == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCurrency));
            }

            if (localDateOfBirthTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "dateOfBirth"));

                elementList.add((localDateOfBirth == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDateOfBirth));
            }

            if (localDeliveryDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "deliveryDate"));

                elementList.add((localDeliveryDate == null) ? null
                                                            : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDeliveryDate));
            }

            if (localDetailedIntendedUseTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "detailedIntendedUse"));

                elementList.add((localDetailedIntendedUse == null) ? null
                                                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDetailedIntendedUse));
            }

            if (localDisagioPercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "disagioPercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDisagioPercentage));
            }

            if (localDurationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "duration"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDuration));
            }

            if (localExtraInfoTracker) {
                if (localExtraInfo != null) {
                    for (int i = 0; i < localExtraInfo.length; i++) {
                        if (localExtraInfo[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"));
                            elementList.add(localExtraInfo[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                    "extraInfo"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                            "extraInfo"));
                    elementList.add(localExtraInfo);
                }
            }

            if (localFavoredInstallmentTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "favoredInstallment"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFavoredInstallment));
            }

            if (localFirstInstallmentDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "firstInstallmentDate"));

                elementList.add((localFirstInstallmentDate == null) ? null
                                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFirstInstallmentDate));
            }

            if (localGenderTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "gender"));

                elementList.add((localGender == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGender));
            }

            if (localHandlingChargePercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargePercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargePercentage));
            }

            if (localHandlingChargeSeparateAbsoluteTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargeSeparateAbsolute"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargeSeparateAbsolute));
            }

            if (localIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "id"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localId));
            }

            if (localInsuranceTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "insurance"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInsurance));
            }

            if (localIntendedUseTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "intendedUse"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIntendedUse));
            }

            if (localInterestPercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "interestPercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInterestPercentage));
            }

            if (localStartDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "startDate"));

                elementList.add((localStartDate == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStartDate));
            }

            if (localTariffIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                        "tariffId"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTariffId));
            }

            if (localCollectionAccountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "collectionAccount"));

                elementList.add((localCollectionAccount == null) ? null
                                                                 : localCollectionAccount);
            }

            if (localCreditTransfersTracker) {
                if (localCreditTransfers != null) {
                    for (int i = 0; i < localCreditTransfers.length; i++) {
                        if (localCreditTransfers[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditTransfers"));
                            elementList.add(localCreditTransfers[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditTransfers"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "creditTransfers"));
                    elementList.add(localCreditTransfers);
                }
            }

            if (localCreditUsersTracker) {
                if (localCreditUsers != null) {
                    for (int i = 0; i < localCreditUsers.length; i++) {
                        if (localCreditUsers[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditUsers"));
                            elementList.add(localCreditUsers[i]);
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "creditUsers"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "creditUsers"));
                    elementList.add(localCreditUsers);
                }
            }

            if (localPaymentAccountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "paymentAccount"));

                elementList.add((localPaymentAccount == null) ? null
                                                              : localPaymentAccount);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ApplicationRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ApplicationRequest object = new ApplicationRequest();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ApplicationRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ApplicationRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list12 = new java.util.ArrayList();

                    java.util.ArrayList list25 = new java.util.ArrayList();

                    java.util.ArrayList list26 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "clientIdentification").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClientIdentification(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClientIdentification(ClientIdentification.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "amount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "amount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "balloonInstallment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "balloonInstallment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setBalloonInstallment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setBalloonInstallment(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "calculationMode").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "calculationMode" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCalculationMode(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCalculationMode(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "collectionDayOfMonth").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "collectionDayOfMonth" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCollectionDayOfMonth(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCollectionDayOfMonth(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "currency").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCurrency(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "dateOfBirth").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDateOfBirth(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "deliveryDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDeliveryDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "detailedIntendedUse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDetailedIntendedUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "disagioPercentage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "disagioPercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDisagioPercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDisagioPercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "duration").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "duration" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDuration(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "extraInfo").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list12.add(null);
                            reader.next();
                        } else {
                            list12.add(Property.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone12 = false;

                        while (!loopDone12) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone12 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                            "extraInfo").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list12.add(null);
                                        reader.next();
                                    } else {
                                        list12.add(Property.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone12 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setExtraInfo((Property[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                Property.class, list12));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "favoredInstallment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "favoredInstallment" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFavoredInstallment(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFavoredInstallment(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "firstInstallmentDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setFirstInstallmentDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "gender").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setGender(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargePercentage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "handlingChargePercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargePercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargePercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargeSeparateAbsolute").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " +
                                "handlingChargeSeparateAbsolute" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargeSeparateAbsolute(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargeSeparateAbsolute(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "id").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setId(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "insurance").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "insurance" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInsurance(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInsurance(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "intendedUse").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "intendedUse" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setIntendedUse(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setIntendedUse(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "interestPercentage").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "interestPercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInterestPercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInterestPercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "startDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setStartDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://calculator.services.types.oks.swkbank.netempire.de/xsd",
                                "tariffId").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "tariffId" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTariffId(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setTariffId(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "collectionAccount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setCollectionAccount(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setCollectionAccount(BankingInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditTransfers").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list25.add(null);
                            reader.next();
                        } else {
                            list25.add(CreditTransfer.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone25 = false;

                        while (!loopDone25) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone25 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                            "creditTransfers").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list25.add(null);
                                        reader.next();
                                    } else {
                                        list25.add(CreditTransfer.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone25 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCreditTransfers((CreditTransfer[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CreditTransfer.class, list25));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditUsers").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list26.add(null);
                            reader.next();
                        } else {
                            list26.add(CreditUser.Factory.parse(reader));
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone26 = false;

                        while (!loopDone26) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone26 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                            "creditUsers").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list26.add(null);
                                        reader.next();
                                    } else {
                                        list26.add(CreditUser.Factory.parse(
                                                reader));
                                    }
                                } else {
                                    loopDone26 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setCreditUsers((CreditUser[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                CreditUser.class, list26));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "paymentAccount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setPaymentAccount(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setPaymentAccount(BankingInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BaseResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BaseResponse
           Namespace URI = http://services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns1
         */

        /**
         * field for ErrorDetails
         */
        protected ErrorDetails localErrorDetails;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localErrorDetailsTracker = false;

        /**
         * field for Success
         */
        protected boolean localSuccess;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSuccessTracker = false;

        public boolean isErrorDetailsSpecified() {
            return localErrorDetailsTracker;
        }

        /**
         * Auto generated getter method
         * @return ErrorDetails
         */
        public ErrorDetails getErrorDetails() {
            return localErrorDetails;
        }

        /**
         * Auto generated setter method
         * @param param ErrorDetails
         */
        public void setErrorDetails(ErrorDetails param) {
            localErrorDetailsTracker = true;

            this.localErrorDetails = param;
        }

        public boolean isSuccessSpecified() {
            return localSuccessTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getSuccess() {
            return localSuccess;
        }

        /**
         * Auto generated setter method
         * @param param Success
         */
        public void setSuccess(boolean param) {
            // setting primitive attribute tracker to true
            localSuccessTracker = true;

            this.localSuccess = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BaseResponse", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BaseResponse", xmlWriter);
                }
            }

            if (localErrorDetailsTracker) {
                if (localErrorDetails == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localErrorDetails.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "errorDetails"), xmlWriter);
                }
            }

            if (localSuccessTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "success", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "success cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSuccess));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localErrorDetailsTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails"));

                elementList.add((localErrorDetails == null) ? null
                                                            : localErrorDetails);
            }

            if (localSuccessTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "success"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSuccess));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BaseResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BaseResponse object = new BaseResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BaseResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BaseResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "errorDetails").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setErrorDetails(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setErrorDetails(ErrorDetails.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "success").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "success" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSuccess(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class NeuralNetworkCharacteristic implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = NeuralNetworkCharacteristic
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Description
         */
        protected java.lang.String localDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionTracker = false;

        /**
         * field for Sensitivity
         */
        protected float localSensitivity;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSensitivityTracker = false;

        /**
         * field for Value
         */
        protected int localValue;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localValueTracker = false;

        public boolean isDescriptionSpecified() {
            return localDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDescription() {
            return localDescription;
        }

        /**
         * Auto generated setter method
         * @param param Description
         */
        public void setDescription(java.lang.String param) {
            localDescriptionTracker = true;

            this.localDescription = param;
        }

        public boolean isSensitivitySpecified() {
            return localSensitivityTracker;
        }

        /**
         * Auto generated getter method
         * @return float
         */
        public float getSensitivity() {
            return localSensitivity;
        }

        /**
         * Auto generated setter method
         * @param param Sensitivity
         */
        public void setSensitivity(float param) {
            // setting primitive attribute tracker to true
            localSensitivityTracker = !java.lang.Float.isNaN(param);

            this.localSensitivity = param;
        }

        public boolean isValueSpecified() {
            return localValueTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getValue() {
            return localValue;
        }

        /**
         * Auto generated setter method
         * @param param Value
         */
        public void setValue(int param) {
            // setting primitive attribute tracker to true
            localValueTracker = param != java.lang.Integer.MIN_VALUE;

            this.localValue = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":NeuralNetworkCharacteristic",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "NeuralNetworkCharacteristic", xmlWriter);
                }
            }

            if (localDescriptionTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "description", xmlWriter);

                if (localDescription == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localSensitivityTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "sensitivity", xmlWriter);

                if (java.lang.Float.isNaN(localSensitivity)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "sensitivity cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSensitivity));
                }

                xmlWriter.writeEndElement();
            }

            if (localValueTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "value", xmlWriter);

                if (localValue == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "value cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localValue));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localDescriptionTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "description"));

                elementList.add((localDescription == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDescription));
            }

            if (localSensitivityTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "sensitivity"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSensitivity));
            }

            if (localValueTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "value"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localValue));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static NeuralNetworkCharacteristic parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                NeuralNetworkCharacteristic object = new NeuralNetworkCharacteristic();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"NeuralNetworkCharacteristic".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (NeuralNetworkCharacteristic) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "description").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "sensitivity").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "sensitivity" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSensitivity(org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setSensitivity(java.lang.Float.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "value").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "value" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setValue(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://calculator.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "CalculatorRequest".equals(typeName)) {
                return CalculatorRequest.Factory.parse(reader);
            }

            if ("http://services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "ErrorDetails".equals(typeName)) {
                return ErrorDetails.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "BankCardsInformation".equals(typeName)) {
                return BankCardsInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "CreditTransfer".equals(typeName)) {
                return CreditTransfer.Factory.parse(reader);
            }

            if ("http://services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "ClientIdentification".equals(typeName)) {
                return ClientIdentification.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "EmploymentInformation".equals(typeName)) {
                return EmploymentInformation.Factory.parse(reader);
            }

            if ("http://util.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "Address".equals(typeName)) {
                return Address.Factory.parse(reader);
            }

            if ("http://creditdecision.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "PreCheckResponse".equals(typeName)) {
                return PreCheckResponse.Factory.parse(reader);
            }

            if ("http://util.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "BankingInformation".equals(typeName)) {
                return BankingInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "FamilyInformation".equals(typeName)) {
                return FamilyInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "NeuralNetworkInformation".equals(typeName)) {
                return NeuralNetworkInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "BudgetInformation".equals(typeName)) {
                return BudgetInformation.Factory.parse(reader);
            }

            if ("http://services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "Property".equals(typeName)) {
                return Property.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "CarInformation".equals(typeName)) {
                return CarInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "SchufaInformation".equals(typeName)) {
                return SchufaInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "ApplicationRequest".equals(typeName)) {
                return ApplicationRequest.Factory.parse(reader);
            }

            if ("http://services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "BaseResponse".equals(typeName)) {
                return BaseResponse.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "NeuralNetworkCharacteristic".equals(typeName)) {
                return NeuralNetworkCharacteristic.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "CreditUser".equals(typeName)) {
                return CreditUser.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "IdentificationInformation".equals(typeName)) {
                return IdentificationInformation.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "SchufaRecord".equals(typeName)) {
                return SchufaRecord.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "CreditOffer".equals(typeName)) {
                return CreditOffer.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) &&
                    "ResidencyInformation".equals(typeName)) {
                return ResidencyInformation.Factory.parse(reader);
            }

            if ("http://services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "BaseRequest".equals(typeName)) {
                return BaseRequest.Factory.parse(reader);
            }

            if ("http://credit.services.types.oks.swkbank.netempire.de/xsd".equals(
                        namespaceURI) && "Person".equals(typeName)) {
                return Person.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class CreditUser implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CreditUser
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for AgreedToSchufaRequest
         */
        protected boolean localAgreedToSchufaRequest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAgreedToSchufaRequestTracker = false;

        /**
         * field for BankCardsInformation
         */
        protected BankCardsInformation localBankCardsInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBankCardsInformationTracker = false;

        /**
         * field for BudgetInformation
         */
        protected BudgetInformation localBudgetInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBudgetInformationTracker = false;

        /**
         * field for CarInformation
         */
        protected CarInformation localCarInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCarInformationTracker = false;

        /**
         * field for Comment
         */
        protected java.lang.String localComment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCommentTracker = false;

        /**
         * field for CreditTransfer
         */
        protected boolean localCreditTransfer;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditTransferTracker = false;

        /**
         * field for EmploymentInformation
         */
        protected EmploymentInformation localEmploymentInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmploymentInformationTracker = false;

        /**
         * field for FamilyInformation
         */
        protected FamilyInformation localFamilyInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFamilyInformationTracker = false;

        /**
         * field for IdentificationInformation
         */
        protected IdentificationInformation localIdentificationInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdentificationInformationTracker = false;

        /**
         * field for Person
         */
        protected Person localPerson;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPersonTracker = false;

        /**
         * field for ResidencyInformation
         */
        protected ResidencyInformation localResidencyInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResidencyInformationTracker = false;

        public boolean isAgreedToSchufaRequestSpecified() {
            return localAgreedToSchufaRequestTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAgreedToSchufaRequest() {
            return localAgreedToSchufaRequest;
        }

        /**
         * Auto generated setter method
         * @param param AgreedToSchufaRequest
         */
        public void setAgreedToSchufaRequest(boolean param) {
            // setting primitive attribute tracker to true
            localAgreedToSchufaRequestTracker = true;

            this.localAgreedToSchufaRequest = param;
        }

        public boolean isBankCardsInformationSpecified() {
            return localBankCardsInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return BankCardsInformation
         */
        public BankCardsInformation getBankCardsInformation() {
            return localBankCardsInformation;
        }

        /**
         * Auto generated setter method
         * @param param BankCardsInformation
         */
        public void setBankCardsInformation(BankCardsInformation param) {
            localBankCardsInformationTracker = true;

            this.localBankCardsInformation = param;
        }

        public boolean isBudgetInformationSpecified() {
            return localBudgetInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return BudgetInformation
         */
        public BudgetInformation getBudgetInformation() {
            return localBudgetInformation;
        }

        /**
         * Auto generated setter method
         * @param param BudgetInformation
         */
        public void setBudgetInformation(BudgetInformation param) {
            localBudgetInformationTracker = true;

            this.localBudgetInformation = param;
        }

        public boolean isCarInformationSpecified() {
            return localCarInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return CarInformation
         */
        public CarInformation getCarInformation() {
            return localCarInformation;
        }

        /**
         * Auto generated setter method
         * @param param CarInformation
         */
        public void setCarInformation(CarInformation param) {
            localCarInformationTracker = true;

            this.localCarInformation = param;
        }

        public boolean isCommentSpecified() {
            return localCommentTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getComment() {
            return localComment;
        }

        /**
         * Auto generated setter method
         * @param param Comment
         */
        public void setComment(java.lang.String param) {
            localCommentTracker = true;

            this.localComment = param;
        }

        public boolean isCreditTransferSpecified() {
            return localCreditTransferTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getCreditTransfer() {
            return localCreditTransfer;
        }

        /**
         * Auto generated setter method
         * @param param CreditTransfer
         */
        public void setCreditTransfer(boolean param) {
            // setting primitive attribute tracker to true
            localCreditTransferTracker = true;

            this.localCreditTransfer = param;
        }

        public boolean isEmploymentInformationSpecified() {
            return localEmploymentInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return EmploymentInformation
         */
        public EmploymentInformation getEmploymentInformation() {
            return localEmploymentInformation;
        }

        /**
         * Auto generated setter method
         * @param param EmploymentInformation
         */
        public void setEmploymentInformation(EmploymentInformation param) {
            localEmploymentInformationTracker = true;

            this.localEmploymentInformation = param;
        }

        public boolean isFamilyInformationSpecified() {
            return localFamilyInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return FamilyInformation
         */
        public FamilyInformation getFamilyInformation() {
            return localFamilyInformation;
        }

        /**
         * Auto generated setter method
         * @param param FamilyInformation
         */
        public void setFamilyInformation(FamilyInformation param) {
            localFamilyInformationTracker = true;

            this.localFamilyInformation = param;
        }

        public boolean isIdentificationInformationSpecified() {
            return localIdentificationInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return IdentificationInformation
         */
        public IdentificationInformation getIdentificationInformation() {
            return localIdentificationInformation;
        }

        /**
         * Auto generated setter method
         * @param param IdentificationInformation
         */
        public void setIdentificationInformation(
            IdentificationInformation param) {
            localIdentificationInformationTracker = true;

            this.localIdentificationInformation = param;
        }

        public boolean isPersonSpecified() {
            return localPersonTracker;
        }

        /**
         * Auto generated getter method
         * @return Person
         */
        public Person getPerson() {
            return localPerson;
        }

        /**
         * Auto generated setter method
         * @param param Person
         */
        public void setPerson(Person param) {
            localPersonTracker = true;

            this.localPerson = param;
        }

        public boolean isResidencyInformationSpecified() {
            return localResidencyInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return ResidencyInformation
         */
        public ResidencyInformation getResidencyInformation() {
            return localResidencyInformation;
        }

        /**
         * Auto generated setter method
         * @param param ResidencyInformation
         */
        public void setResidencyInformation(ResidencyInformation param) {
            localResidencyInformationTracker = true;

            this.localResidencyInformation = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":CreditUser", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CreditUser", xmlWriter);
                }
            }

            if (localAgreedToSchufaRequestTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "agreedToSchufaRequest",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "agreedToSchufaRequest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAgreedToSchufaRequest));
                }

                xmlWriter.writeEndElement();
            }

            if (localBankCardsInformationTracker) {
                if (localBankCardsInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "bankCardsInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localBankCardsInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "bankCardsInformation"), xmlWriter);
                }
            }

            if (localBudgetInformationTracker) {
                if (localBudgetInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "budgetInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localBudgetInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "budgetInformation"), xmlWriter);
                }
            }

            if (localCarInformationTracker) {
                if (localCarInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "carInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localCarInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "carInformation"), xmlWriter);
                }
            }

            if (localCommentTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "comment", xmlWriter);

                if (localComment == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localComment);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditTransferTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "creditTransfer", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "creditTransfer cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreditTransfer));
                }

                xmlWriter.writeEndElement();
            }

            if (localEmploymentInformationTracker) {
                if (localEmploymentInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employmentInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localEmploymentInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "employmentInformation"), xmlWriter);
                }
            }

            if (localFamilyInformationTracker) {
                if (localFamilyInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "familyInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localFamilyInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "familyInformation"), xmlWriter);
                }
            }

            if (localIdentificationInformationTracker) {
                if (localIdentificationInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "identificationInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localIdentificationInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "identificationInformation"), xmlWriter);
                }
            }

            if (localPersonTracker) {
                if (localPerson == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "person", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localPerson.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "person"), xmlWriter);
                }
            }

            if (localResidencyInformationTracker) {
                if (localResidencyInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "residencyInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localResidencyInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "residencyInformation"), xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAgreedToSchufaRequestTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "agreedToSchufaRequest"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAgreedToSchufaRequest));
            }

            if (localBankCardsInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "bankCardsInformation"));

                elementList.add((localBankCardsInformation == null) ? null
                                                                    : localBankCardsInformation);
            }

            if (localBudgetInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "budgetInformation"));

                elementList.add((localBudgetInformation == null) ? null
                                                                 : localBudgetInformation);
            }

            if (localCarInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "carInformation"));

                elementList.add((localCarInformation == null) ? null
                                                              : localCarInformation);
            }

            if (localCommentTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "comment"));

                elementList.add((localComment == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localComment));
            }

            if (localCreditTransferTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditTransfer"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditTransfer));
            }

            if (localEmploymentInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "employmentInformation"));

                elementList.add((localEmploymentInformation == null) ? null
                                                                     : localEmploymentInformation);
            }

            if (localFamilyInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "familyInformation"));

                elementList.add((localFamilyInformation == null) ? null
                                                                 : localFamilyInformation);
            }

            if (localIdentificationInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "identificationInformation"));

                elementList.add((localIdentificationInformation == null) ? null
                                                                         : localIdentificationInformation);
            }

            if (localPersonTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "person"));

                elementList.add((localPerson == null) ? null : localPerson);
            }

            if (localResidencyInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "residencyInformation"));

                elementList.add((localResidencyInformation == null) ? null
                                                                    : localResidencyInformation);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreditUser parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreditUser object = new CreditUser();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreditUser".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreditUser) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "agreedToSchufaRequest").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "agreedToSchufaRequest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAgreedToSchufaRequest(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "bankCardsInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setBankCardsInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setBankCardsInformation(BankCardsInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "budgetInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setBudgetInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setBudgetInformation(BudgetInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "carInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setCarInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setCarInformation(CarInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "comment").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setComment(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditTransfer").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creditTransfer" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditTransfer(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "employmentInformation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setEmploymentInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setEmploymentInformation(EmploymentInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "familyInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setFamilyInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setFamilyInformation(FamilyInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "identificationInformation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setIdentificationInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setIdentificationInformation(IdentificationInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "person").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setPerson(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setPerson(Person.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "residencyInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setResidencyInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setResidencyInformation(ResidencyInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class IdentificationInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = IdentificationInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Authority
         */
        protected java.lang.String localAuthority;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAuthorityTracker = false;

        /**
         * field for CheckedBy
         */
        protected java.lang.String localCheckedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCheckedByTracker = false;

        /**
         * field for IssueDate
         */
        protected java.util.Calendar localIssueDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIssueDateTracker = false;

        /**
         * field for Number
         */
        protected java.lang.String localNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNumberTracker = false;

        /**
         * field for Type
         */
        protected int localType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTypeTracker = false;

        public boolean isAuthoritySpecified() {
            return localAuthorityTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAuthority() {
            return localAuthority;
        }

        /**
         * Auto generated setter method
         * @param param Authority
         */
        public void setAuthority(java.lang.String param) {
            localAuthorityTracker = true;

            this.localAuthority = param;
        }

        public boolean isCheckedBySpecified() {
            return localCheckedByTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCheckedBy() {
            return localCheckedBy;
        }

        /**
         * Auto generated setter method
         * @param param CheckedBy
         */
        public void setCheckedBy(java.lang.String param) {
            localCheckedByTracker = true;

            this.localCheckedBy = param;
        }

        public boolean isIssueDateSpecified() {
            return localIssueDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getIssueDate() {
            return localIssueDate;
        }

        /**
         * Auto generated setter method
         * @param param IssueDate
         */
        public void setIssueDate(java.util.Calendar param) {
            localIssueDateTracker = true;

            this.localIssueDate = param;
        }

        public boolean isNumberSpecified() {
            return localNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getNumber() {
            return localNumber;
        }

        /**
         * Auto generated setter method
         * @param param Number
         */
        public void setNumber(java.lang.String param) {
            localNumberTracker = true;

            this.localNumber = param;
        }

        public boolean isTypeSpecified() {
            return localTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(int param) {
            // setting primitive attribute tracker to true
            localTypeTracker = param != java.lang.Integer.MIN_VALUE;

            this.localType = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":IdentificationInformation",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "IdentificationInformation", xmlWriter);
                }
            }

            if (localAuthorityTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "authority", xmlWriter);

                if (localAuthority == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localAuthority);
                }

                xmlWriter.writeEndElement();
            }

            if (localCheckedByTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "checkedBy", xmlWriter);

                if (localCheckedBy == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCheckedBy);
                }

                xmlWriter.writeEndElement();
            }

            if (localIssueDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "issueDate", xmlWriter);

                if (localIssueDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localIssueDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localNumberTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "number", xmlWriter);

                if (localNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localTypeTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "type", xmlWriter);

                if (localType == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "type cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localType));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localAuthorityTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "authority"));

                elementList.add((localAuthority == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAuthority));
            }

            if (localCheckedByTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "checkedBy"));

                elementList.add((localCheckedBy == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCheckedBy));
            }

            if (localIssueDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "issueDate"));

                elementList.add((localIssueDate == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIssueDate));
            }

            if (localNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "number"));

                elementList.add((localNumber == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNumber));
            }

            if (localTypeTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "type"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IdentificationInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                IdentificationInformation object = new IdentificationInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"IdentificationInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (IdentificationInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "authority").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setAuthority(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "checkedBy").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCheckedBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "issueDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setIssueDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "number").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "type").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "type" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setType(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class SchufaRecord implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = SchufaRecord
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for MessageLines
         * This was an Array!
         */
        protected java.lang.String[] localMessageLines;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessageLinesTracker = false;

        /**
         * field for Status
         */
        protected int localStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTracker = false;

        public boolean isMessageLinesSpecified() {
            return localMessageLinesTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String[]
         */
        public java.lang.String[] getMessageLines() {
            return localMessageLines;
        }

        /**
         * validate the array for MessageLines
         */
        protected void validateMessageLines(java.lang.String[] param) {
        }

        /**
         * Auto generated setter method
         * @param param MessageLines
         */
        public void setMessageLines(java.lang.String[] param) {
            validateMessageLines(param);

            localMessageLinesTracker = true;

            this.localMessageLines = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param java.lang.String
         */
        public void addMessageLines(java.lang.String param) {
            if (localMessageLines == null) {
                localMessageLines = new java.lang.String[] {  };
            }

            //update the setting tracker
            localMessageLinesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessageLines);
            list.add(param);
            this.localMessageLines = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
        }

        public boolean isStatusSpecified() {
            return localStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(int param) {
            // setting primitive attribute tracker to true
            localStatusTracker = param != java.lang.Integer.MIN_VALUE;

            this.localStatus = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":SchufaRecord", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "SchufaRecord", xmlWriter);
                }
            }

            if (localMessageLinesTracker) {
                if (localMessageLines != null) {
                    namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";

                    for (int i = 0; i < localMessageLines.length; i++) {
                        if (localMessageLines[i] != null) {
                            writeStartElement(null, namespace, "messageLines",
                                xmlWriter);

                            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localMessageLines[i]));

                            xmlWriter.writeEndElement();
                        } else {
                            // write null attribute
                            namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                            writeStartElement(null, namespace, "messageLines",
                                xmlWriter);
                            writeAttribute("xsi",
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "nil", "1", xmlWriter);
                            xmlWriter.writeEndElement();
                        }
                    }
                } else {
                    // write the null attribute
                    // write null attribute
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "messageLines", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                }
            }

            if (localStatusTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "status", xmlWriter);

                if (localStatus == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStatus));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localMessageLinesTracker) {
                if (localMessageLines != null) {
                    for (int i = 0; i < localMessageLines.length; i++) {
                        if (localMessageLines[i] != null) {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "messageLines"));
                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    localMessageLines[i]));
                        } else {
                            elementList.add(new javax.xml.namespace.QName(
                                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                    "messageLines"));
                            elementList.add(null);
                        }
                    }
                } else {
                    elementList.add(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "messageLines"));
                    elementList.add(null);
                }
            }

            if (localStatusTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "status"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStatus));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static SchufaRecord parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                SchufaRecord object = new SchufaRecord();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"SchufaRecord".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (SchufaRecord) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "messageLines").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            list1.add(null);

                            reader.next();
                        } else {
                            list1.add(reader.getElementText());
                        }

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // Ensure we are at the EndElement
                            while (!reader.isEndElement()) {
                                reader.next();
                            }

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                            "messageLines").equals(
                                            reader.getName())) {
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                            "nil");

                                    if ("true".equals(nillableValue) ||
                                            "1".equals(nillableValue)) {
                                        list1.add(null);

                                        reader.next();
                                    } else {
                                        list1.add(reader.getElementText());
                                    }
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setMessageLines((java.lang.String[]) list1.toArray(
                                new java.lang.String[list1.size()]));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "status").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setStatus(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreditOffer extends BaseResponse implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = CreditOffer
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for AvailableBudget
         */
        protected int localAvailableBudget;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAvailableBudgetTracker = false;

        /**
         * field for CegScore
         */
        protected int localCegScore;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCegScoreTracker = false;

        /**
         * field for CreditInsuranceAmount
         */
        protected double localCreditInsuranceAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditInsuranceAmountTracker = false;

        /**
         * field for CreditInsuranceDescription
         */
        protected java.lang.String localCreditInsuranceDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditInsuranceDescriptionTracker = false;

        /**
         * field for CreditInsuranceTariff
         */
        protected int localCreditInsuranceTariff;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditInsuranceTariffTracker = false;

        /**
         * field for CreditOfferDate
         */
        protected java.util.Calendar localCreditOfferDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCreditOfferDateTracker = false;

        /**
         * field for Currency
         */
        protected java.lang.String localCurrency;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCurrencyTracker = false;

        /**
         * field for CustomerAccountNumber
         */
        protected java.lang.String localCustomerAccountNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCustomerAccountNumberTracker = false;

        /**
         * field for DocumentNumber
         */
        protected java.lang.String localDocumentNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDocumentNumberTracker = false;

        /**
         * field for Duration
         */
        protected int localDuration;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDurationTracker = false;

        /**
         * field for EffectiveInterest
         */
        protected double localEffectiveInterest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEffectiveInterestTracker = false;

        /**
         * field for FinanceAmount
         */
        protected double localFinanceAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFinanceAmountTracker = false;

        /**
         * field for FirstInstallmentAmount
         */
        protected double localFirstInstallmentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstInstallmentAmountTracker = false;

        /**
         * field for FirstInstallmentDate
         */
        protected java.util.Calendar localFirstInstallmentDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstInstallmentDateTracker = false;

        /**
         * field for GrossCreditAmount
         */
        protected double localGrossCreditAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGrossCreditAmountTracker = false;

        /**
         * field for HandlingChargeAbsolute
         */
        protected double localHandlingChargeAbsolute;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHandlingChargeAbsoluteTracker = false;

        /**
         * field for HandlingChargeAmount
         */
        protected double localHandlingChargeAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHandlingChargeAmountTracker = false;

        /**
         * field for HandlingChargePercentage
         */
        protected double localHandlingChargePercentage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHandlingChargePercentageTracker = false;

        /**
         * field for Id
         */
        protected int localId;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIdTracker = false;

        /**
         * field for InformaScore
         */
        protected int localInformaScore;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInformaScoreTracker = false;

        /**
         * field for InterestAmount
         */
        protected double localInterestAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localInterestAmountTracker = false;

        /**
         * field for LastInstallmentAmount
         */
        protected double localLastInstallmentAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastInstallmentAmountTracker = false;

        /**
         * field for LastInstallmentDate
         */
        protected java.util.Calendar localLastInstallmentDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastInstallmentDateTracker = false;

        /**
         * field for NetCreditAmount
         */
        protected double localNetCreditAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNetCreditAmountTracker = false;

        /**
         * field for NeuralNetworkInformation
         */
        protected NeuralNetworkInformation localNeuralNetworkInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNeuralNetworkInformationTracker = false;

        /**
         * field for NominalInterest
         */
        protected double localNominalInterest;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNominalInterestTracker = false;

        /**
         * field for PartnerIdentNumber
         */
        protected java.lang.String localPartnerIdentNumber;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPartnerIdentNumberTracker = false;

        /**
         * field for ReasonOfDenial
         */
        protected int localReasonOfDenial;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReasonOfDenialTracker = false;

        /**
         * field for SchufaInformation
         */
        protected SchufaInformation localSchufaInformation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSchufaInformationTracker = false;

        /**
         * field for SchufaScore
         */
        protected int localSchufaScore;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSchufaScoreTracker = false;

        /**
         * field for StartDate
         */
        protected java.util.Calendar localStartDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStartDateTracker = false;

        /**
         * field for Status
         */
        protected int localStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTracker = false;

        /**
         * field for TotalCreditAmount
         */
        protected double localTotalCreditAmount;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTotalCreditAmountTracker = false;

        public boolean isAvailableBudgetSpecified() {
            return localAvailableBudgetTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getAvailableBudget() {
            return localAvailableBudget;
        }

        /**
         * Auto generated setter method
         * @param param AvailableBudget
         */
        public void setAvailableBudget(int param) {
            // setting primitive attribute tracker to true
            localAvailableBudgetTracker = param != java.lang.Integer.MIN_VALUE;

            this.localAvailableBudget = param;
        }

        public boolean isCegScoreSpecified() {
            return localCegScoreTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getCegScore() {
            return localCegScore;
        }

        /**
         * Auto generated setter method
         * @param param CegScore
         */
        public void setCegScore(int param) {
            // setting primitive attribute tracker to true
            localCegScoreTracker = param != java.lang.Integer.MIN_VALUE;

            this.localCegScore = param;
        }

        public boolean isCreditInsuranceAmountSpecified() {
            return localCreditInsuranceAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getCreditInsuranceAmount() {
            return localCreditInsuranceAmount;
        }

        /**
         * Auto generated setter method
         * @param param CreditInsuranceAmount
         */
        public void setCreditInsuranceAmount(double param) {
            // setting primitive attribute tracker to true
            localCreditInsuranceAmountTracker = !java.lang.Double.isNaN(param);

            this.localCreditInsuranceAmount = param;
        }

        public boolean isCreditInsuranceDescriptionSpecified() {
            return localCreditInsuranceDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCreditInsuranceDescription() {
            return localCreditInsuranceDescription;
        }

        /**
         * Auto generated setter method
         * @param param CreditInsuranceDescription
         */
        public void setCreditInsuranceDescription(java.lang.String param) {
            localCreditInsuranceDescriptionTracker = true;

            this.localCreditInsuranceDescription = param;
        }

        public boolean isCreditInsuranceTariffSpecified() {
            return localCreditInsuranceTariffTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getCreditInsuranceTariff() {
            return localCreditInsuranceTariff;
        }

        /**
         * Auto generated setter method
         * @param param CreditInsuranceTariff
         */
        public void setCreditInsuranceTariff(int param) {
            // setting primitive attribute tracker to true
            localCreditInsuranceTariffTracker = param != java.lang.Integer.MIN_VALUE;

            this.localCreditInsuranceTariff = param;
        }

        public boolean isCreditOfferDateSpecified() {
            return localCreditOfferDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getCreditOfferDate() {
            return localCreditOfferDate;
        }

        /**
         * Auto generated setter method
         * @param param CreditOfferDate
         */
        public void setCreditOfferDate(java.util.Calendar param) {
            localCreditOfferDateTracker = true;

            this.localCreditOfferDate = param;
        }

        public boolean isCurrencySpecified() {
            return localCurrencyTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCurrency() {
            return localCurrency;
        }

        /**
         * Auto generated setter method
         * @param param Currency
         */
        public void setCurrency(java.lang.String param) {
            localCurrencyTracker = true;

            this.localCurrency = param;
        }

        public boolean isCustomerAccountNumberSpecified() {
            return localCustomerAccountNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCustomerAccountNumber() {
            return localCustomerAccountNumber;
        }

        /**
         * Auto generated setter method
         * @param param CustomerAccountNumber
         */
        public void setCustomerAccountNumber(java.lang.String param) {
            localCustomerAccountNumberTracker = true;

            this.localCustomerAccountNumber = param;
        }

        public boolean isDocumentNumberSpecified() {
            return localDocumentNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getDocumentNumber() {
            return localDocumentNumber;
        }

        /**
         * Auto generated setter method
         * @param param DocumentNumber
         */
        public void setDocumentNumber(java.lang.String param) {
            localDocumentNumberTracker = true;

            this.localDocumentNumber = param;
        }

        public boolean isDurationSpecified() {
            return localDurationTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getDuration() {
            return localDuration;
        }

        /**
         * Auto generated setter method
         * @param param Duration
         */
        public void setDuration(int param) {
            // setting primitive attribute tracker to true
            localDurationTracker = param != java.lang.Integer.MIN_VALUE;

            this.localDuration = param;
        }

        public boolean isEffectiveInterestSpecified() {
            return localEffectiveInterestTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getEffectiveInterest() {
            return localEffectiveInterest;
        }

        /**
         * Auto generated setter method
         * @param param EffectiveInterest
         */
        public void setEffectiveInterest(double param) {
            // setting primitive attribute tracker to true
            localEffectiveInterestTracker = !java.lang.Double.isNaN(param);

            this.localEffectiveInterest = param;
        }

        public boolean isFinanceAmountSpecified() {
            return localFinanceAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getFinanceAmount() {
            return localFinanceAmount;
        }

        /**
         * Auto generated setter method
         * @param param FinanceAmount
         */
        public void setFinanceAmount(double param) {
            // setting primitive attribute tracker to true
            localFinanceAmountTracker = !java.lang.Double.isNaN(param);

            this.localFinanceAmount = param;
        }

        public boolean isFirstInstallmentAmountSpecified() {
            return localFirstInstallmentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getFirstInstallmentAmount() {
            return localFirstInstallmentAmount;
        }

        /**
         * Auto generated setter method
         * @param param FirstInstallmentAmount
         */
        public void setFirstInstallmentAmount(double param) {
            // setting primitive attribute tracker to true
            localFirstInstallmentAmountTracker = !java.lang.Double.isNaN(param);

            this.localFirstInstallmentAmount = param;
        }

        public boolean isFirstInstallmentDateSpecified() {
            return localFirstInstallmentDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getFirstInstallmentDate() {
            return localFirstInstallmentDate;
        }

        /**
         * Auto generated setter method
         * @param param FirstInstallmentDate
         */
        public void setFirstInstallmentDate(java.util.Calendar param) {
            localFirstInstallmentDateTracker = true;

            this.localFirstInstallmentDate = param;
        }

        public boolean isGrossCreditAmountSpecified() {
            return localGrossCreditAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getGrossCreditAmount() {
            return localGrossCreditAmount;
        }

        /**
         * Auto generated setter method
         * @param param GrossCreditAmount
         */
        public void setGrossCreditAmount(double param) {
            // setting primitive attribute tracker to true
            localGrossCreditAmountTracker = !java.lang.Double.isNaN(param);

            this.localGrossCreditAmount = param;
        }

        public boolean isHandlingChargeAbsoluteSpecified() {
            return localHandlingChargeAbsoluteTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getHandlingChargeAbsolute() {
            return localHandlingChargeAbsolute;
        }

        /**
         * Auto generated setter method
         * @param param HandlingChargeAbsolute
         */
        public void setHandlingChargeAbsolute(double param) {
            // setting primitive attribute tracker to true
            localHandlingChargeAbsoluteTracker = !java.lang.Double.isNaN(param);

            this.localHandlingChargeAbsolute = param;
        }

        public boolean isHandlingChargeAmountSpecified() {
            return localHandlingChargeAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getHandlingChargeAmount() {
            return localHandlingChargeAmount;
        }

        /**
         * Auto generated setter method
         * @param param HandlingChargeAmount
         */
        public void setHandlingChargeAmount(double param) {
            // setting primitive attribute tracker to true
            localHandlingChargeAmountTracker = !java.lang.Double.isNaN(param);

            this.localHandlingChargeAmount = param;
        }

        public boolean isHandlingChargePercentageSpecified() {
            return localHandlingChargePercentageTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getHandlingChargePercentage() {
            return localHandlingChargePercentage;
        }

        /**
         * Auto generated setter method
         * @param param HandlingChargePercentage
         */
        public void setHandlingChargePercentage(double param) {
            // setting primitive attribute tracker to true
            localHandlingChargePercentageTracker = !java.lang.Double.isNaN(param);

            this.localHandlingChargePercentage = param;
        }

        public boolean isIdSpecified() {
            return localIdTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getId() {
            return localId;
        }

        /**
         * Auto generated setter method
         * @param param Id
         */
        public void setId(int param) {
            // setting primitive attribute tracker to true
            localIdTracker = param != java.lang.Integer.MIN_VALUE;

            this.localId = param;
        }

        public boolean isInformaScoreSpecified() {
            return localInformaScoreTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getInformaScore() {
            return localInformaScore;
        }

        /**
         * Auto generated setter method
         * @param param InformaScore
         */
        public void setInformaScore(int param) {
            // setting primitive attribute tracker to true
            localInformaScoreTracker = param != java.lang.Integer.MIN_VALUE;

            this.localInformaScore = param;
        }

        public boolean isInterestAmountSpecified() {
            return localInterestAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getInterestAmount() {
            return localInterestAmount;
        }

        /**
         * Auto generated setter method
         * @param param InterestAmount
         */
        public void setInterestAmount(double param) {
            // setting primitive attribute tracker to true
            localInterestAmountTracker = !java.lang.Double.isNaN(param);

            this.localInterestAmount = param;
        }

        public boolean isLastInstallmentAmountSpecified() {
            return localLastInstallmentAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getLastInstallmentAmount() {
            return localLastInstallmentAmount;
        }

        /**
         * Auto generated setter method
         * @param param LastInstallmentAmount
         */
        public void setLastInstallmentAmount(double param) {
            // setting primitive attribute tracker to true
            localLastInstallmentAmountTracker = !java.lang.Double.isNaN(param);

            this.localLastInstallmentAmount = param;
        }

        public boolean isLastInstallmentDateSpecified() {
            return localLastInstallmentDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getLastInstallmentDate() {
            return localLastInstallmentDate;
        }

        /**
         * Auto generated setter method
         * @param param LastInstallmentDate
         */
        public void setLastInstallmentDate(java.util.Calendar param) {
            localLastInstallmentDateTracker = true;

            this.localLastInstallmentDate = param;
        }

        public boolean isNetCreditAmountSpecified() {
            return localNetCreditAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getNetCreditAmount() {
            return localNetCreditAmount;
        }

        /**
         * Auto generated setter method
         * @param param NetCreditAmount
         */
        public void setNetCreditAmount(double param) {
            // setting primitive attribute tracker to true
            localNetCreditAmountTracker = !java.lang.Double.isNaN(param);

            this.localNetCreditAmount = param;
        }

        public boolean isNeuralNetworkInformationSpecified() {
            return localNeuralNetworkInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return NeuralNetworkInformation
         */
        public NeuralNetworkInformation getNeuralNetworkInformation() {
            return localNeuralNetworkInformation;
        }

        /**
         * Auto generated setter method
         * @param param NeuralNetworkInformation
         */
        public void setNeuralNetworkInformation(NeuralNetworkInformation param) {
            localNeuralNetworkInformationTracker = true;

            this.localNeuralNetworkInformation = param;
        }

        public boolean isNominalInterestSpecified() {
            return localNominalInterestTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getNominalInterest() {
            return localNominalInterest;
        }

        /**
         * Auto generated setter method
         * @param param NominalInterest
         */
        public void setNominalInterest(double param) {
            // setting primitive attribute tracker to true
            localNominalInterestTracker = !java.lang.Double.isNaN(param);

            this.localNominalInterest = param;
        }

        public boolean isPartnerIdentNumberSpecified() {
            return localPartnerIdentNumberTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPartnerIdentNumber() {
            return localPartnerIdentNumber;
        }

        /**
         * Auto generated setter method
         * @param param PartnerIdentNumber
         */
        public void setPartnerIdentNumber(java.lang.String param) {
            localPartnerIdentNumberTracker = true;

            this.localPartnerIdentNumber = param;
        }

        public boolean isReasonOfDenialSpecified() {
            return localReasonOfDenialTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getReasonOfDenial() {
            return localReasonOfDenial;
        }

        /**
         * Auto generated setter method
         * @param param ReasonOfDenial
         */
        public void setReasonOfDenial(int param) {
            // setting primitive attribute tracker to true
            localReasonOfDenialTracker = param != java.lang.Integer.MIN_VALUE;

            this.localReasonOfDenial = param;
        }

        public boolean isSchufaInformationSpecified() {
            return localSchufaInformationTracker;
        }

        /**
         * Auto generated getter method
         * @return SchufaInformation
         */
        public SchufaInformation getSchufaInformation() {
            return localSchufaInformation;
        }

        /**
         * Auto generated setter method
         * @param param SchufaInformation
         */
        public void setSchufaInformation(SchufaInformation param) {
            localSchufaInformationTracker = true;

            this.localSchufaInformation = param;
        }

        public boolean isSchufaScoreSpecified() {
            return localSchufaScoreTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchufaScore() {
            return localSchufaScore;
        }

        /**
         * Auto generated setter method
         * @param param SchufaScore
         */
        public void setSchufaScore(int param) {
            // setting primitive attribute tracker to true
            localSchufaScoreTracker = param != java.lang.Integer.MIN_VALUE;

            this.localSchufaScore = param;
        }

        public boolean isStartDateSpecified() {
            return localStartDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getStartDate() {
            return localStartDate;
        }

        /**
         * Auto generated setter method
         * @param param StartDate
         */
        public void setStartDate(java.util.Calendar param) {
            localStartDateTracker = true;

            this.localStartDate = param;
        }

        public boolean isStatusSpecified() {
            return localStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(int param) {
            // setting primitive attribute tracker to true
            localStatusTracker = param != java.lang.Integer.MIN_VALUE;

            this.localStatus = param;
        }

        public boolean isTotalCreditAmountSpecified() {
            return localTotalCreditAmountTracker;
        }

        /**
         * Auto generated getter method
         * @return double
         */
        public double getTotalCreditAmount() {
            return localTotalCreditAmount;
        }

        /**
         * Auto generated setter method
         * @param param TotalCreditAmount
         */
        public void setTotalCreditAmount(double param) {
            // setting primitive attribute tracker to true
            localTotalCreditAmountTracker = !java.lang.Double.isNaN(param);

            this.localTotalCreditAmount = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://credit.services.types.oks.swkbank.netempire.de/xsd");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":CreditOffer", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "CreditOffer", xmlWriter);
            }

            if (localErrorDetailsTracker) {
                if (localErrorDetails == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localErrorDetails.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "errorDetails"), xmlWriter);
                }
            }

            if (localSuccessTracker) {
                namespace = "http://services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "success", xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "success cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSuccess));
                }

                xmlWriter.writeEndElement();
            }

            if (localAvailableBudgetTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "availableBudget", xmlWriter);

                if (localAvailableBudget == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "availableBudget cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localAvailableBudget));
                }

                xmlWriter.writeEndElement();
            }

            if (localCegScoreTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "cegScore", xmlWriter);

                if (localCegScore == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "cegScore cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCegScore));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditInsuranceAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "creditInsuranceAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localCreditInsuranceAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "creditInsuranceAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreditInsuranceAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditInsuranceDescriptionTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace,
                    "creditInsuranceDescription", xmlWriter);

                if (localCreditInsuranceDescription == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCreditInsuranceDescription);
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditInsuranceTariffTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "creditInsuranceTariff",
                    xmlWriter);

                if (localCreditInsuranceTariff == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "creditInsuranceTariff cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreditInsuranceTariff));
                }

                xmlWriter.writeEndElement();
            }

            if (localCreditOfferDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "creditOfferDate", xmlWriter);

                if (localCreditOfferDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localCreditOfferDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localCurrencyTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "currency", xmlWriter);

                if (localCurrency == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCurrency);
                }

                xmlWriter.writeEndElement();
            }

            if (localCustomerAccountNumberTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "customerAccountNumber",
                    xmlWriter);

                if (localCustomerAccountNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCustomerAccountNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localDocumentNumberTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "documentNumber", xmlWriter);

                if (localDocumentNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localDocumentNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localDurationTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "duration", xmlWriter);

                if (localDuration == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "duration cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localDuration));
                }

                xmlWriter.writeEndElement();
            }

            if (localEffectiveInterestTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "effectiveInterest",
                    xmlWriter);

                if (java.lang.Double.isNaN(localEffectiveInterest)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "effectiveInterest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localEffectiveInterest));
                }

                xmlWriter.writeEndElement();
            }

            if (localFinanceAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "financeAmount", xmlWriter);

                if (java.lang.Double.isNaN(localFinanceAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "financeAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFinanceAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstInstallmentAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "firstInstallmentAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localFirstInstallmentAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "firstInstallmentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFirstInstallmentAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstInstallmentDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "firstInstallmentDate",
                    xmlWriter);

                if (localFirstInstallmentDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localFirstInstallmentDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localGrossCreditAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "grossCreditAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localGrossCreditAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "grossCreditAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localGrossCreditAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargeAbsoluteTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "handlingChargeAbsolute",
                    xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargeAbsolute)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargeAbsolute cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargeAbsolute));
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargeAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "handlingChargeAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargeAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargeAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargeAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localHandlingChargePercentageTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "handlingChargePercentage",
                    xmlWriter);

                if (java.lang.Double.isNaN(localHandlingChargePercentage)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "handlingChargePercentage cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localHandlingChargePercentage));
                }

                xmlWriter.writeEndElement();
            }

            if (localIdTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "id", xmlWriter);

                if (localId == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "id cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localId));
                }

                xmlWriter.writeEndElement();
            }

            if (localInformaScoreTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "informaScore", xmlWriter);

                if (localInformaScore == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "informaScore cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInformaScore));
                }

                xmlWriter.writeEndElement();
            }

            if (localInterestAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "interestAmount", xmlWriter);

                if (java.lang.Double.isNaN(localInterestAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "interestAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localInterestAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastInstallmentAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "lastInstallmentAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localLastInstallmentAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "lastInstallmentAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastInstallmentAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localLastInstallmentDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "lastInstallmentDate",
                    xmlWriter);

                if (localLastInstallmentDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLastInstallmentDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localNetCreditAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "netCreditAmount", xmlWriter);

                if (java.lang.Double.isNaN(localNetCreditAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "netCreditAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNetCreditAmount));
                }

                xmlWriter.writeEndElement();
            }

            if (localNeuralNetworkInformationTracker) {
                if (localNeuralNetworkInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "neuralNetworkInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localNeuralNetworkInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "neuralNetworkInformation"), xmlWriter);
                }
            }

            if (localNominalInterestTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "nominalInterest", xmlWriter);

                if (java.lang.Double.isNaN(localNominalInterest)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "nominalInterest cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localNominalInterest));
                }

                xmlWriter.writeEndElement();
            }

            if (localPartnerIdentNumberTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "partnerIdentNumber",
                    xmlWriter);

                if (localPartnerIdentNumber == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localPartnerIdentNumber);
                }

                xmlWriter.writeEndElement();
            }

            if (localReasonOfDenialTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "reasonOfDenial", xmlWriter);

                if (localReasonOfDenial == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "reasonOfDenial cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localReasonOfDenial));
                }

                xmlWriter.writeEndElement();
            }

            if (localSchufaInformationTracker) {
                if (localSchufaInformation == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "schufaInformation", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localSchufaInformation.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "schufaInformation"), xmlWriter);
                }
            }

            if (localSchufaScoreTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "schufaScore", xmlWriter);

                if (localSchufaScore == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "schufaScore cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localSchufaScore));
                }

                xmlWriter.writeEndElement();
            }

            if (localStartDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "startDate", xmlWriter);

                if (localStartDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStartDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localStatusTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "status", xmlWriter);

                if (localStatus == java.lang.Integer.MIN_VALUE) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "status cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localStatus));
                }

                xmlWriter.writeEndElement();
            }

            if (localTotalCreditAmountTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "totalCreditAmount",
                    xmlWriter);

                if (java.lang.Double.isNaN(localTotalCreditAmount)) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "totalCreditAmount cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localTotalCreditAmount));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            attribList.add(new javax.xml.namespace.QName(
                    "http://www.w3.org/2001/XMLSchema-instance", "type"));
            attribList.add(new javax.xml.namespace.QName(
                    "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                    "CreditOffer"));

            if (localErrorDetailsTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "errorDetails"));

                elementList.add((localErrorDetails == null) ? null
                                                            : localErrorDetails);
            }

            if (localSuccessTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "success"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSuccess));
            }

            if (localAvailableBudgetTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "availableBudget"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAvailableBudget));
            }

            if (localCegScoreTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "cegScore"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCegScore));
            }

            if (localCreditInsuranceAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditInsuranceAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditInsuranceAmount));
            }

            if (localCreditInsuranceDescriptionTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditInsuranceDescription"));

                elementList.add((localCreditInsuranceDescription == null)
                    ? null
                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditInsuranceDescription));
            }

            if (localCreditInsuranceTariffTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditInsuranceTariff"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditInsuranceTariff));
            }

            if (localCreditOfferDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "creditOfferDate"));

                elementList.add((localCreditOfferDate == null) ? null
                                                               : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCreditOfferDate));
            }

            if (localCurrencyTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "currency"));

                elementList.add((localCurrency == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCurrency));
            }

            if (localCustomerAccountNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "customerAccountNumber"));

                elementList.add((localCustomerAccountNumber == null) ? null
                                                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCustomerAccountNumber));
            }

            if (localDocumentNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "documentNumber"));

                elementList.add((localDocumentNumber == null) ? null
                                                              : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDocumentNumber));
            }

            if (localDurationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "duration"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDuration));
            }

            if (localEffectiveInterestTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "effectiveInterest"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEffectiveInterest));
            }

            if (localFinanceAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "financeAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFinanceAmount));
            }

            if (localFirstInstallmentAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "firstInstallmentAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFirstInstallmentAmount));
            }

            if (localFirstInstallmentDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "firstInstallmentDate"));

                elementList.add((localFirstInstallmentDate == null) ? null
                                                                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFirstInstallmentDate));
            }

            if (localGrossCreditAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "grossCreditAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGrossCreditAmount));
            }

            if (localHandlingChargeAbsoluteTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargeAbsolute"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargeAbsolute));
            }

            if (localHandlingChargeAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargeAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargeAmount));
            }

            if (localHandlingChargePercentageTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "handlingChargePercentage"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandlingChargePercentage));
            }

            if (localIdTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "id"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localId));
            }

            if (localInformaScoreTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "informaScore"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInformaScore));
            }

            if (localInterestAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "interestAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localInterestAmount));
            }

            if (localLastInstallmentAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "lastInstallmentAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLastInstallmentAmount));
            }

            if (localLastInstallmentDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "lastInstallmentDate"));

                elementList.add((localLastInstallmentDate == null) ? null
                                                                   : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLastInstallmentDate));
            }

            if (localNetCreditAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "netCreditAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNetCreditAmount));
            }

            if (localNeuralNetworkInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "neuralNetworkInformation"));

                elementList.add((localNeuralNetworkInformation == null) ? null
                                                                        : localNeuralNetworkInformation);
            }

            if (localNominalInterestTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "nominalInterest"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localNominalInterest));
            }

            if (localPartnerIdentNumberTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "partnerIdentNumber"));

                elementList.add((localPartnerIdentNumber == null) ? null
                                                                  : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPartnerIdentNumber));
            }

            if (localReasonOfDenialTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "reasonOfDenial"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReasonOfDenial));
            }

            if (localSchufaInformationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "schufaInformation"));

                elementList.add((localSchufaInformation == null) ? null
                                                                 : localSchufaInformation);
            }

            if (localSchufaScoreTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "schufaScore"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchufaScore));
            }

            if (localStartDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "startDate"));

                elementList.add((localStartDate == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStartDate));
            }

            if (localStatusTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "status"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStatus));
            }

            if (localTotalCreditAmountTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "totalCreditAmount"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTotalCreditAmount));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreditOffer parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreditOffer object = new CreditOffer();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreditOffer".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreditOffer) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "errorDetails").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setErrorDetails(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setErrorDetails(ErrorDetails.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "success").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "success" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSuccess(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "availableBudget").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "availableBudget" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setAvailableBudget(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setAvailableBudget(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "cegScore").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "cegScore" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCegScore(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCegScore(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditInsuranceAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creditInsuranceAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditInsuranceAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCreditInsuranceAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditInsuranceDescription").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCreditInsuranceDescription(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditInsuranceTariff").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "creditInsuranceTariff" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setCreditInsuranceTariff(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setCreditInsuranceTariff(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "creditOfferDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCreditOfferDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "currency").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCurrency(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "customerAccountNumber").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCustomerAccountNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "documentNumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setDocumentNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "duration").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "duration" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setDuration(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "effectiveInterest").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "effectiveInterest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setEffectiveInterest(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setEffectiveInterest(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "financeAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "financeAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFinanceAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFinanceAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "firstInstallmentAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "firstInstallmentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setFirstInstallmentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setFirstInstallmentAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "firstInstallmentDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setFirstInstallmentDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "grossCreditAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "grossCreditAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setGrossCreditAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setGrossCreditAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargeAbsolute").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "handlingChargeAbsolute" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargeAbsolute(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargeAbsolute(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargeAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "handlingChargeAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargeAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargeAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "handlingChargePercentage").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "handlingChargePercentage" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setHandlingChargePercentage(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setHandlingChargePercentage(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "id").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "id" + "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setId(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "informaScore").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "informaScore" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInformaScore(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInformaScore(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "interestAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "interestAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setInterestAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setInterestAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "lastInstallmentAmount").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "lastInstallmentAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLastInstallmentAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setLastInstallmentAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "lastInstallmentDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setLastInstallmentDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "netCreditAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "netCreditAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNetCreditAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setNetCreditAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "neuralNetworkInformation").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setNeuralNetworkInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setNeuralNetworkInformation(NeuralNetworkInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "nominalInterest").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "nominalInterest" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setNominalInterest(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setNominalInterest(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "partnerIdentNumber").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setPartnerIdentNumber(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "reasonOfDenial").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "reasonOfDenial" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setReasonOfDenial(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setReasonOfDenial(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "schufaInformation").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setSchufaInformation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setSchufaInformation(SchufaInformation.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "schufaScore").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "schufaScore" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setSchufaScore(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setSchufaScore(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "startDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setStartDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "status").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "status" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setStatus(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setStatus(java.lang.Integer.MIN_VALUE);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "totalCreditAmount").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "totalCreditAmount" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setTotalCreditAmount(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        object.setTotalCreditAmount(java.lang.Double.NaN);
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ResidencyInformation implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ResidencyInformation
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for Citizenship
         */
        protected java.lang.String localCitizenship;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCitizenshipTracker = false;

        /**
         * field for LimitedResidencePermit
         */
        protected boolean localLimitedResidencePermit;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLimitedResidencePermitTracker = false;

        /**
         * field for ResidencePermitUntilDate
         */
        protected java.util.Calendar localResidencePermitUntilDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResidencePermitUntilDateTracker = false;

        public boolean isCitizenshipSpecified() {
            return localCitizenshipTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCitizenship() {
            return localCitizenship;
        }

        /**
         * Auto generated setter method
         * @param param Citizenship
         */
        public void setCitizenship(java.lang.String param) {
            localCitizenshipTracker = true;

            this.localCitizenship = param;
        }

        public boolean isLimitedResidencePermitSpecified() {
            return localLimitedResidencePermitTracker;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getLimitedResidencePermit() {
            return localLimitedResidencePermit;
        }

        /**
         * Auto generated setter method
         * @param param LimitedResidencePermit
         */
        public void setLimitedResidencePermit(boolean param) {
            // setting primitive attribute tracker to true
            localLimitedResidencePermitTracker = true;

            this.localLimitedResidencePermit = param;
        }

        public boolean isResidencePermitUntilDateSpecified() {
            return localResidencePermitUntilDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getResidencePermitUntilDate() {
            return localResidencePermitUntilDate;
        }

        /**
         * Auto generated setter method
         * @param param ResidencePermitUntilDate
         */
        public void setResidencePermitUntilDate(java.util.Calendar param) {
            localResidencePermitUntilDateTracker = true;

            this.localResidencePermitUntilDate = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ResidencyInformation", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ResidencyInformation", xmlWriter);
                }
            }

            if (localCitizenshipTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "citizenship", xmlWriter);

                if (localCitizenship == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localCitizenship);
                }

                xmlWriter.writeEndElement();
            }

            if (localLimitedResidencePermitTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "limitedResidencePermit",
                    xmlWriter);

                if (false) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "limitedResidencePermit cannot be null!!");
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localLimitedResidencePermit));
                }

                xmlWriter.writeEndElement();
            }

            if (localResidencePermitUntilDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "residencePermitUntilDate",
                    xmlWriter);

                if (localResidencePermitUntilDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResidencePermitUntilDate));
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localCitizenshipTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "citizenship"));

                elementList.add((localCitizenship == null) ? null
                                                           : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCitizenship));
            }

            if (localLimitedResidencePermitTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "limitedResidencePermit"));

                elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLimitedResidencePermit));
            }

            if (localResidencePermitUntilDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "residencePermitUntilDate"));

                elementList.add((localResidencePermitUntilDate == null) ? null
                                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localResidencePermitUntilDate));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ResidencyInformation parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ResidencyInformation object = new ResidencyInformation();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ResidencyInformation".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ResidencyInformation) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "citizenship").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setCitizenship(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "limitedResidencePermit").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            throw new org.apache.axis2.databinding.ADBException(
                                "The element: " + "limitedResidencePermit" +
                                "  cannot be null");
                        }

                        java.lang.String content = reader.getElementText();

                        object.setLimitedResidencePermit(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                content));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "residencePermitUntilDate").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setResidencePermitUntilDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BaseRequest implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BaseRequest
           Namespace URI = http://services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns1
         */

        /**
         * field for ClientIdentification
         */
        protected ClientIdentification localClientIdentification;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localClientIdentificationTracker = false;

        public boolean isClientIdentificationSpecified() {
            return localClientIdentificationTracker;
        }

        /**
         * Auto generated getter method
         * @return ClientIdentification
         */
        public ClientIdentification getClientIdentification() {
            return localClientIdentification;
        }

        /**
         * Auto generated setter method
         * @param param ClientIdentification
         */
        public void setClientIdentification(ClientIdentification param) {
            localClientIdentificationTracker = true;

            this.localClientIdentification = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BaseRequest", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BaseRequest", xmlWriter);
                }
            }

            if (localClientIdentificationTracker) {
                if (localClientIdentification == null) {
                    writeStartElement(null,
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClientIdentification.serialize(new javax.xml.namespace.QName(
                            "http://services.types.oks.swkbank.netempire.de/xsd",
                            "clientIdentification"), xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localClientIdentificationTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://services.types.oks.swkbank.netempire.de/xsd",
                        "clientIdentification"));

                elementList.add((localClientIdentification == null) ? null
                                                                    : localClientIdentification);
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BaseRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BaseRequest object = new BaseRequest();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BaseRequest".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BaseRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://services.types.oks.swkbank.netempire.de/xsd",
                                "clientIdentification").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClientIdentification(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClientIdentification(ClientIdentification.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class GetServiceVersionResponse implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://creditdecision.services.oks.swkbank.netempire.de",
                "getServiceVersionResponse", "ns6");

        /**
         * field for _return
         */
        protected java.lang.String local_return;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean local_returnTracker = false;

        public boolean is_returnSpecified() {
            return local_returnTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String get_return() {
            return local_return;
        }

        /**
         * Auto generated setter method
         * @param param _return
         */
        public void set_return(java.lang.String param) {
            local_returnTracker = true;

            this.local_return = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    MY_QNAME);

            return factory.createOMElement(dataSource, MY_QNAME);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://creditdecision.services.oks.swkbank.netempire.de");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":getServiceVersionResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "getServiceVersionResponse", xmlWriter);
                }
            }

            if (local_returnTracker) {
                namespace = "http://creditdecision.services.oks.swkbank.netempire.de";
                writeStartElement(null, namespace, "return", xmlWriter);

                if (local_return == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(local_return);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://creditdecision.services.oks.swkbank.netempire.de")) {
                return "ns6";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (local_returnTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://creditdecision.services.oks.swkbank.netempire.de",
                        "return"));

                elementList.add((local_return == null) ? null
                                                       : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_return));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static GetServiceVersionResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                GetServiceVersionResponse object = new GetServiceVersionResponse();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"getServiceVersionResponse".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (GetServiceVersionResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://creditdecision.services.oks.swkbank.netempire.de",
                                "return").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Person implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Person
           Namespace URI = http://credit.services.types.oks.swkbank.netempire.de/xsd
           Namespace Prefix = ns4
         */

        /**
         * field for BirthDate
         */
        protected java.util.Calendar localBirthDate;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBirthDateTracker = false;

        /**
         * field for BirthName
         */
        protected java.lang.String localBirthName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBirthNameTracker = false;

        /**
         * field for BirthPlace
         */
        protected java.lang.String localBirthPlace;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localBirthPlaceTracker = false;

        /**
         * field for Email
         */
        protected java.lang.String localEmail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEmailTracker = false;

        /**
         * field for FirstName
         */
        protected java.lang.String localFirstName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFirstNameTracker = false;

        /**
         * field for Gender
         */
        protected java.lang.String localGender;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localGenderTracker = false;

        /**
         * field for HomeAddress
         */
        protected Address localHomeAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localHomeAddressTracker = false;

        /**
         * field for LastName
         */
        protected java.lang.String localLastName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLastNameTracker = false;

        /**
         * field for Mobile
         */
        protected java.lang.String localMobile;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMobileTracker = false;

        /**
         * field for OldAddress
         */
        protected Address localOldAddress;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOldAddressTracker = false;

        /**
         * field for Phone
         */
        protected java.lang.String localPhone;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhoneTracker = false;

        /**
         * field for ResidentAtHomeAddressSince
         */
        protected java.util.Calendar localResidentAtHomeAddressSince;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResidentAtHomeAddressSinceTracker = false;

        /**
         * field for Title
         */
        protected java.lang.String localTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitleTracker = false;

        public boolean isBirthDateSpecified() {
            return localBirthDateTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getBirthDate() {
            return localBirthDate;
        }

        /**
         * Auto generated setter method
         * @param param BirthDate
         */
        public void setBirthDate(java.util.Calendar param) {
            localBirthDateTracker = true;

            this.localBirthDate = param;
        }

        public boolean isBirthNameSpecified() {
            return localBirthNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBirthName() {
            return localBirthName;
        }

        /**
         * Auto generated setter method
         * @param param BirthName
         */
        public void setBirthName(java.lang.String param) {
            localBirthNameTracker = true;

            this.localBirthName = param;
        }

        public boolean isBirthPlaceSpecified() {
            return localBirthPlaceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getBirthPlace() {
            return localBirthPlace;
        }

        /**
         * Auto generated setter method
         * @param param BirthPlace
         */
        public void setBirthPlace(java.lang.String param) {
            localBirthPlaceTracker = true;

            this.localBirthPlace = param;
        }

        public boolean isEmailSpecified() {
            return localEmailTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getEmail() {
            return localEmail;
        }

        /**
         * Auto generated setter method
         * @param param Email
         */
        public void setEmail(java.lang.String param) {
            localEmailTracker = true;

            this.localEmail = param;
        }

        public boolean isFirstNameSpecified() {
            return localFirstNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getFirstName() {
            return localFirstName;
        }

        /**
         * Auto generated setter method
         * @param param FirstName
         */
        public void setFirstName(java.lang.String param) {
            localFirstNameTracker = true;

            this.localFirstName = param;
        }

        public boolean isGenderSpecified() {
            return localGenderTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getGender() {
            return localGender;
        }

        /**
         * Auto generated setter method
         * @param param Gender
         */
        public void setGender(java.lang.String param) {
            localGenderTracker = true;

            this.localGender = param;
        }

        public boolean isHomeAddressSpecified() {
            return localHomeAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return Address
         */
        public Address getHomeAddress() {
            return localHomeAddress;
        }

        /**
         * Auto generated setter method
         * @param param HomeAddress
         */
        public void setHomeAddress(Address param) {
            localHomeAddressTracker = true;

            this.localHomeAddress = param;
        }

        public boolean isLastNameSpecified() {
            return localLastNameTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getLastName() {
            return localLastName;
        }

        /**
         * Auto generated setter method
         * @param param LastName
         */
        public void setLastName(java.lang.String param) {
            localLastNameTracker = true;

            this.localLastName = param;
        }

        public boolean isMobileSpecified() {
            return localMobileTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMobile() {
            return localMobile;
        }

        /**
         * Auto generated setter method
         * @param param Mobile
         */
        public void setMobile(java.lang.String param) {
            localMobileTracker = true;

            this.localMobile = param;
        }

        public boolean isOldAddressSpecified() {
            return localOldAddressTracker;
        }

        /**
         * Auto generated getter method
         * @return Address
         */
        public Address getOldAddress() {
            return localOldAddress;
        }

        /**
         * Auto generated setter method
         * @param param OldAddress
         */
        public void setOldAddress(Address param) {
            localOldAddressTracker = true;

            this.localOldAddress = param;
        }

        public boolean isPhoneSpecified() {
            return localPhoneTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getPhone() {
            return localPhone;
        }

        /**
         * Auto generated setter method
         * @param param Phone
         */
        public void setPhone(java.lang.String param) {
            localPhoneTracker = true;

            this.localPhone = param;
        }

        public boolean isResidentAtHomeAddressSinceSpecified() {
            return localResidentAtHomeAddressSinceTracker;
        }

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getResidentAtHomeAddressSince() {
            return localResidentAtHomeAddressSince;
        }

        /**
         * Auto generated setter method
         * @param param ResidentAtHomeAddressSince
         */
        public void setResidentAtHomeAddressSince(java.util.Calendar param) {
            localResidentAtHomeAddressSinceTracker = true;

            this.localResidentAtHomeAddressSince = param;
        }

        public boolean isTitleSpecified() {
            return localTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getTitle() {
            return localTitle;
        }

        /**
         * Auto generated setter method
         * @param param Title
         */
        public void setTitle(java.lang.String param) {
            localTitleTracker = true;

            this.localTitle = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(this,
                    parentQName);

            return factory.createOMElement(dataSource, parentQName);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Person", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Person", xmlWriter);
                }
            }

            if (localBirthDateTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "birthDate", xmlWriter);

                if (localBirthDate == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localBirthDate));
                }

                xmlWriter.writeEndElement();
            }

            if (localBirthNameTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "birthName", xmlWriter);

                if (localBirthName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localBirthName);
                }

                xmlWriter.writeEndElement();
            }

            if (localBirthPlaceTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "birthPlace", xmlWriter);

                if (localBirthPlace == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localBirthPlace);
                }

                xmlWriter.writeEndElement();
            }

            if (localEmailTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "email", xmlWriter);

                if (localEmail == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localEmail);
                }

                xmlWriter.writeEndElement();
            }

            if (localFirstNameTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "firstName", xmlWriter);

                if (localFirstName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localFirstName);
                }

                xmlWriter.writeEndElement();
            }

            if (localGenderTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "gender", xmlWriter);

                if (localGender == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localGender);
                }

                xmlWriter.writeEndElement();
            }

            if (localHomeAddressTracker) {
                if (localHomeAddress == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "homeAddress", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localHomeAddress.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "homeAddress"), xmlWriter);
                }
            }

            if (localLastNameTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "lastName", xmlWriter);

                if (localLastName == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localLastName);
                }

                xmlWriter.writeEndElement();
            }

            if (localMobileTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "mobile", xmlWriter);

                if (localMobile == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localMobile);
                }

                xmlWriter.writeEndElement();
            }

            if (localOldAddressTracker) {
                if (localOldAddress == null) {
                    writeStartElement(null,
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "oldAddress", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOldAddress.serialize(new javax.xml.namespace.QName(
                            "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                            "oldAddress"), xmlWriter);
                }
            }

            if (localPhoneTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "phone", xmlWriter);

                if (localPhone == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localPhone);
                }

                xmlWriter.writeEndElement();
            }

            if (localResidentAtHomeAddressSinceTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace,
                    "residentAtHomeAddressSince", xmlWriter);

                if (localResidentAtHomeAddressSince == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            localResidentAtHomeAddressSince));
                }

                xmlWriter.writeEndElement();
            }

            if (localTitleTracker) {
                namespace = "http://credit.services.types.oks.swkbank.netempire.de/xsd";
                writeStartElement(null, namespace, "title", xmlWriter);

                if (localTitle == null) {
                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                } else {
                    xmlWriter.writeCharacters(localTitle);
                }

                xmlWriter.writeEndElement();
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd")) {
                return "ns4";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            xmlWriter.writeAttribute(namespace, attName, attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace, attName, attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         * databinding method to get an XML representation of this object
         *
         */
        public javax.xml.stream.XMLStreamReader getPullParser(
            javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException {
            java.util.ArrayList elementList = new java.util.ArrayList();
            java.util.ArrayList attribList = new java.util.ArrayList();

            if (localBirthDateTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "birthDate"));

                elementList.add((localBirthDate == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBirthDate));
            }

            if (localBirthNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "birthName"));

                elementList.add((localBirthName == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBirthName));
            }

            if (localBirthPlaceTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "birthPlace"));

                elementList.add((localBirthPlace == null) ? null
                                                          : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localBirthPlace));
            }

            if (localEmailTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "email"));

                elementList.add((localEmail == null) ? null
                                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localEmail));
            }

            if (localFirstNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "firstName"));

                elementList.add((localFirstName == null) ? null
                                                         : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localFirstName));
            }

            if (localGenderTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "gender"));

                elementList.add((localGender == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localGender));
            }

            if (localHomeAddressTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "homeAddress"));

                elementList.add((localHomeAddress == null) ? null
                                                           : localHomeAddress);
            }

            if (localLastNameTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "lastName"));

                elementList.add((localLastName == null) ? null
                                                        : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLastName));
            }

            if (localMobileTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "mobile"));

                elementList.add((localMobile == null) ? null
                                                      : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMobile));
            }

            if (localOldAddressTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "oldAddress"));

                elementList.add((localOldAddress == null) ? null : localOldAddress);
            }

            if (localPhoneTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "phone"));

                elementList.add((localPhone == null) ? null
                                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localPhone));
            }

            if (localResidentAtHomeAddressSinceTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "residentAtHomeAddressSince"));

                elementList.add((localResidentAtHomeAddressSince == null)
                    ? null
                    : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localResidentAtHomeAddressSince));
            }

            if (localTitleTracker) {
                elementList.add(new javax.xml.namespace.QName(
                        "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                        "title"));

                elementList.add((localTitle == null) ? null
                                                     : org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTitle));
            }

            return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName,
                elementList.toArray(), attribList.toArray());
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Person parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Person object = new Person();

                int event;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Person".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Person) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "birthDate").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBirthDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "birthName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBirthName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "birthPlace").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setBirthPlace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "email").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "firstName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setFirstName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "gender").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setGender(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "homeAddress").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setHomeAddress(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setHomeAddress(Address.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "lastName").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setLastName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "mobile").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setMobile(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "oldAddress").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setOldAddress(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setOldAddress(Address.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "phone").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setPhone(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "residentAtHomeAddressSince").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setResidentAtHomeAddressSince(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://credit.services.types.oks.swkbank.netempire.de/xsd",
                                "title").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if (!"true".equals(nillableValue) &&
                                !"1".equals(nillableValue)) {
                            java.lang.String content = reader.getElementText();

                            object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    content));
                        } else {
                            reader.getElementText(); // throw away text nodes if any.
                        }

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
