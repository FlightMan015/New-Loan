pipeline {
    agent any
    environment {
        GIT_MESSAGE = sh(script: 'git log $COMMIT --format=format:%s -1', , returnStdout: true).trim()
        GIT_AUTHOR  = sh(script: 'git log $COMMIT -1 --pretty=format:%an', , returnStdout: true).trim()
        GIT_REPO_NAME = env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')
    }
    stages {
        stage('Prod Deploy') {
            steps {

            script {

                // It's necessary to define where is the docker and the paths for the tools
                def dockerHome = tool 'default'
                env.PATH = "${dockerHome}/bin:${env.PATH}"

                env.BUILD_NUMBER = input message: 'Enter the build number', 
                            parameters: [string(defaultValue: '', description: '', name: 'build')] 
                    }  

                // Update K8s deployment with the new ECR image
                sh "export AWS_PROFILE=default ; kubectl config use-context aws ; kubectl -n prod-${env.GIT_REPO_NAME} set image deployment prod-${env.GIT_REPO_NAME}=840916144018.dkr.ecr.eu-central-1.amazonaws.com/${env.GIT_REPO_NAME}/master:${env.BUILD_NUMBER} --all"

                // Tag Git with PROD
                sh 'git push --delete origin PROD'
                sh 'git fetch --tags --all'
                sh "git checkout tags/${env.BUILD_NUMBER}"
                sh 'git tag -d PROD'
                sh 'git tag PROD'
                sh 'git push origin --tags'

                // Tag ECR
//                sh 'echo $BUILD_NUMBER'
//                sh "export AWS_PROFILE=stg ; aws ecr batch-get-image --repository-name $GIT_REPO_NAME/master --image-ids imageTag=$BUILD_NUMBER --query 'images[].imageManifest' --output text >> tag.txt" 
//                sh 'export AWS_PROFILE=stg ; aws ecr put-image --repository-name $GIT_REPO_NAME/master --image-tag PROD --image-manifest file://tag.txt'


                // Update helm charts deployment image
                sh 'rm -rf helm-charts ; git clone git@gitlab.com:betterchange/devops/helm-charts.git'
                sh 'cd helm-charts ; sed -i -e "s|image: 840916144018.dkr.ecr.eu-central-1.amazonaws.com/$GIT_REPO_NAME/master:.*|image: 840916144018.dkr.ecr.eu-central-1.amazonaws.com/$GIT_REPO_NAME/master:$BUILD_NUMBER|g" ./prod/$GIT_REPO_NAME/prod-$GIT_REPO_NAME.yaml'
                sh 'cd helm-charts ; git add . ; git commit -m "Update production image for $GIT_REPO_NAME" ; git push'
            }
        }

    }

  post {
        always {
          script {
                def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
                slackSend   message: "*${currentBuild.currentResult}:* ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|Open>) - ${env.GIT_MESSAGE} - started by ${env.GIT_AUTHOR}",
                    baseUrl: "https://joonko-io.slack.com/services/hooks/jenkins-ci/",
                    channel: "jenkins",
                    color: COLOR_MAP[currentBuild.currentResult],
                    tokenCredentialId: "slack"
                  }
              }
          }

}
